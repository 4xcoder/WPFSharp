using System;

namespace WPFSharp.Builder {
    public abstract partial class FrameworkElement {
        public System.Windows.FrameworkElement C { get; set; }


        public FrameworkElement DockAt( Bind<System.Windows.Controls.Dock> bind ) {
            System.Windows.Controls.DockPanel.SetDock( C, bind.V );;
            return this;
        }


        public FrameworkElement GridSetRowColumn( int row, int column ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            return this;
        }

        public FrameworkElement EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public FrameworkElement EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public FrameworkElement EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public FrameworkElement EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public FrameworkElement EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public FrameworkElement EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public FrameworkElement EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public FrameworkElement EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public FrameworkElement EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public FrameworkElement EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public FrameworkElement EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public FrameworkElement EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public FrameworkElement EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public FrameworkElement EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public FrameworkElement EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public FrameworkElement EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public FrameworkElement EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public FrameworkElement EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public FrameworkElement EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public FrameworkElement EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public FrameworkElement EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public FrameworkElement EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public FrameworkElement EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public FrameworkElement EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public FrameworkElement EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public FrameworkElement EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public FrameworkElement EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public FrameworkElement EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public FrameworkElement EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public FrameworkElement EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public FrameworkElement EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public FrameworkElement EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public FrameworkElement EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public FrameworkElement EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public FrameworkElement EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public FrameworkElement EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public FrameworkElement EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public FrameworkElement EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public FrameworkElement EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public FrameworkElement EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public FrameworkElement EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public FrameworkElement EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public FrameworkElement EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public FrameworkElement EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public FrameworkElement EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public FrameworkElement EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public FrameworkElement EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public FrameworkElement EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public FrameworkElement EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public FrameworkElement EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public FrameworkElement EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public FrameworkElement EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public FrameworkElement EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public FrameworkElement EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public FrameworkElement EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public FrameworkElement EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public FrameworkElement EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public FrameworkElement EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public FrameworkElement EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public FrameworkElement EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public FrameworkElement EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public FrameworkElement EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public FrameworkElement EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public FrameworkElement EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public FrameworkElement EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public FrameworkElement EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public FrameworkElement EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public FrameworkElement EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public FrameworkElement EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public FrameworkElement EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public FrameworkElement EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public FrameworkElement EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public FrameworkElement EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public FrameworkElement EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public FrameworkElement EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public FrameworkElement EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public FrameworkElement EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public FrameworkElement EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public FrameworkElement EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public FrameworkElement EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public FrameworkElement EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public FrameworkElement EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public FrameworkElement EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public FrameworkElement EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public FrameworkElement EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public FrameworkElement EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public FrameworkElement EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public FrameworkElement EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public FrameworkElement EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public FrameworkElement EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public FrameworkElement EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public FrameworkElement EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public FrameworkElement EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public FrameworkElement EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public FrameworkElement EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public FrameworkElement EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public FrameworkElement EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public FrameworkElement EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public FrameworkElement EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public FrameworkElement EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public FrameworkElement EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public FrameworkElement EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public FrameworkElement EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public FrameworkElement EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public FrameworkElement EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public FrameworkElement EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public FrameworkElement EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public FrameworkElement EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public FrameworkElement Style( Bind<System.Windows.Style> bind ) {
            C.Style = bind.V;
            return this;
        }


        public FrameworkElement OverridesDefaultStyle( Bind<System.Boolean> bind ) {
            C.OverridesDefaultStyle = bind.V;
            return this;
        }


        public FrameworkElement UseLayoutRounding( Bind<System.Boolean> bind ) {
            C.UseLayoutRounding = bind.V;
            return this;
        }


        public FrameworkElement Resources( Bind<System.Windows.ResourceDictionary> bind ) {
            C.Resources = bind.V;
            return this;
        }


        public FrameworkElement DataContext( Bind<System.Object> bind ) {
            C.DataContext = bind.V;
            return this;
        }


        public FrameworkElement Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
            C.Language = bind.V;
            return this;
        }


        public FrameworkElement Name( Bind<System.String> bind ) {
            C.Name = bind.V;
            return this;
        }


        public FrameworkElement Tag( Bind<System.Object> bind ) {
            C.Tag = bind.V;
            return this;
        }


        public FrameworkElement LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
            C.LayoutTransform = bind.V;
            return this;
        }


        public FrameworkElement Width( Bind<System.Double> bind ) {
            C.Width = bind.V;
            return this;
        }


        public FrameworkElement MinWidth( Bind<System.Double> bind ) {
            C.MinWidth = bind.V;
            return this;
        }


        public FrameworkElement MaxWidth( Bind<System.Double> bind ) {
            C.MaxWidth = bind.V;
            return this;
        }


        public FrameworkElement Height( Bind<System.Double> bind ) {
            C.Height = bind.V;
            return this;
        }


        public FrameworkElement MinHeight( Bind<System.Double> bind ) {
            C.MinHeight = bind.V;
            return this;
        }


        public FrameworkElement MaxHeight( Bind<System.Double> bind ) {
            C.MaxHeight = bind.V;
            return this;
        }


        public FrameworkElement FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
            C.FlowDirection = bind.V;
            return this;
        }


        public FrameworkElement Margin( Bind<System.Windows.Thickness> bind ) {
            C.Margin = bind.V;
            return this;
        }


        public FrameworkElement HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalAlignment = bind.V;
            return this;
        }


        public FrameworkElement VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalAlignment = bind.V;
            return this;
        }


        public FrameworkElement FocusVisualStyle( Bind<System.Windows.Style> bind ) {
            C.FocusVisualStyle = bind.V;
            return this;
        }


        public FrameworkElement Cursor( Bind<System.Windows.Input.Cursor> bind ) {
            C.Cursor = bind.V;
            return this;
        }


        public FrameworkElement ForceCursor( Bind<System.Boolean> bind ) {
            C.ForceCursor = bind.V;
            return this;
        }


        public FrameworkElement ToolTip( Bind<System.Object> bind ) {
            C.ToolTip = bind.V;
            return this;
        }


        public FrameworkElement ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
            C.ContextMenu = bind.V;
            return this;
        }


        public FrameworkElement AllowDrop( Bind<System.Boolean> bind ) {
            C.AllowDrop = bind.V;
            return this;
        }


        public FrameworkElement RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
            C.RenderTransform = bind.V;
            return this;
        }


        public FrameworkElement RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
            C.RenderTransformOrigin = bind.V;
            return this;
        }


        public FrameworkElement Opacity( Bind<System.Double> bind ) {
            C.Opacity = bind.V;
            return this;
        }


        public FrameworkElement OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
            C.OpacityMask = bind.V;
            return this;
        }


        public FrameworkElement Uid( Bind<System.String> bind ) {
            C.Uid = bind.V;
            return this;
        }


        public FrameworkElement Visibility( Bind<System.Windows.Visibility> bind ) {
            C.Visibility = bind.V;
            return this;
        }


        public FrameworkElement ClipToBounds( Bind<System.Boolean> bind ) {
            C.ClipToBounds = bind.V;
            return this;
        }


        public FrameworkElement SnapsToDevicePixels( Bind<System.Boolean> bind ) {
            C.SnapsToDevicePixels = bind.V;
            return this;
        }


        public FrameworkElement IsEnabled( Bind<System.Boolean> bind ) {
            C.IsEnabled = bind.V;
            return this;
        }


        public FrameworkElement Focusable( Bind<System.Boolean> bind ) {
            C.Focusable = bind.V;
            return this;
        }

   }

    public partial class Window : FrameworkElement {
        public new System.Windows.Window C { get { return base.C as System.Windows.Window; } set { base.C = value; } }


        public static Window Make() {
            return new Window();
        }

        public Window() {
            C = new System.Windows.Window();
        }

        public new Window GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new Window EventSourceInitialized( System.EventHandler e ) {
            C.SourceInitialized += e;
            return this;
        }

        public new Window EventActivated( System.EventHandler e ) {
            C.Activated += e;
            return this;
        }

        public new Window EventDeactivated( System.EventHandler e ) {
            C.Deactivated += e;
            return this;
        }

        public new Window EventStateChanged( System.EventHandler e ) {
            C.StateChanged += e;
            return this;
        }

        public new Window EventLocationChanged( System.EventHandler e ) {
            C.LocationChanged += e;
            return this;
        }

        public new Window EventClosing( System.ComponentModel.CancelEventHandler e ) {
            C.Closing += e;
            return this;
        }

        public new Window EventClosed( System.EventHandler e ) {
            C.Closed += e;
            return this;
        }

        public new Window EventContentRendered( System.EventHandler e ) {
            C.ContentRendered += e;
            return this;
        }

        public new Window EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new Window EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new Window EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Window EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Window EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Window EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Window EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Window EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Window EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Window EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Window EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Window EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Window EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Window EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Window EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Window EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Window EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Window EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Window EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Window EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Window EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Window EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Window EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Window EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Window EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Window EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Window EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Window EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Window EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Window EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Window EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Window EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Window EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Window EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Window EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Window EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Window EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Window EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Window EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Window EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Window EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Window EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Window EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Window EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Window EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Window EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Window EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Window EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Window EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Window EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Window EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Window EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Window EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Window EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Window EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Window EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Window EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Window EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Window EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Window EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Window EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Window EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Window EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Window EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Window EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Window EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Window EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Window EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Window EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Window EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Window EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Window EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Window EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Window EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Window EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Window EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Window EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Window EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Window EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Window EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Window EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Window EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Window EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Window EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Window EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Window EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Window EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Window EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Window EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Window EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Window EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Window EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Window EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Window EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Window EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Window EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Window EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Window EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Window EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Window EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Window EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Window EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Window EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Window EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Window EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Window EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Window EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Window EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Window EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Window EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public Window TaskbarItemInfo( Bind<System.Windows.Shell.TaskbarItemInfo> bind ) {
            C.TaskbarItemInfo = bind.V;
            return this;
        }



        public Window AllowsTransparency( Bind<System.Boolean> bind ) {
            C.AllowsTransparency = bind.V;
            return this;
        }



        public Window Title( Bind<System.String> bind ) {
            C.Title = bind.V;
            return this;
        }



        public Window Icon( Bind<System.Windows.Media.ImageSource> bind ) {
            C.Icon = bind.V;
            return this;
        }



        public Window SizeToContent( Bind<System.Windows.SizeToContent> bind ) {
            C.SizeToContent = bind.V;
            return this;
        }



        public Window Top( Bind<System.Double> bind ) {
            C.Top = bind.V;
            return this;
        }



        public Window Left( Bind<System.Double> bind ) {
            C.Left = bind.V;
            return this;
        }




        public Window WindowStartupLocation( Bind<System.Windows.WindowStartupLocation> bind ) {
            C.WindowStartupLocation = bind.V;
            return this;
        }



        public Window ShowInTaskbar( Bind<System.Boolean> bind ) {
            C.ShowInTaskbar = bind.V;
            return this;
        }




        public Window Owner( Bind<System.Windows.Window> bind ) {
            C.Owner = bind.V;
            return this;
        }




        public Window DialogResult( Bind<bool?> bind ) {
            C.DialogResult = bind.V;
            return this;
        }



        public Window WindowStyle( Bind<System.Windows.WindowStyle> bind ) {
            C.WindowStyle = bind.V;
            return this;
        }



        public Window WindowState( Bind<System.Windows.WindowState> bind ) {
            C.WindowState = bind.V;
            return this;
        }



        public Window ResizeMode( Bind<System.Windows.ResizeMode> bind ) {
            C.ResizeMode = bind.V;
            return this;
        }



        public Window Topmost( Bind<System.Boolean> bind ) {
            C.Topmost = bind.V;
            return this;
        }



        public Window ShowActivated( Bind<System.Boolean> bind ) {
            C.ShowActivated = bind.V;
            return this;
        }



        public Window Content( Bind<System.Object> bind ) {
            if ( bind.V is FrameworkElement )
                C.Content = ((FrameworkElement) bind.V).C;
            else
                C.Content = bind.V;
            return this;
        }




        public Window ContentTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ContentTemplate = bind.V;
            return this;
        }



        public Window ContentTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ContentTemplateSelector = bind.V;
            return this;
        }



        public Window ContentStringFormat( Bind<System.String> bind ) {
            C.ContentStringFormat = bind.V;
            return this;
        }



        public Window BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public Window BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public Window Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public Window Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public Window FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public Window FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public Window FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public Window FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public Window FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public Window HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public Window VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public Window TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public Window Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public Window Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new Window Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Window;
        }


        public new Window OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Window;
        }


        public new Window UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Window;
        }


        public new Window Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Window;
        }


        public new Window DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Window;
        }


        public new Window Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Window;
        }


        public new Window Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Window;
        }


        public new Window Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Window;
        }


        public new Window LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Window;
        }


        public new Window Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Window;
        }


        public new Window MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Window;
        }


        public new Window MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Window;
        }


        public new Window Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Window;
        }


        public new Window MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Window;
        }


        public new Window MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Window;
        }


        public new Window FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Window;
        }


        public new Window Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Window;
        }


        public new Window HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Window;
        }


        public new Window VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Window;
        }


        public new Window FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Window;
        }


        public new Window Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Window;
        }


        public new Window ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Window;
        }


        public new Window ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Window;
        }


        public new Window ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Window;
        }


        public new Window AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Window;
        }


        public new Window RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Window;
        }


        public new Window RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Window;
        }


        public new Window Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Window;
        }


        public new Window OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Window;
        }


        public new Window Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Window;
        }


        public new Window Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Window;
        }


        public new Window ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Window;
        }


        public new Window SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Window;
        }


        public new Window IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Window;
        }


        public new Window Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Window;
        }

   }

    public partial class AccessText : FrameworkElement {
        public new System.Windows.Controls.AccessText C { get { return base.C as System.Windows.Controls.AccessText; } set { base.C = value; } }


        public static AccessText Make() {
            return new AccessText();
        }

        public AccessText() {
            C = new System.Windows.Controls.AccessText();
        }

        public new AccessText GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new AccessText EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new AccessText EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new AccessText EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new AccessText EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new AccessText EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new AccessText EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new AccessText EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new AccessText EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new AccessText EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new AccessText EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new AccessText EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new AccessText EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new AccessText EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new AccessText EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new AccessText EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new AccessText EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new AccessText EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new AccessText EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new AccessText EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new AccessText EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new AccessText EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new AccessText EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new AccessText EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new AccessText EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new AccessText EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new AccessText EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new AccessText EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new AccessText EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new AccessText EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new AccessText EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new AccessText EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new AccessText EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new AccessText EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new AccessText EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new AccessText EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new AccessText EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new AccessText EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new AccessText EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new AccessText EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new AccessText EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new AccessText EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new AccessText EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new AccessText EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new AccessText EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new AccessText EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new AccessText EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new AccessText EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new AccessText EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new AccessText EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new AccessText EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new AccessText EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new AccessText EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new AccessText EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new AccessText EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new AccessText EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new AccessText EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new AccessText EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new AccessText EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new AccessText EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new AccessText EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new AccessText EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new AccessText EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new AccessText EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new AccessText EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new AccessText EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new AccessText EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new AccessText EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new AccessText EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new AccessText EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new AccessText EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new AccessText EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new AccessText EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new AccessText EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new AccessText EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new AccessText EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new AccessText EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new AccessText EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new AccessText EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new AccessText EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new AccessText EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new AccessText EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new AccessText EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new AccessText EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new AccessText EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new AccessText EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new AccessText EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new AccessText EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new AccessText EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new AccessText EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new AccessText EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new AccessText EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new AccessText EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new AccessText EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new AccessText EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new AccessText EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new AccessText EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new AccessText EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new AccessText EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new AccessText EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new AccessText EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new AccessText EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new AccessText EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new AccessText EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new AccessText EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new AccessText EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new AccessText EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new AccessText EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new AccessText EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }


        public AccessText Text( Bind<System.String> bind ) {
            C.Text = bind.V;
            return this;
        }



        public AccessText FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public AccessText FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public AccessText FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public AccessText FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public AccessText FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public AccessText Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public AccessText Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public AccessText TextDecorations( Bind<System.Windows.TextDecorationCollection> bind ) {
            C.TextDecorations = bind.V;
            return this;
        }



        public AccessText TextEffects( Bind<System.Windows.Media.TextEffectCollection> bind ) {
            C.TextEffects = bind.V;
            return this;
        }



        public AccessText LineHeight( Bind<System.Double> bind ) {
            C.LineHeight = bind.V;
            return this;
        }



        public AccessText LineStackingStrategy( Bind<System.Windows.LineStackingStrategy> bind ) {
            C.LineStackingStrategy = bind.V;
            return this;
        }



        public AccessText TextAlignment( Bind<System.Windows.TextAlignment> bind ) {
            C.TextAlignment = bind.V;
            return this;
        }



        public AccessText TextTrimming( Bind<System.Windows.TextTrimming> bind ) {
            C.TextTrimming = bind.V;
            return this;
        }



        public AccessText TextWrapping( Bind<System.Windows.TextWrapping> bind ) {
            C.TextWrapping = bind.V;
            return this;
        }



        public AccessText BaselineOffset( Bind<System.Double> bind ) {
            C.BaselineOffset = bind.V;
            return this;
        }



        public new AccessText Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as AccessText;
        }


        public new AccessText OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as AccessText;
        }


        public new AccessText UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as AccessText;
        }


        public new AccessText Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as AccessText;
        }


        public new AccessText DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as AccessText;
        }


        public new AccessText Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as AccessText;
        }


        public new AccessText Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as AccessText;
        }


        public new AccessText Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as AccessText;
        }


        public new AccessText LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as AccessText;
        }


        public new AccessText Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as AccessText;
        }


        public new AccessText MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as AccessText;
        }


        public new AccessText MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as AccessText;
        }


        public new AccessText Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as AccessText;
        }


        public new AccessText MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as AccessText;
        }


        public new AccessText MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as AccessText;
        }


        public new AccessText FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as AccessText;
        }


        public new AccessText Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as AccessText;
        }


        public new AccessText HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as AccessText;
        }


        public new AccessText VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as AccessText;
        }


        public new AccessText FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as AccessText;
        }


        public new AccessText Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as AccessText;
        }


        public new AccessText ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as AccessText;
        }


        public new AccessText ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as AccessText;
        }


        public new AccessText ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as AccessText;
        }


        public new AccessText AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as AccessText;
        }


        public new AccessText RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as AccessText;
        }


        public new AccessText RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as AccessText;
        }


        public new AccessText Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as AccessText;
        }


        public new AccessText OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as AccessText;
        }


        public new AccessText Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as AccessText;
        }


        public new AccessText Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as AccessText;
        }


        public new AccessText ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as AccessText;
        }


        public new AccessText SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as AccessText;
        }


        public new AccessText IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as AccessText;
        }


        public new AccessText Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as AccessText;
        }

   }

    public partial class Border : FrameworkElement {
        public new System.Windows.Controls.Border C { get { return base.C as System.Windows.Controls.Border; } set { base.C = value; } }


        public static Border Make() {
            return new Border();
        }

        public Border() {
            C = new System.Windows.Controls.Border();
        }

        public new Border GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new Border EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Border EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Border EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Border EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Border EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Border EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Border EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Border EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Border EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Border EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Border EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Border EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Border EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Border EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Border EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Border EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Border EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Border EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Border EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Border EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Border EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Border EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Border EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Border EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Border EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Border EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Border EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Border EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Border EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Border EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Border EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Border EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Border EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Border EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Border EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Border EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Border EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Border EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Border EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Border EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Border EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Border EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Border EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Border EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Border EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Border EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Border EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Border EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Border EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Border EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Border EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Border EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Border EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Border EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Border EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Border EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Border EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Border EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Border EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Border EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Border EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Border EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Border EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Border EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Border EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Border EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Border EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Border EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Border EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Border EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Border EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Border EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Border EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Border EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Border EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Border EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Border EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Border EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Border EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Border EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Border EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Border EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Border EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Border EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Border EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Border EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Border EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Border EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Border EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Border EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Border EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Border EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Border EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Border EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Border EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Border EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Border EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Border EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Border EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Border EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Border EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Border EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Border EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Border EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Border EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Border EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Border EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Border EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public Border BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public Border Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public Border CornerRadius( Bind<System.Windows.CornerRadius> bind ) {
            C.CornerRadius = bind.V;
            return this;
        }



        public Border BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public Border Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public Border Child( Bind<System.Windows.UIElement> bind ) {
            C.Child = bind.V;
            return this;
        }



        public new Border Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Border;
        }


        public new Border OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Border;
        }


        public new Border UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Border;
        }


        public new Border Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Border;
        }


        public new Border DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Border;
        }


        public new Border Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Border;
        }


        public new Border Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Border;
        }


        public new Border Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Border;
        }


        public new Border LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Border;
        }


        public new Border Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Border;
        }


        public new Border MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Border;
        }


        public new Border MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Border;
        }


        public new Border Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Border;
        }


        public new Border MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Border;
        }


        public new Border MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Border;
        }


        public new Border FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Border;
        }


        public new Border Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Border;
        }


        public new Border HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Border;
        }


        public new Border VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Border;
        }


        public new Border FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Border;
        }


        public new Border Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Border;
        }


        public new Border ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Border;
        }


        public new Border ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Border;
        }


        public new Border ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Border;
        }


        public new Border AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Border;
        }


        public new Border RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Border;
        }


        public new Border RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Border;
        }


        public new Border Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Border;
        }


        public new Border OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Border;
        }


        public new Border Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Border;
        }


        public new Border Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Border;
        }


        public new Border ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Border;
        }


        public new Border SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Border;
        }


        public new Border IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Border;
        }


        public new Border Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Border;
        }

   }

    public partial class Button : FrameworkElement {
        public new System.Windows.Controls.Button C { get { return base.C as System.Windows.Controls.Button; } set { base.C = value; } }


        public static Button Make() {
            return new Button();
        }

        public Button() {
            C = new System.Windows.Controls.Button();
        }

        public new Button GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new Button EventClick( System.Windows.RoutedEventHandler e ) {
            C.Click += e;
            return this;
        }

        public new Button EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new Button EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new Button EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Button EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Button EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Button EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Button EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Button EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Button EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Button EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Button EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Button EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Button EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Button EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Button EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Button EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Button EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Button EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Button EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Button EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Button EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Button EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Button EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Button EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Button EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Button EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Button EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Button EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Button EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Button EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Button EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Button EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Button EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Button EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Button EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Button EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Button EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Button EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Button EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Button EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Button EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Button EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Button EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Button EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Button EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Button EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Button EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Button EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Button EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Button EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Button EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Button EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Button EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Button EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Button EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Button EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Button EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Button EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Button EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Button EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Button EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Button EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Button EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Button EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Button EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Button EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Button EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Button EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Button EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Button EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Button EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Button EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Button EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Button EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Button EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Button EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Button EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Button EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Button EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Button EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Button EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Button EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Button EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Button EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Button EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Button EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Button EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Button EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Button EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Button EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Button EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Button EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Button EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Button EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Button EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Button EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Button EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Button EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Button EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Button EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Button EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Button EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Button EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Button EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Button EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Button EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Button EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Button EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Button EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Button EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public Button IsDefault( Bind<System.Boolean> bind ) {
            C.IsDefault = bind.V;
            return this;
        }



        public Button IsCancel( Bind<System.Boolean> bind ) {
            C.IsCancel = bind.V;
            return this;
        }




        public Button Command( Bind<System.Windows.Input.ICommand> bind ) {
            C.Command = bind.V;
            return this;
        }



        public Button CommandParameter( Bind<System.Object> bind ) {
            C.CommandParameter = bind.V;
            return this;
        }



        public Button CommandTarget( Bind<System.Windows.IInputElement> bind ) {
            C.CommandTarget = bind.V;
            return this;
        }



        public Button ClickMode( Bind<System.Windows.Controls.ClickMode> bind ) {
            C.ClickMode = bind.V;
            return this;
        }



        public Button Content( Bind<System.Object> bind ) {
            if ( bind.V is FrameworkElement )
                C.Content = ((FrameworkElement) bind.V).C;
            else
                C.Content = bind.V;
            return this;
        }




        public Button ContentTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ContentTemplate = bind.V;
            return this;
        }



        public Button ContentTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ContentTemplateSelector = bind.V;
            return this;
        }



        public Button ContentStringFormat( Bind<System.String> bind ) {
            C.ContentStringFormat = bind.V;
            return this;
        }



        public Button BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public Button BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public Button Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public Button Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public Button FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public Button FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public Button FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public Button FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public Button FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public Button HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public Button VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public Button TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public Button Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public Button Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new Button Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Button;
        }


        public new Button OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Button;
        }


        public new Button UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Button;
        }


        public new Button Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Button;
        }


        public new Button DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Button;
        }


        public new Button Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Button;
        }


        public new Button Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Button;
        }


        public new Button Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Button;
        }


        public new Button LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Button;
        }


        public new Button Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Button;
        }


        public new Button MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Button;
        }


        public new Button MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Button;
        }


        public new Button Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Button;
        }


        public new Button MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Button;
        }


        public new Button MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Button;
        }


        public new Button FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Button;
        }


        public new Button Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Button;
        }


        public new Button HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Button;
        }


        public new Button VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Button;
        }


        public new Button FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Button;
        }


        public new Button Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Button;
        }


        public new Button ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Button;
        }


        public new Button ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Button;
        }


        public new Button ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Button;
        }


        public new Button AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Button;
        }


        public new Button RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Button;
        }


        public new Button RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Button;
        }


        public new Button Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Button;
        }


        public new Button OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Button;
        }


        public new Button Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Button;
        }


        public new Button Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Button;
        }


        public new Button ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Button;
        }


        public new Button SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Button;
        }


        public new Button IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Button;
        }


        public new Button Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Button;
        }

   }

    public partial class Calendar : FrameworkElement {
        public new System.Windows.Controls.Calendar C { get { return base.C as System.Windows.Controls.Calendar; } set { base.C = value; } }


        public static Calendar Make() {
            return new Calendar();
        }

        public Calendar() {
            C = new System.Windows.Controls.Calendar();
        }

        public new Calendar GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new Calendar EventSelectedDatesChanged( EventHandler<System.Windows.Controls.SelectionChangedEventArgs> e ) {
            C.SelectedDatesChanged += e;
            return this;
        }

        public new Calendar EventDisplayDateChanged( EventHandler<System.Windows.Controls.CalendarDateChangedEventArgs> e ) {
            C.DisplayDateChanged += e;
            return this;
        }

        public new Calendar EventDisplayModeChanged( EventHandler<System.Windows.Controls.CalendarModeChangedEventArgs> e ) {
            C.DisplayModeChanged += e;
            return this;
        }

        public new Calendar EventSelectionModeChanged( EventHandler<System.EventArgs> e ) {
            C.SelectionModeChanged += e;
            return this;
        }

        public new Calendar EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new Calendar EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new Calendar EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Calendar EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Calendar EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Calendar EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Calendar EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Calendar EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Calendar EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Calendar EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Calendar EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Calendar EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Calendar EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Calendar EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Calendar EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Calendar EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Calendar EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Calendar EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Calendar EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Calendar EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Calendar EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Calendar EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Calendar EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Calendar EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Calendar EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Calendar EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Calendar EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Calendar EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Calendar EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Calendar EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Calendar EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Calendar EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Calendar EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Calendar EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Calendar EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Calendar EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Calendar EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Calendar EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Calendar EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Calendar EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Calendar EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Calendar EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Calendar EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Calendar EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Calendar EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Calendar EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Calendar EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Calendar EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Calendar EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Calendar EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Calendar EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Calendar EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Calendar EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Calendar EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Calendar EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Calendar EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Calendar EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Calendar EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Calendar EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Calendar EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Calendar EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Calendar EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Calendar EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Calendar EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Calendar EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Calendar EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Calendar EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Calendar EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Calendar EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Calendar EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Calendar EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Calendar EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Calendar EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Calendar EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Calendar EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Calendar EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Calendar EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Calendar EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Calendar EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Calendar EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Calendar EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Calendar EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Calendar EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Calendar EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Calendar EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Calendar EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Calendar EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Calendar EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Calendar EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Calendar EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Calendar EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Calendar EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Calendar EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Calendar EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Calendar EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Calendar EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Calendar EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Calendar EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Calendar EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Calendar EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Calendar EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Calendar EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Calendar EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Calendar EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Calendar EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Calendar EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Calendar EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Calendar EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Calendar EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Calendar EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }


        public Calendar CalendarButtonStyle( Bind<System.Windows.Style> bind ) {
            C.CalendarButtonStyle = bind.V;
            return this;
        }



        public Calendar CalendarDayButtonStyle( Bind<System.Windows.Style> bind ) {
            C.CalendarDayButtonStyle = bind.V;
            return this;
        }



        public Calendar CalendarItemStyle( Bind<System.Windows.Style> bind ) {
            C.CalendarItemStyle = bind.V;
            return this;
        }



        public Calendar DisplayDate( Bind<System.DateTime> bind ) {
            C.DisplayDate = bind.V;
            return this;
        }



        public Calendar DisplayDateEnd( Bind<DateTime?> bind ) {
            C.DisplayDateEnd = bind.V;
            return this;
        }



        public Calendar DisplayDateStart( Bind<DateTime?> bind ) {
            C.DisplayDateStart = bind.V;
            return this;
        }



        public Calendar DisplayMode( Bind<System.Windows.Controls.CalendarMode> bind ) {
            C.DisplayMode = bind.V;
            return this;
        }



        public Calendar FirstDayOfWeek( Bind<System.DayOfWeek> bind ) {
            C.FirstDayOfWeek = bind.V;
            return this;
        }



        public Calendar IsTodayHighlighted( Bind<System.Boolean> bind ) {
            C.IsTodayHighlighted = bind.V;
            return this;
        }



        public Calendar SelectedDate( Bind<DateTime?> bind ) {
            C.SelectedDate = bind.V;
            return this;
        }




        public Calendar SelectionMode( Bind<System.Windows.Controls.CalendarSelectionMode> bind ) {
            C.SelectionMode = bind.V;
            return this;
        }



        public Calendar BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public Calendar BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public Calendar Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public Calendar Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public Calendar FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public Calendar FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public Calendar FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public Calendar FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public Calendar FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public Calendar HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public Calendar VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public Calendar TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public Calendar Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public Calendar Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new Calendar Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Calendar;
        }


        public new Calendar OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Calendar;
        }


        public new Calendar UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Calendar;
        }


        public new Calendar Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Calendar;
        }


        public new Calendar DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Calendar;
        }


        public new Calendar Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Calendar;
        }


        public new Calendar Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Calendar;
        }


        public new Calendar Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Calendar;
        }


        public new Calendar LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Calendar;
        }


        public new Calendar Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Calendar;
        }


        public new Calendar MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Calendar;
        }


        public new Calendar MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Calendar;
        }


        public new Calendar Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Calendar;
        }


        public new Calendar MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Calendar;
        }


        public new Calendar MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Calendar;
        }


        public new Calendar FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Calendar;
        }


        public new Calendar Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Calendar;
        }


        public new Calendar HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Calendar;
        }


        public new Calendar VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Calendar;
        }


        public new Calendar FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Calendar;
        }


        public new Calendar Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Calendar;
        }


        public new Calendar ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Calendar;
        }


        public new Calendar ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Calendar;
        }


        public new Calendar ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Calendar;
        }


        public new Calendar AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Calendar;
        }


        public new Calendar RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Calendar;
        }


        public new Calendar RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Calendar;
        }


        public new Calendar Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Calendar;
        }


        public new Calendar OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Calendar;
        }


        public new Calendar Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Calendar;
        }


        public new Calendar Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Calendar;
        }


        public new Calendar ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Calendar;
        }


        public new Calendar SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Calendar;
        }


        public new Calendar IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Calendar;
        }


        public new Calendar Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Calendar;
        }

   }

    public partial class Canvas : FrameworkElement {
        public new System.Windows.Controls.Canvas C { get { return base.C as System.Windows.Controls.Canvas; } set { base.C = value; } }


        public static Canvas Make() {
            return new Canvas();
        }

        public Canvas() {
            C = new System.Windows.Controls.Canvas();
        }

        public new Canvas GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public Canvas Children( params Bind<FrameworkElement>[] bind ) {
           foreach( var b in bind ) {
                C.Children.Add( ( (FrameworkElement) b.V ).C);
            }
            return this;
        }


        public new Canvas EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Canvas EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Canvas EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Canvas EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Canvas EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Canvas EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Canvas EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Canvas EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Canvas EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Canvas EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Canvas EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Canvas EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Canvas EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Canvas EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Canvas EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Canvas EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Canvas EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Canvas EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Canvas EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Canvas EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Canvas EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Canvas EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Canvas EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Canvas EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Canvas EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Canvas EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Canvas EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Canvas EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Canvas EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Canvas EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Canvas EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Canvas EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Canvas EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Canvas EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Canvas EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Canvas EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Canvas EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Canvas EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Canvas EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Canvas EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Canvas EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Canvas EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Canvas EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Canvas EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Canvas EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Canvas EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Canvas EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Canvas EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Canvas EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Canvas EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Canvas EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Canvas EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Canvas EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Canvas EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Canvas EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Canvas EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Canvas EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Canvas EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Canvas EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Canvas EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Canvas EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Canvas EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Canvas EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Canvas EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Canvas EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Canvas EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Canvas EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Canvas EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Canvas EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Canvas EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Canvas EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Canvas EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Canvas EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Canvas EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Canvas EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Canvas EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Canvas EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Canvas EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Canvas EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Canvas EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Canvas EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Canvas EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Canvas EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Canvas EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Canvas EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Canvas EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Canvas EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Canvas EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Canvas EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Canvas EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Canvas EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Canvas EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Canvas EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Canvas EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Canvas EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Canvas EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Canvas EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Canvas EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Canvas EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Canvas EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Canvas EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Canvas EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Canvas EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Canvas EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Canvas EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Canvas EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Canvas EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Canvas EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public Canvas Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }




        public Canvas IsItemsHost( Bind<System.Boolean> bind ) {
            C.IsItemsHost = bind.V;
            return this;
        }



        public new Canvas Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Canvas;
        }


        public new Canvas OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Canvas;
        }


        public new Canvas UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Canvas;
        }


        public new Canvas Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Canvas;
        }


        public new Canvas DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Canvas;
        }


        public new Canvas Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Canvas;
        }


        public new Canvas Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Canvas;
        }


        public new Canvas Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Canvas;
        }


        public new Canvas LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Canvas;
        }


        public new Canvas Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Canvas;
        }


        public new Canvas MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Canvas;
        }


        public new Canvas MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Canvas;
        }


        public new Canvas Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Canvas;
        }


        public new Canvas MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Canvas;
        }


        public new Canvas MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Canvas;
        }


        public new Canvas FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Canvas;
        }


        public new Canvas Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Canvas;
        }


        public new Canvas HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Canvas;
        }


        public new Canvas VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Canvas;
        }


        public new Canvas FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Canvas;
        }


        public new Canvas Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Canvas;
        }


        public new Canvas ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Canvas;
        }


        public new Canvas ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Canvas;
        }


        public new Canvas ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Canvas;
        }


        public new Canvas AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Canvas;
        }


        public new Canvas RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Canvas;
        }


        public new Canvas RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Canvas;
        }


        public new Canvas Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Canvas;
        }


        public new Canvas OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Canvas;
        }


        public new Canvas Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Canvas;
        }


        public new Canvas Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Canvas;
        }


        public new Canvas ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Canvas;
        }


        public new Canvas SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Canvas;
        }


        public new Canvas IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Canvas;
        }


        public new Canvas Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Canvas;
        }

   }

    public partial class CheckBox : FrameworkElement {
        public new System.Windows.Controls.CheckBox C { get { return base.C as System.Windows.Controls.CheckBox; } set { base.C = value; } }


        public static CheckBox Make() {
            return new CheckBox();
        }

        public CheckBox() {
            C = new System.Windows.Controls.CheckBox();
        }

        public new CheckBox GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new CheckBox EventChecked( System.Windows.RoutedEventHandler e ) {
            C.Checked += e;
            return this;
        }

        public new CheckBox EventUnchecked( System.Windows.RoutedEventHandler e ) {
            C.Unchecked += e;
            return this;
        }

        public new CheckBox EventIndeterminate( System.Windows.RoutedEventHandler e ) {
            C.Indeterminate += e;
            return this;
        }

        public new CheckBox EventClick( System.Windows.RoutedEventHandler e ) {
            C.Click += e;
            return this;
        }

        public new CheckBox EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new CheckBox EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new CheckBox EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new CheckBox EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new CheckBox EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new CheckBox EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new CheckBox EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new CheckBox EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new CheckBox EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new CheckBox EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new CheckBox EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new CheckBox EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new CheckBox EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new CheckBox EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new CheckBox EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new CheckBox EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new CheckBox EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new CheckBox EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new CheckBox EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new CheckBox EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new CheckBox EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new CheckBox EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new CheckBox EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new CheckBox EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new CheckBox EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new CheckBox EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new CheckBox EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new CheckBox EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new CheckBox EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new CheckBox EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new CheckBox EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new CheckBox EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new CheckBox EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new CheckBox EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new CheckBox EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new CheckBox EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new CheckBox EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new CheckBox EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new CheckBox EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new CheckBox EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new CheckBox EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new CheckBox EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new CheckBox EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new CheckBox EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new CheckBox EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new CheckBox EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new CheckBox EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new CheckBox EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new CheckBox EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new CheckBox EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new CheckBox EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new CheckBox EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new CheckBox EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new CheckBox EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new CheckBox EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new CheckBox EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new CheckBox EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new CheckBox EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new CheckBox EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new CheckBox EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new CheckBox EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new CheckBox EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new CheckBox EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new CheckBox EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new CheckBox EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new CheckBox EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new CheckBox EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new CheckBox EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new CheckBox EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new CheckBox EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new CheckBox EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new CheckBox EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new CheckBox EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new CheckBox EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new CheckBox EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new CheckBox EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new CheckBox EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new CheckBox EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new CheckBox EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new CheckBox EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new CheckBox EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new CheckBox EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new CheckBox EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new CheckBox EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new CheckBox EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new CheckBox EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new CheckBox EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new CheckBox EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new CheckBox EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new CheckBox EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new CheckBox EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new CheckBox EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new CheckBox EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new CheckBox EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new CheckBox EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new CheckBox EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new CheckBox EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new CheckBox EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new CheckBox EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new CheckBox EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new CheckBox EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new CheckBox EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new CheckBox EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new CheckBox EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new CheckBox EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new CheckBox EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new CheckBox EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new CheckBox EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new CheckBox EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new CheckBox EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public CheckBox IsChecked( Bind<bool?> bind ) {
            C.IsChecked = bind.V;
            return this;
        }



        public CheckBox IsThreeState( Bind<System.Boolean> bind ) {
            C.IsThreeState = bind.V;
            return this;
        }



        public CheckBox Command( Bind<System.Windows.Input.ICommand> bind ) {
            C.Command = bind.V;
            return this;
        }



        public CheckBox CommandParameter( Bind<System.Object> bind ) {
            C.CommandParameter = bind.V;
            return this;
        }



        public CheckBox CommandTarget( Bind<System.Windows.IInputElement> bind ) {
            C.CommandTarget = bind.V;
            return this;
        }



        public CheckBox ClickMode( Bind<System.Windows.Controls.ClickMode> bind ) {
            C.ClickMode = bind.V;
            return this;
        }



        public CheckBox Content( Bind<System.Object> bind ) {
            if ( bind.V is FrameworkElement )
                C.Content = ((FrameworkElement) bind.V).C;
            else
                C.Content = bind.V;
            return this;
        }




        public CheckBox ContentTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ContentTemplate = bind.V;
            return this;
        }



        public CheckBox ContentTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ContentTemplateSelector = bind.V;
            return this;
        }



        public CheckBox ContentStringFormat( Bind<System.String> bind ) {
            C.ContentStringFormat = bind.V;
            return this;
        }



        public CheckBox BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public CheckBox BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public CheckBox Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public CheckBox Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public CheckBox FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public CheckBox FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public CheckBox FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public CheckBox FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public CheckBox FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public CheckBox HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public CheckBox VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public CheckBox TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public CheckBox Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public CheckBox Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new CheckBox Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as CheckBox;
        }


        public new CheckBox OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as CheckBox;
        }


        public new CheckBox UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as CheckBox;
        }


        public new CheckBox Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as CheckBox;
        }


        public new CheckBox DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as CheckBox;
        }


        public new CheckBox Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as CheckBox;
        }


        public new CheckBox Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as CheckBox;
        }


        public new CheckBox Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as CheckBox;
        }


        public new CheckBox LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as CheckBox;
        }


        public new CheckBox Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as CheckBox;
        }


        public new CheckBox MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as CheckBox;
        }


        public new CheckBox MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as CheckBox;
        }


        public new CheckBox Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as CheckBox;
        }


        public new CheckBox MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as CheckBox;
        }


        public new CheckBox MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as CheckBox;
        }


        public new CheckBox FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as CheckBox;
        }


        public new CheckBox Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as CheckBox;
        }


        public new CheckBox HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as CheckBox;
        }


        public new CheckBox VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as CheckBox;
        }


        public new CheckBox FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as CheckBox;
        }


        public new CheckBox Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as CheckBox;
        }


        public new CheckBox ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as CheckBox;
        }


        public new CheckBox ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as CheckBox;
        }


        public new CheckBox ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as CheckBox;
        }


        public new CheckBox AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as CheckBox;
        }


        public new CheckBox RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as CheckBox;
        }


        public new CheckBox RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as CheckBox;
        }


        public new CheckBox Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as CheckBox;
        }


        public new CheckBox OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as CheckBox;
        }


        public new CheckBox Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as CheckBox;
        }


        public new CheckBox Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as CheckBox;
        }


        public new CheckBox ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as CheckBox;
        }


        public new CheckBox SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as CheckBox;
        }


        public new CheckBox IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as CheckBox;
        }


        public new CheckBox Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as CheckBox;
        }

   }

    public partial class ComboBox : FrameworkElement {
        public new System.Windows.Controls.ComboBox C { get { return base.C as System.Windows.Controls.ComboBox; } set { base.C = value; } }


        public static ComboBox Make() {
            return new ComboBox();
        }

        public ComboBox() {
            C = new System.Windows.Controls.ComboBox();
        }

        public new ComboBox GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new ComboBox EventDropDownOpened( System.EventHandler e ) {
            C.DropDownOpened += e;
            return this;
        }

        public new ComboBox EventDropDownClosed( System.EventHandler e ) {
            C.DropDownClosed += e;
            return this;
        }

        public new ComboBox EventSelectionChanged( System.Windows.Controls.SelectionChangedEventHandler e ) {
            C.SelectionChanged += e;
            return this;
        }

        public new ComboBox EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new ComboBox EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new ComboBox EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new ComboBox EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new ComboBox EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new ComboBox EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new ComboBox EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new ComboBox EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new ComboBox EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new ComboBox EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new ComboBox EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new ComboBox EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new ComboBox EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new ComboBox EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new ComboBox EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new ComboBox EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new ComboBox EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new ComboBox EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new ComboBox EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new ComboBox EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new ComboBox EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new ComboBox EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new ComboBox EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new ComboBox EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new ComboBox EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new ComboBox EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new ComboBox EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new ComboBox EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new ComboBox EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new ComboBox EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new ComboBox EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new ComboBox EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new ComboBox EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new ComboBox EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new ComboBox EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new ComboBox EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new ComboBox EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new ComboBox EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new ComboBox EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new ComboBox EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new ComboBox EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new ComboBox EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new ComboBox EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new ComboBox EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new ComboBox EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new ComboBox EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new ComboBox EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new ComboBox EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new ComboBox EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new ComboBox EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new ComboBox EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new ComboBox EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new ComboBox EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new ComboBox EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new ComboBox EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new ComboBox EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new ComboBox EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new ComboBox EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new ComboBox EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new ComboBox EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new ComboBox EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new ComboBox EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new ComboBox EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new ComboBox EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new ComboBox EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new ComboBox EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new ComboBox EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new ComboBox EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new ComboBox EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new ComboBox EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new ComboBox EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new ComboBox EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new ComboBox EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new ComboBox EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new ComboBox EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new ComboBox EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new ComboBox EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new ComboBox EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new ComboBox EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new ComboBox EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new ComboBox EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new ComboBox EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new ComboBox EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new ComboBox EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new ComboBox EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new ComboBox EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new ComboBox EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new ComboBox EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new ComboBox EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new ComboBox EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new ComboBox EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new ComboBox EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new ComboBox EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new ComboBox EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new ComboBox EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new ComboBox EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new ComboBox EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new ComboBox EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new ComboBox EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new ComboBox EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new ComboBox EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new ComboBox EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new ComboBox EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new ComboBox EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new ComboBox EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new ComboBox EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new ComboBox EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new ComboBox EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new ComboBox EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new ComboBox EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public ComboBox MaxDropDownHeight( Bind<System.Double> bind ) {
            C.MaxDropDownHeight = bind.V;
            return this;
        }



        public ComboBox IsDropDownOpen( Bind<System.Boolean> bind ) {
            C.IsDropDownOpen = bind.V;
            return this;
        }



        public ComboBox IsEditable( Bind<System.Boolean> bind ) {
            C.IsEditable = bind.V;
            return this;
        }



        public ComboBox Text( Bind<System.String> bind ) {
            C.Text = bind.V;
            return this;
        }



        public ComboBox IsReadOnly( Bind<System.Boolean> bind ) {
            C.IsReadOnly = bind.V;
            return this;
        }



        public ComboBox StaysOpenOnEdit( Bind<System.Boolean> bind ) {
            C.StaysOpenOnEdit = bind.V;
            return this;
        }




        public ComboBox IsSynchronizedWithCurrentItem( Bind<bool?> bind ) {
            C.IsSynchronizedWithCurrentItem = bind.V;
            return this;
        }



        public ComboBox SelectedIndex( Bind<System.Int32> bind ) {
            C.SelectedIndex = bind.V;
            return this;
        }



        public ComboBox SelectedItem( Bind<System.Object> bind ) {
            C.SelectedItem = bind.V;
            return this;
        }



        public ComboBox SelectedValue( Bind<System.Object> bind ) {
            C.SelectedValue = bind.V;
            return this;
        }



        public ComboBox SelectedValuePath( Bind<System.String> bind ) {
            C.SelectedValuePath = bind.V;
            return this;
        }




        public ComboBox ItemsSource( params Bind<object>[] bind ) {
            System.Collections.Generic.List<object> source = new System.Collections.Generic.List<object>();
           foreach( var b in bind ) {
                if ( b.V is FrameworkElement )
                    source.Add( ( (FrameworkElement) b.V ).C );
                else
                    source.Add( b.V );
            }
            C.ItemsSource = source;
            return this;
        }





        public ComboBox DisplayMemberPath( Bind<System.String> bind ) {
            C.DisplayMemberPath = bind.V;
            return this;
        }



        public ComboBox ItemTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ItemTemplate = bind.V;
            return this;
        }



        public ComboBox ItemTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ItemTemplateSelector = bind.V;
            return this;
        }



        public ComboBox ItemStringFormat( Bind<System.String> bind ) {
            C.ItemStringFormat = bind.V;
            return this;
        }



        public ComboBox ItemBindingGroup( Bind<System.Windows.Data.BindingGroup> bind ) {
            C.ItemBindingGroup = bind.V;
            return this;
        }



        public ComboBox ItemContainerStyle( Bind<System.Windows.Style> bind ) {
            C.ItemContainerStyle = bind.V;
            return this;
        }



        public ComboBox ItemContainerStyleSelector( Bind<System.Windows.Controls.StyleSelector> bind ) {
            C.ItemContainerStyleSelector = bind.V;
            return this;
        }



        public ComboBox ItemsPanel( Bind<System.Windows.Controls.ItemsPanelTemplate> bind ) {
            C.ItemsPanel = bind.V;
            return this;
        }





        public ComboBox GroupStyleSelector( Bind<System.Windows.Controls.GroupStyleSelector> bind ) {
            C.GroupStyleSelector = bind.V;
            return this;
        }



        public ComboBox AlternationCount( Bind<System.Int32> bind ) {
            C.AlternationCount = bind.V;
            return this;
        }



        public ComboBox IsTextSearchEnabled( Bind<System.Boolean> bind ) {
            C.IsTextSearchEnabled = bind.V;
            return this;
        }



        public ComboBox IsTextSearchCaseSensitive( Bind<System.Boolean> bind ) {
            C.IsTextSearchCaseSensitive = bind.V;
            return this;
        }



        public ComboBox BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public ComboBox BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public ComboBox Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public ComboBox Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public ComboBox FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public ComboBox FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public ComboBox FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public ComboBox FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public ComboBox FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public ComboBox HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public ComboBox VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public ComboBox TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public ComboBox Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public ComboBox Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new ComboBox Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as ComboBox;
        }


        public new ComboBox OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as ComboBox;
        }


        public new ComboBox UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as ComboBox;
        }


        public new ComboBox Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as ComboBox;
        }


        public new ComboBox DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as ComboBox;
        }


        public new ComboBox Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as ComboBox;
        }


        public new ComboBox Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as ComboBox;
        }


        public new ComboBox Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as ComboBox;
        }


        public new ComboBox LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as ComboBox;
        }


        public new ComboBox Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as ComboBox;
        }


        public new ComboBox MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as ComboBox;
        }


        public new ComboBox MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as ComboBox;
        }


        public new ComboBox Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as ComboBox;
        }


        public new ComboBox MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as ComboBox;
        }


        public new ComboBox MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as ComboBox;
        }


        public new ComboBox FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as ComboBox;
        }


        public new ComboBox Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as ComboBox;
        }


        public new ComboBox HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as ComboBox;
        }


        public new ComboBox VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as ComboBox;
        }


        public new ComboBox FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as ComboBox;
        }


        public new ComboBox Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as ComboBox;
        }


        public new ComboBox ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as ComboBox;
        }


        public new ComboBox ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as ComboBox;
        }


        public new ComboBox ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as ComboBox;
        }


        public new ComboBox AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as ComboBox;
        }


        public new ComboBox RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as ComboBox;
        }


        public new ComboBox RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as ComboBox;
        }


        public new ComboBox Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as ComboBox;
        }


        public new ComboBox OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as ComboBox;
        }


        public new ComboBox Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as ComboBox;
        }


        public new ComboBox Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as ComboBox;
        }


        public new ComboBox ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as ComboBox;
        }


        public new ComboBox SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as ComboBox;
        }


        public new ComboBox IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as ComboBox;
        }


        public new ComboBox Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as ComboBox;
        }

   }

    public partial class ComboBoxItem : FrameworkElement {
        public new System.Windows.Controls.ComboBoxItem C { get { return base.C as System.Windows.Controls.ComboBoxItem; } set { base.C = value; } }


        public static ComboBoxItem Make() {
            return new ComboBoxItem();
        }

        public ComboBoxItem() {
            C = new System.Windows.Controls.ComboBoxItem();
        }

        public new ComboBoxItem GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new ComboBoxItem EventSelected( System.Windows.RoutedEventHandler e ) {
            C.Selected += e;
            return this;
        }

        public new ComboBoxItem EventUnselected( System.Windows.RoutedEventHandler e ) {
            C.Unselected += e;
            return this;
        }

        public new ComboBoxItem EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new ComboBoxItem EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new ComboBoxItem EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new ComboBoxItem EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new ComboBoxItem EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new ComboBoxItem EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new ComboBoxItem EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new ComboBoxItem EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new ComboBoxItem EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new ComboBoxItem EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new ComboBoxItem EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new ComboBoxItem EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new ComboBoxItem EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new ComboBoxItem EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new ComboBoxItem EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new ComboBoxItem EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new ComboBoxItem EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new ComboBoxItem EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new ComboBoxItem EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new ComboBoxItem EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new ComboBoxItem EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new ComboBoxItem EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new ComboBoxItem EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new ComboBoxItem EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new ComboBoxItem EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new ComboBoxItem EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new ComboBoxItem EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new ComboBoxItem EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new ComboBoxItem EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new ComboBoxItem EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new ComboBoxItem EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new ComboBoxItem EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new ComboBoxItem EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new ComboBoxItem EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new ComboBoxItem EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new ComboBoxItem EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new ComboBoxItem EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new ComboBoxItem EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new ComboBoxItem EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new ComboBoxItem EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new ComboBoxItem EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new ComboBoxItem EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new ComboBoxItem EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new ComboBoxItem EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new ComboBoxItem EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new ComboBoxItem EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new ComboBoxItem EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new ComboBoxItem EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new ComboBoxItem EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new ComboBoxItem EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new ComboBoxItem EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new ComboBoxItem EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new ComboBoxItem EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new ComboBoxItem EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new ComboBoxItem EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new ComboBoxItem EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new ComboBoxItem EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new ComboBoxItem EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new ComboBoxItem EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new ComboBoxItem EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new ComboBoxItem EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new ComboBoxItem EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new ComboBoxItem EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new ComboBoxItem EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new ComboBoxItem EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new ComboBoxItem EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new ComboBoxItem EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new ComboBoxItem EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new ComboBoxItem EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new ComboBoxItem EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new ComboBoxItem EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new ComboBoxItem EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new ComboBoxItem EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new ComboBoxItem EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new ComboBoxItem EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new ComboBoxItem EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new ComboBoxItem EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new ComboBoxItem EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new ComboBoxItem EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new ComboBoxItem EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new ComboBoxItem EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new ComboBoxItem EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new ComboBoxItem EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new ComboBoxItem EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new ComboBoxItem EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new ComboBoxItem EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new ComboBoxItem EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new ComboBoxItem EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new ComboBoxItem EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new ComboBoxItem EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new ComboBoxItem EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new ComboBoxItem EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new ComboBoxItem EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new ComboBoxItem EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new ComboBoxItem EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new ComboBoxItem EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new ComboBoxItem EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new ComboBoxItem EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new ComboBoxItem EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new ComboBoxItem EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new ComboBoxItem EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new ComboBoxItem EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new ComboBoxItem EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new ComboBoxItem EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new ComboBoxItem EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new ComboBoxItem EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new ComboBoxItem EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new ComboBoxItem EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new ComboBoxItem EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new ComboBoxItem EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public ComboBoxItem IsSelected( Bind<System.Boolean> bind ) {
            C.IsSelected = bind.V;
            return this;
        }



        public ComboBoxItem Content( Bind<System.Object> bind ) {
            if ( bind.V is FrameworkElement )
                C.Content = ((FrameworkElement) bind.V).C;
            else
                C.Content = bind.V;
            return this;
        }




        public ComboBoxItem ContentTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ContentTemplate = bind.V;
            return this;
        }



        public ComboBoxItem ContentTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ContentTemplateSelector = bind.V;
            return this;
        }



        public ComboBoxItem ContentStringFormat( Bind<System.String> bind ) {
            C.ContentStringFormat = bind.V;
            return this;
        }



        public ComboBoxItem BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public ComboBoxItem BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public ComboBoxItem Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public ComboBoxItem Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public ComboBoxItem FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public ComboBoxItem FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public ComboBoxItem FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public ComboBoxItem FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public ComboBoxItem FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public ComboBoxItem HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public ComboBoxItem VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public ComboBoxItem TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public ComboBoxItem Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public ComboBoxItem Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new ComboBoxItem Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as ComboBoxItem;
        }


        public new ComboBoxItem Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as ComboBoxItem;
        }

   }

    public partial class DataGrid : FrameworkElement {
        public new System.Windows.Controls.DataGrid C { get { return base.C as System.Windows.Controls.DataGrid; } set { base.C = value; } }


        public static DataGrid Make() {
            return new DataGrid();
        }

        public DataGrid() {
            C = new System.Windows.Controls.DataGrid();
        }

        public new DataGrid GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new DataGrid EventColumnDisplayIndexChanged( EventHandler<System.Windows.Controls.DataGridColumnEventArgs> e ) {
            C.ColumnDisplayIndexChanged += e;
            return this;
        }

        public new DataGrid EventLoadingRow( EventHandler<System.Windows.Controls.DataGridRowEventArgs> e ) {
            C.LoadingRow += e;
            return this;
        }

        public new DataGrid EventUnloadingRow( EventHandler<System.Windows.Controls.DataGridRowEventArgs> e ) {
            C.UnloadingRow += e;
            return this;
        }

        public new DataGrid EventRowEditEnding( EventHandler<System.Windows.Controls.DataGridRowEditEndingEventArgs> e ) {
            C.RowEditEnding += e;
            return this;
        }

        public new DataGrid EventCellEditEnding( EventHandler<System.Windows.Controls.DataGridCellEditEndingEventArgs> e ) {
            C.CellEditEnding += e;
            return this;
        }

        public new DataGrid EventCurrentCellChanged( EventHandler<System.EventArgs> e ) {
            C.CurrentCellChanged += e;
            return this;
        }

        public new DataGrid EventBeginningEdit( EventHandler<System.Windows.Controls.DataGridBeginningEditEventArgs> e ) {
            C.BeginningEdit += e;
            return this;
        }

        public new DataGrid EventPreparingCellForEdit( EventHandler<System.Windows.Controls.DataGridPreparingCellForEditEventArgs> e ) {
            C.PreparingCellForEdit += e;
            return this;
        }

        public new DataGrid EventInitializingNewItem( System.Windows.Controls.InitializingNewItemEventHandler e ) {
            C.InitializingNewItem += e;
            return this;
        }

        public new DataGrid EventLoadingRowDetails( EventHandler<System.Windows.Controls.DataGridRowDetailsEventArgs> e ) {
            C.LoadingRowDetails += e;
            return this;
        }

        public new DataGrid EventUnloadingRowDetails( EventHandler<System.Windows.Controls.DataGridRowDetailsEventArgs> e ) {
            C.UnloadingRowDetails += e;
            return this;
        }

        public new DataGrid EventRowDetailsVisibilityChanged( EventHandler<System.Windows.Controls.DataGridRowDetailsEventArgs> e ) {
            C.RowDetailsVisibilityChanged += e;
            return this;
        }

        public new DataGrid EventSelectedCellsChanged( System.Windows.Controls.SelectedCellsChangedEventHandler e ) {
            C.SelectedCellsChanged += e;
            return this;
        }

        public new DataGrid EventSorting( System.Windows.Controls.DataGridSortingEventHandler e ) {
            C.Sorting += e;
            return this;
        }

        public new DataGrid EventAutoGeneratedColumns( System.EventHandler e ) {
            C.AutoGeneratedColumns += e;
            return this;
        }

        public new DataGrid EventAutoGeneratingColumn( EventHandler<System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs> e ) {
            C.AutoGeneratingColumn += e;
            return this;
        }

        public new DataGrid EventColumnReordering( EventHandler<System.Windows.Controls.DataGridColumnReorderingEventArgs> e ) {
            C.ColumnReordering += e;
            return this;
        }

        public new DataGrid EventColumnHeaderDragStarted( EventHandler<System.Windows.Controls.Primitives.DragStartedEventArgs> e ) {
            C.ColumnHeaderDragStarted += e;
            return this;
        }

        public new DataGrid EventColumnHeaderDragDelta( EventHandler<System.Windows.Controls.Primitives.DragDeltaEventArgs> e ) {
            C.ColumnHeaderDragDelta += e;
            return this;
        }

        public new DataGrid EventColumnHeaderDragCompleted( EventHandler<System.Windows.Controls.Primitives.DragCompletedEventArgs> e ) {
            C.ColumnHeaderDragCompleted += e;
            return this;
        }

        public new DataGrid EventColumnReordered( EventHandler<System.Windows.Controls.DataGridColumnEventArgs> e ) {
            C.ColumnReordered += e;
            return this;
        }

        public new DataGrid EventCopyingRowClipboardContent( EventHandler<System.Windows.Controls.DataGridRowClipboardEventArgs> e ) {
            C.CopyingRowClipboardContent += e;
            return this;
        }

        public new DataGrid EventSelectionChanged( System.Windows.Controls.SelectionChangedEventHandler e ) {
            C.SelectionChanged += e;
            return this;
        }

        public new DataGrid EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new DataGrid EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new DataGrid EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new DataGrid EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new DataGrid EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new DataGrid EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new DataGrid EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new DataGrid EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new DataGrid EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new DataGrid EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new DataGrid EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new DataGrid EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new DataGrid EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new DataGrid EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new DataGrid EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new DataGrid EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new DataGrid EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new DataGrid EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new DataGrid EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new DataGrid EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new DataGrid EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new DataGrid EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new DataGrid EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new DataGrid EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new DataGrid EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new DataGrid EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new DataGrid EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new DataGrid EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new DataGrid EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new DataGrid EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new DataGrid EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new DataGrid EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new DataGrid EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new DataGrid EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new DataGrid EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new DataGrid EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new DataGrid EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new DataGrid EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new DataGrid EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new DataGrid EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new DataGrid EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new DataGrid EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new DataGrid EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new DataGrid EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new DataGrid EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new DataGrid EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new DataGrid EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new DataGrid EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new DataGrid EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new DataGrid EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new DataGrid EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new DataGrid EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new DataGrid EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new DataGrid EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new DataGrid EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new DataGrid EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new DataGrid EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new DataGrid EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new DataGrid EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new DataGrid EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new DataGrid EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new DataGrid EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new DataGrid EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new DataGrid EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new DataGrid EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new DataGrid EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new DataGrid EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new DataGrid EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new DataGrid EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new DataGrid EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new DataGrid EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new DataGrid EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new DataGrid EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new DataGrid EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new DataGrid EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new DataGrid EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new DataGrid EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new DataGrid EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new DataGrid EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new DataGrid EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new DataGrid EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new DataGrid EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new DataGrid EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new DataGrid EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new DataGrid EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new DataGrid EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new DataGrid EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new DataGrid EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new DataGrid EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new DataGrid EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new DataGrid EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new DataGrid EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new DataGrid EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new DataGrid EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new DataGrid EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new DataGrid EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new DataGrid EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new DataGrid EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new DataGrid EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new DataGrid EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new DataGrid EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new DataGrid EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new DataGrid EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new DataGrid EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new DataGrid EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new DataGrid EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new DataGrid EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new DataGrid EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new DataGrid EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new DataGrid EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }


        public DataGrid CanUserResizeColumns( Bind<System.Boolean> bind ) {
            C.CanUserResizeColumns = bind.V;
            return this;
        }



        public DataGrid ColumnWidth( Bind<System.Windows.Controls.DataGridLength> bind ) {
            C.ColumnWidth = bind.V;
            return this;
        }



        public DataGrid MinColumnWidth( Bind<System.Double> bind ) {
            C.MinColumnWidth = bind.V;
            return this;
        }



        public DataGrid MaxColumnWidth( Bind<System.Double> bind ) {
            C.MaxColumnWidth = bind.V;
            return this;
        }



        public DataGrid GridLinesVisibility( Bind<System.Windows.Controls.DataGridGridLinesVisibility> bind ) {
            C.GridLinesVisibility = bind.V;
            return this;
        }



        public DataGrid HorizontalGridLinesBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.HorizontalGridLinesBrush = bind.V;
            return this;
        }



        public DataGrid VerticalGridLinesBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.VerticalGridLinesBrush = bind.V;
            return this;
        }



        public DataGrid RowStyle( Bind<System.Windows.Style> bind ) {
            C.RowStyle = bind.V;
            return this;
        }



        public DataGrid RowValidationErrorTemplate( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.RowValidationErrorTemplate = bind.V;
            return this;
        }




        public DataGrid RowStyleSelector( Bind<System.Windows.Controls.StyleSelector> bind ) {
            C.RowStyleSelector = bind.V;
            return this;
        }



        public DataGrid RowBackground( Bind<System.Windows.Media.Brush> bind ) {
            C.RowBackground = bind.V;
            return this;
        }



        public DataGrid AlternatingRowBackground( Bind<System.Windows.Media.Brush> bind ) {
            C.AlternatingRowBackground = bind.V;
            return this;
        }



        public DataGrid RowHeight( Bind<System.Double> bind ) {
            C.RowHeight = bind.V;
            return this;
        }



        public DataGrid MinRowHeight( Bind<System.Double> bind ) {
            C.MinRowHeight = bind.V;
            return this;
        }



        public DataGrid RowHeaderWidth( Bind<System.Double> bind ) {
            C.RowHeaderWidth = bind.V;
            return this;
        }



        public DataGrid ColumnHeaderHeight( Bind<System.Double> bind ) {
            C.ColumnHeaderHeight = bind.V;
            return this;
        }



        public DataGrid HeadersVisibility( Bind<System.Windows.Controls.DataGridHeadersVisibility> bind ) {
            C.HeadersVisibility = bind.V;
            return this;
        }



        public DataGrid CellStyle( Bind<System.Windows.Style> bind ) {
            C.CellStyle = bind.V;
            return this;
        }



        public DataGrid ColumnHeaderStyle( Bind<System.Windows.Style> bind ) {
            C.ColumnHeaderStyle = bind.V;
            return this;
        }



        public DataGrid RowHeaderStyle( Bind<System.Windows.Style> bind ) {
            C.RowHeaderStyle = bind.V;
            return this;
        }



        public DataGrid RowHeaderTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.RowHeaderTemplate = bind.V;
            return this;
        }



        public DataGrid RowHeaderTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.RowHeaderTemplateSelector = bind.V;
            return this;
        }






        public DataGrid HorizontalScrollBarVisibility( Bind<System.Windows.Controls.ScrollBarVisibility> bind ) {
            C.HorizontalScrollBarVisibility = bind.V;
            return this;
        }



        public DataGrid VerticalScrollBarVisibility( Bind<System.Windows.Controls.ScrollBarVisibility> bind ) {
            C.VerticalScrollBarVisibility = bind.V;
            return this;
        }




        public DataGrid IsReadOnly( Bind<System.Boolean> bind ) {
            C.IsReadOnly = bind.V;
            return this;
        }



        public DataGrid CurrentItem( Bind<System.Object> bind ) {
            C.CurrentItem = bind.V;
            return this;
        }



        public DataGrid CurrentColumn( Bind<System.Windows.Controls.DataGridColumn> bind ) {
            C.CurrentColumn = bind.V;
            return this;
        }



        public DataGrid CurrentCell( Bind<System.Windows.Controls.DataGridCellInfo> bind ) {
            C.CurrentCell = bind.V;
            return this;
        }



        public DataGrid CanUserAddRows( Bind<System.Boolean> bind ) {
            C.CanUserAddRows = bind.V;
            return this;
        }



        public DataGrid CanUserDeleteRows( Bind<System.Boolean> bind ) {
            C.CanUserDeleteRows = bind.V;
            return this;
        }



        public DataGrid RowDetailsVisibilityMode( Bind<System.Windows.Controls.DataGridRowDetailsVisibilityMode> bind ) {
            C.RowDetailsVisibilityMode = bind.V;
            return this;
        }



        public DataGrid AreRowDetailsFrozen( Bind<System.Boolean> bind ) {
            C.AreRowDetailsFrozen = bind.V;
            return this;
        }



        public DataGrid RowDetailsTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.RowDetailsTemplate = bind.V;
            return this;
        }



        public DataGrid RowDetailsTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.RowDetailsTemplateSelector = bind.V;
            return this;
        }



        public DataGrid CanUserResizeRows( Bind<System.Boolean> bind ) {
            C.CanUserResizeRows = bind.V;
            return this;
        }





        public DataGrid SelectionMode( Bind<System.Windows.Controls.DataGridSelectionMode> bind ) {
            C.SelectionMode = bind.V;
            return this;
        }



        public DataGrid SelectionUnit( Bind<System.Windows.Controls.DataGridSelectionUnit> bind ) {
            C.SelectionUnit = bind.V;
            return this;
        }



        public DataGrid CanUserSortColumns( Bind<System.Boolean> bind ) {
            C.CanUserSortColumns = bind.V;
            return this;
        }



        public DataGrid AutoGenerateColumns( Bind<System.Boolean> bind ) {
            C.AutoGenerateColumns = bind.V;
            return this;
        }



        public DataGrid FrozenColumnCount( Bind<System.Int32> bind ) {
            C.FrozenColumnCount = bind.V;
            return this;
        }



        public DataGrid EnableRowVirtualization( Bind<System.Boolean> bind ) {
            C.EnableRowVirtualization = bind.V;
            return this;
        }



        public DataGrid EnableColumnVirtualization( Bind<System.Boolean> bind ) {
            C.EnableColumnVirtualization = bind.V;
            return this;
        }



        public DataGrid CanUserReorderColumns( Bind<System.Boolean> bind ) {
            C.CanUserReorderColumns = bind.V;
            return this;
        }



        public DataGrid DragIndicatorStyle( Bind<System.Windows.Style> bind ) {
            C.DragIndicatorStyle = bind.V;
            return this;
        }



        public DataGrid DropLocationIndicatorStyle( Bind<System.Windows.Style> bind ) {
            C.DropLocationIndicatorStyle = bind.V;
            return this;
        }



        public DataGrid ClipboardCopyMode( Bind<System.Windows.Controls.DataGridClipboardCopyMode> bind ) {
            C.ClipboardCopyMode = bind.V;
            return this;
        }




        public DataGrid IsSynchronizedWithCurrentItem( Bind<bool?> bind ) {
            C.IsSynchronizedWithCurrentItem = bind.V;
            return this;
        }



        public DataGrid SelectedIndex( Bind<System.Int32> bind ) {
            C.SelectedIndex = bind.V;
            return this;
        }



        public DataGrid SelectedItem( Bind<System.Object> bind ) {
            C.SelectedItem = bind.V;
            return this;
        }



        public DataGrid SelectedValue( Bind<System.Object> bind ) {
            C.SelectedValue = bind.V;
            return this;
        }



        public DataGrid SelectedValuePath( Bind<System.String> bind ) {
            C.SelectedValuePath = bind.V;
            return this;
        }




        public DataGrid ItemsSource( params Bind<object>[] bind ) {
            System.Collections.Generic.List<object> source = new System.Collections.Generic.List<object>();
           foreach( var b in bind ) {
                if ( b.V is FrameworkElement )
                    source.Add( ( (FrameworkElement) b.V ).C );
                else
                    source.Add( b.V );
            }
            C.ItemsSource = source;
            return this;
        }





        public DataGrid DisplayMemberPath( Bind<System.String> bind ) {
            C.DisplayMemberPath = bind.V;
            return this;
        }



        public DataGrid ItemTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ItemTemplate = bind.V;
            return this;
        }



        public DataGrid ItemTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ItemTemplateSelector = bind.V;
            return this;
        }



        public DataGrid ItemStringFormat( Bind<System.String> bind ) {
            C.ItemStringFormat = bind.V;
            return this;
        }



        public DataGrid ItemBindingGroup( Bind<System.Windows.Data.BindingGroup> bind ) {
            C.ItemBindingGroup = bind.V;
            return this;
        }



        public DataGrid ItemContainerStyle( Bind<System.Windows.Style> bind ) {
            C.ItemContainerStyle = bind.V;
            return this;
        }



        public DataGrid ItemContainerStyleSelector( Bind<System.Windows.Controls.StyleSelector> bind ) {
            C.ItemContainerStyleSelector = bind.V;
            return this;
        }



        public DataGrid ItemsPanel( Bind<System.Windows.Controls.ItemsPanelTemplate> bind ) {
            C.ItemsPanel = bind.V;
            return this;
        }





        public DataGrid GroupStyleSelector( Bind<System.Windows.Controls.GroupStyleSelector> bind ) {
            C.GroupStyleSelector = bind.V;
            return this;
        }



        public DataGrid AlternationCount( Bind<System.Int32> bind ) {
            C.AlternationCount = bind.V;
            return this;
        }



        public DataGrid IsTextSearchEnabled( Bind<System.Boolean> bind ) {
            C.IsTextSearchEnabled = bind.V;
            return this;
        }



        public DataGrid IsTextSearchCaseSensitive( Bind<System.Boolean> bind ) {
            C.IsTextSearchCaseSensitive = bind.V;
            return this;
        }



        public DataGrid BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public DataGrid BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public DataGrid Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public DataGrid Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public DataGrid FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public DataGrid FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public DataGrid FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public DataGrid FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public DataGrid FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public DataGrid HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public DataGrid VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public DataGrid TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public DataGrid Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public DataGrid Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new DataGrid Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as DataGrid;
        }


        public new DataGrid OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as DataGrid;
        }


        public new DataGrid UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as DataGrid;
        }


        public new DataGrid Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as DataGrid;
        }


        public new DataGrid DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as DataGrid;
        }


        public new DataGrid Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as DataGrid;
        }


        public new DataGrid Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as DataGrid;
        }


        public new DataGrid Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as DataGrid;
        }


        public new DataGrid LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as DataGrid;
        }


        public new DataGrid Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as DataGrid;
        }


        public new DataGrid MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as DataGrid;
        }


        public new DataGrid MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as DataGrid;
        }


        public new DataGrid Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as DataGrid;
        }


        public new DataGrid MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as DataGrid;
        }


        public new DataGrid MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as DataGrid;
        }


        public new DataGrid FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as DataGrid;
        }


        public new DataGrid Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as DataGrid;
        }


        public new DataGrid HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as DataGrid;
        }


        public new DataGrid VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as DataGrid;
        }


        public new DataGrid FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as DataGrid;
        }


        public new DataGrid Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as DataGrid;
        }


        public new DataGrid ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as DataGrid;
        }


        public new DataGrid ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as DataGrid;
        }


        public new DataGrid ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as DataGrid;
        }


        public new DataGrid AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as DataGrid;
        }


        public new DataGrid RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as DataGrid;
        }


        public new DataGrid RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as DataGrid;
        }


        public new DataGrid Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as DataGrid;
        }


        public new DataGrid OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as DataGrid;
        }


        public new DataGrid Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as DataGrid;
        }


        public new DataGrid Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as DataGrid;
        }


        public new DataGrid ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as DataGrid;
        }


        public new DataGrid SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as DataGrid;
        }


        public new DataGrid IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as DataGrid;
        }


        public new DataGrid Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as DataGrid;
        }

   }

    public partial class DatePicker : FrameworkElement {
        public new System.Windows.Controls.DatePicker C { get { return base.C as System.Windows.Controls.DatePicker; } set { base.C = value; } }


        public static DatePicker Make() {
            return new DatePicker();
        }

        public DatePicker() {
            C = new System.Windows.Controls.DatePicker();
        }

        public new DatePicker GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new DatePicker EventCalendarClosed( System.Windows.RoutedEventHandler e ) {
            C.CalendarClosed += e;
            return this;
        }

        public new DatePicker EventCalendarOpened( System.Windows.RoutedEventHandler e ) {
            C.CalendarOpened += e;
            return this;
        }

        public new DatePicker EventDateValidationError( EventHandler<System.Windows.Controls.DatePickerDateValidationErrorEventArgs> e ) {
            C.DateValidationError += e;
            return this;
        }

        public new DatePicker EventSelectedDateChanged( EventHandler<System.Windows.Controls.SelectionChangedEventArgs> e ) {
            C.SelectedDateChanged += e;
            return this;
        }

        public new DatePicker EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new DatePicker EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new DatePicker EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new DatePicker EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new DatePicker EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new DatePicker EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new DatePicker EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new DatePicker EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new DatePicker EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new DatePicker EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new DatePicker EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new DatePicker EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new DatePicker EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new DatePicker EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new DatePicker EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new DatePicker EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new DatePicker EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new DatePicker EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new DatePicker EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new DatePicker EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new DatePicker EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new DatePicker EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new DatePicker EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new DatePicker EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new DatePicker EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new DatePicker EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new DatePicker EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new DatePicker EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new DatePicker EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new DatePicker EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new DatePicker EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new DatePicker EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new DatePicker EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new DatePicker EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new DatePicker EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new DatePicker EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new DatePicker EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new DatePicker EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new DatePicker EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new DatePicker EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new DatePicker EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new DatePicker EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new DatePicker EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new DatePicker EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new DatePicker EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new DatePicker EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new DatePicker EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new DatePicker EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new DatePicker EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new DatePicker EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new DatePicker EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new DatePicker EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new DatePicker EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new DatePicker EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new DatePicker EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new DatePicker EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new DatePicker EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new DatePicker EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new DatePicker EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new DatePicker EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new DatePicker EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new DatePicker EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new DatePicker EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new DatePicker EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new DatePicker EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new DatePicker EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new DatePicker EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new DatePicker EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new DatePicker EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new DatePicker EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new DatePicker EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new DatePicker EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new DatePicker EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new DatePicker EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new DatePicker EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new DatePicker EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new DatePicker EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new DatePicker EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new DatePicker EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new DatePicker EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new DatePicker EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new DatePicker EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new DatePicker EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new DatePicker EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new DatePicker EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new DatePicker EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new DatePicker EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new DatePicker EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new DatePicker EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new DatePicker EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new DatePicker EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new DatePicker EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new DatePicker EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new DatePicker EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new DatePicker EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new DatePicker EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new DatePicker EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new DatePicker EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new DatePicker EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new DatePicker EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new DatePicker EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new DatePicker EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new DatePicker EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new DatePicker EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new DatePicker EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new DatePicker EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new DatePicker EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new DatePicker EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new DatePicker EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new DatePicker EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }


        public DatePicker CalendarStyle( Bind<System.Windows.Style> bind ) {
            C.CalendarStyle = bind.V;
            return this;
        }



        public DatePicker DisplayDate( Bind<System.DateTime> bind ) {
            C.DisplayDate = bind.V;
            return this;
        }



        public DatePicker DisplayDateEnd( Bind<DateTime?> bind ) {
            C.DisplayDateEnd = bind.V;
            return this;
        }



        public DatePicker DisplayDateStart( Bind<DateTime?> bind ) {
            C.DisplayDateStart = bind.V;
            return this;
        }



        public DatePicker FirstDayOfWeek( Bind<System.DayOfWeek> bind ) {
            C.FirstDayOfWeek = bind.V;
            return this;
        }



        public DatePicker IsDropDownOpen( Bind<System.Boolean> bind ) {
            C.IsDropDownOpen = bind.V;
            return this;
        }



        public DatePicker IsTodayHighlighted( Bind<System.Boolean> bind ) {
            C.IsTodayHighlighted = bind.V;
            return this;
        }



        public DatePicker SelectedDate( Bind<DateTime?> bind ) {
            C.SelectedDate = bind.V;
            return this;
        }



        public DatePicker SelectedDateFormat( Bind<System.Windows.Controls.DatePickerFormat> bind ) {
            C.SelectedDateFormat = bind.V;
            return this;
        }



        public DatePicker Text( Bind<System.String> bind ) {
            C.Text = bind.V;
            return this;
        }



        public DatePicker BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public DatePicker BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public DatePicker Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public DatePicker Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public DatePicker FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public DatePicker FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public DatePicker FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public DatePicker FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public DatePicker FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public DatePicker HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public DatePicker VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public DatePicker TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public DatePicker Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public DatePicker Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new DatePicker Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as DatePicker;
        }


        public new DatePicker OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as DatePicker;
        }


        public new DatePicker UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as DatePicker;
        }


        public new DatePicker Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as DatePicker;
        }


        public new DatePicker DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as DatePicker;
        }


        public new DatePicker Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as DatePicker;
        }


        public new DatePicker Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as DatePicker;
        }


        public new DatePicker Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as DatePicker;
        }


        public new DatePicker LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as DatePicker;
        }


        public new DatePicker Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as DatePicker;
        }


        public new DatePicker MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as DatePicker;
        }


        public new DatePicker MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as DatePicker;
        }


        public new DatePicker Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as DatePicker;
        }


        public new DatePicker MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as DatePicker;
        }


        public new DatePicker MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as DatePicker;
        }


        public new DatePicker FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as DatePicker;
        }


        public new DatePicker Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as DatePicker;
        }


        public new DatePicker HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as DatePicker;
        }


        public new DatePicker VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as DatePicker;
        }


        public new DatePicker FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as DatePicker;
        }


        public new DatePicker Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as DatePicker;
        }


        public new DatePicker ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as DatePicker;
        }


        public new DatePicker ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as DatePicker;
        }


        public new DatePicker ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as DatePicker;
        }


        public new DatePicker AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as DatePicker;
        }


        public new DatePicker RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as DatePicker;
        }


        public new DatePicker RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as DatePicker;
        }


        public new DatePicker Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as DatePicker;
        }


        public new DatePicker OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as DatePicker;
        }


        public new DatePicker Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as DatePicker;
        }


        public new DatePicker Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as DatePicker;
        }


        public new DatePicker ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as DatePicker;
        }


        public new DatePicker SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as DatePicker;
        }


        public new DatePicker IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as DatePicker;
        }


        public new DatePicker Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as DatePicker;
        }

   }

    public partial class DockPanel : FrameworkElement {
        public new System.Windows.Controls.DockPanel C { get { return base.C as System.Windows.Controls.DockPanel; } set { base.C = value; } }


        public static DockPanel Make() {
            return new DockPanel();
        }

        public DockPanel() {
            C = new System.Windows.Controls.DockPanel();
        }

        public new DockPanel GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public DockPanel Children( params Bind<FrameworkElement>[] bind ) {
           foreach( var b in bind ) {
                C.Children.Add( ( (FrameworkElement) b.V ).C);
            }
            return this;
        }


        public new DockPanel EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new DockPanel EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new DockPanel EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new DockPanel EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new DockPanel EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new DockPanel EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new DockPanel EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new DockPanel EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new DockPanel EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new DockPanel EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new DockPanel EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new DockPanel EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new DockPanel EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new DockPanel EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new DockPanel EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new DockPanel EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new DockPanel EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new DockPanel EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new DockPanel EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new DockPanel EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new DockPanel EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new DockPanel EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new DockPanel EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new DockPanel EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new DockPanel EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new DockPanel EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new DockPanel EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new DockPanel EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new DockPanel EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new DockPanel EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new DockPanel EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new DockPanel EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new DockPanel EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new DockPanel EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new DockPanel EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new DockPanel EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new DockPanel EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new DockPanel EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new DockPanel EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new DockPanel EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new DockPanel EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new DockPanel EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new DockPanel EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new DockPanel EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new DockPanel EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new DockPanel EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new DockPanel EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new DockPanel EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new DockPanel EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new DockPanel EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new DockPanel EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new DockPanel EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new DockPanel EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new DockPanel EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new DockPanel EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new DockPanel EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new DockPanel EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new DockPanel EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new DockPanel EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new DockPanel EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new DockPanel EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new DockPanel EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new DockPanel EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new DockPanel EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new DockPanel EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new DockPanel EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new DockPanel EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new DockPanel EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new DockPanel EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new DockPanel EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new DockPanel EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new DockPanel EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new DockPanel EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new DockPanel EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new DockPanel EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new DockPanel EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new DockPanel EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new DockPanel EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new DockPanel EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new DockPanel EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new DockPanel EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new DockPanel EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new DockPanel EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new DockPanel EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new DockPanel EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new DockPanel EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new DockPanel EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new DockPanel EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new DockPanel EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new DockPanel EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new DockPanel EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new DockPanel EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new DockPanel EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new DockPanel EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new DockPanel EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new DockPanel EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new DockPanel EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new DockPanel EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new DockPanel EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new DockPanel EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new DockPanel EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new DockPanel EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new DockPanel EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new DockPanel EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new DockPanel EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new DockPanel EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new DockPanel EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new DockPanel EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public DockPanel LastChildFill( Bind<System.Boolean> bind ) {
            C.LastChildFill = bind.V;
            return this;
        }



        public DockPanel Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }




        public DockPanel IsItemsHost( Bind<System.Boolean> bind ) {
            C.IsItemsHost = bind.V;
            return this;
        }



        public new DockPanel Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as DockPanel;
        }


        public new DockPanel OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as DockPanel;
        }


        public new DockPanel UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as DockPanel;
        }


        public new DockPanel Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as DockPanel;
        }


        public new DockPanel DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as DockPanel;
        }


        public new DockPanel Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as DockPanel;
        }


        public new DockPanel Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as DockPanel;
        }


        public new DockPanel Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as DockPanel;
        }


        public new DockPanel LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as DockPanel;
        }


        public new DockPanel Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as DockPanel;
        }


        public new DockPanel MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as DockPanel;
        }


        public new DockPanel MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as DockPanel;
        }


        public new DockPanel Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as DockPanel;
        }


        public new DockPanel MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as DockPanel;
        }


        public new DockPanel MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as DockPanel;
        }


        public new DockPanel FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as DockPanel;
        }


        public new DockPanel Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as DockPanel;
        }


        public new DockPanel HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as DockPanel;
        }


        public new DockPanel VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as DockPanel;
        }


        public new DockPanel FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as DockPanel;
        }


        public new DockPanel Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as DockPanel;
        }


        public new DockPanel ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as DockPanel;
        }


        public new DockPanel ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as DockPanel;
        }


        public new DockPanel ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as DockPanel;
        }


        public new DockPanel AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as DockPanel;
        }


        public new DockPanel RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as DockPanel;
        }


        public new DockPanel RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as DockPanel;
        }


        public new DockPanel Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as DockPanel;
        }


        public new DockPanel OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as DockPanel;
        }


        public new DockPanel Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as DockPanel;
        }


        public new DockPanel Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as DockPanel;
        }


        public new DockPanel ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as DockPanel;
        }


        public new DockPanel SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as DockPanel;
        }


        public new DockPanel IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as DockPanel;
        }


        public new DockPanel Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as DockPanel;
        }

   }

    public partial class Ellipse : FrameworkElement {
        public new System.Windows.Shapes.Ellipse C { get { return base.C as System.Windows.Shapes.Ellipse; } set { base.C = value; } }


        public static Ellipse Make() {
            return new Ellipse();
        }

        public Ellipse() {
            C = new System.Windows.Shapes.Ellipse();
        }

        public new Ellipse GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new Ellipse EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Ellipse EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Ellipse EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Ellipse EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Ellipse EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Ellipse EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Ellipse EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Ellipse EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Ellipse EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Ellipse EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Ellipse EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Ellipse EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Ellipse EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Ellipse EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Ellipse EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Ellipse EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Ellipse EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Ellipse EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Ellipse EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Ellipse EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Ellipse EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Ellipse EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Ellipse EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Ellipse EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Ellipse EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Ellipse EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Ellipse EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Ellipse EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Ellipse EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Ellipse EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Ellipse EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Ellipse EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Ellipse EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Ellipse EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Ellipse EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Ellipse EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Ellipse EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Ellipse EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Ellipse EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Ellipse EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Ellipse EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Ellipse EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Ellipse EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Ellipse EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Ellipse EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Ellipse EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Ellipse EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Ellipse EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Ellipse EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Ellipse EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Ellipse EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Ellipse EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Ellipse EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Ellipse EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Ellipse EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Ellipse EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Ellipse EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Ellipse EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Ellipse EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Ellipse EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Ellipse EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Ellipse EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Ellipse EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Ellipse EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Ellipse EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Ellipse EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Ellipse EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Ellipse EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Ellipse EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Ellipse EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Ellipse EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Ellipse EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Ellipse EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Ellipse EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Ellipse EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Ellipse EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Ellipse EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Ellipse EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Ellipse EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Ellipse EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Ellipse EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Ellipse EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Ellipse EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Ellipse EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Ellipse EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Ellipse EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Ellipse EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Ellipse EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Ellipse EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Ellipse EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Ellipse EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Ellipse EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Ellipse EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Ellipse EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Ellipse EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Ellipse EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Ellipse EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Ellipse EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Ellipse EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Ellipse EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Ellipse EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Ellipse EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Ellipse EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Ellipse EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Ellipse EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Ellipse EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Ellipse EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Ellipse EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }



        public Ellipse Stretch( Bind<System.Windows.Media.Stretch> bind ) {
            C.Stretch = bind.V;
            return this;
        }



        public Ellipse Fill( Bind<System.Windows.Media.Brush> bind ) {
            C.Fill = bind.V;
            return this;
        }



        public Ellipse Stroke( Bind<System.Windows.Media.Brush> bind ) {
            C.Stroke = bind.V;
            return this;
        }



        public Ellipse StrokeThickness( Bind<System.Double> bind ) {
            C.StrokeThickness = bind.V;
            return this;
        }



        public Ellipse StrokeStartLineCap( Bind<System.Windows.Media.PenLineCap> bind ) {
            C.StrokeStartLineCap = bind.V;
            return this;
        }



        public Ellipse StrokeEndLineCap( Bind<System.Windows.Media.PenLineCap> bind ) {
            C.StrokeEndLineCap = bind.V;
            return this;
        }



        public Ellipse StrokeDashCap( Bind<System.Windows.Media.PenLineCap> bind ) {
            C.StrokeDashCap = bind.V;
            return this;
        }



        public Ellipse StrokeLineJoin( Bind<System.Windows.Media.PenLineJoin> bind ) {
            C.StrokeLineJoin = bind.V;
            return this;
        }



        public Ellipse StrokeMiterLimit( Bind<System.Double> bind ) {
            C.StrokeMiterLimit = bind.V;
            return this;
        }



        public Ellipse StrokeDashOffset( Bind<System.Double> bind ) {
            C.StrokeDashOffset = bind.V;
            return this;
        }



        public Ellipse StrokeDashArray( Bind<System.Windows.Media.DoubleCollection> bind ) {
            C.StrokeDashArray = bind.V;
            return this;
        }



        public new Ellipse Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Ellipse;
        }


        public new Ellipse OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Ellipse;
        }


        public new Ellipse UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Ellipse;
        }


        public new Ellipse Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Ellipse;
        }


        public new Ellipse DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Ellipse;
        }


        public new Ellipse Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Ellipse;
        }


        public new Ellipse Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Ellipse;
        }


        public new Ellipse Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Ellipse;
        }


        public new Ellipse LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Ellipse;
        }


        public new Ellipse Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Ellipse;
        }


        public new Ellipse MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Ellipse;
        }


        public new Ellipse MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Ellipse;
        }


        public new Ellipse Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Ellipse;
        }


        public new Ellipse MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Ellipse;
        }


        public new Ellipse MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Ellipse;
        }


        public new Ellipse FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Ellipse;
        }


        public new Ellipse Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Ellipse;
        }


        public new Ellipse HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Ellipse;
        }


        public new Ellipse VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Ellipse;
        }


        public new Ellipse FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Ellipse;
        }


        public new Ellipse Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Ellipse;
        }


        public new Ellipse ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Ellipse;
        }


        public new Ellipse ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Ellipse;
        }


        public new Ellipse ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Ellipse;
        }


        public new Ellipse AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Ellipse;
        }


        public new Ellipse RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Ellipse;
        }


        public new Ellipse RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Ellipse;
        }


        public new Ellipse Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Ellipse;
        }


        public new Ellipse OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Ellipse;
        }


        public new Ellipse Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Ellipse;
        }


        public new Ellipse Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Ellipse;
        }


        public new Ellipse ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Ellipse;
        }


        public new Ellipse SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Ellipse;
        }


        public new Ellipse IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Ellipse;
        }


        public new Ellipse Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Ellipse;
        }

   }

    public partial class Expander : FrameworkElement {
        public new System.Windows.Controls.Expander C { get { return base.C as System.Windows.Controls.Expander; } set { base.C = value; } }


        public static Expander Make() {
            return new Expander();
        }

        public Expander() {
            C = new System.Windows.Controls.Expander();
        }

        public new Expander GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new Expander EventExpanded( System.Windows.RoutedEventHandler e ) {
            C.Expanded += e;
            return this;
        }

        public new Expander EventCollapsed( System.Windows.RoutedEventHandler e ) {
            C.Collapsed += e;
            return this;
        }

        public new Expander EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new Expander EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new Expander EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Expander EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Expander EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Expander EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Expander EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Expander EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Expander EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Expander EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Expander EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Expander EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Expander EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Expander EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Expander EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Expander EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Expander EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Expander EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Expander EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Expander EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Expander EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Expander EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Expander EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Expander EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Expander EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Expander EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Expander EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Expander EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Expander EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Expander EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Expander EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Expander EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Expander EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Expander EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Expander EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Expander EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Expander EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Expander EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Expander EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Expander EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Expander EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Expander EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Expander EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Expander EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Expander EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Expander EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Expander EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Expander EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Expander EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Expander EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Expander EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Expander EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Expander EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Expander EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Expander EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Expander EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Expander EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Expander EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Expander EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Expander EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Expander EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Expander EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Expander EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Expander EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Expander EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Expander EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Expander EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Expander EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Expander EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Expander EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Expander EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Expander EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Expander EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Expander EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Expander EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Expander EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Expander EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Expander EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Expander EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Expander EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Expander EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Expander EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Expander EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Expander EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Expander EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Expander EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Expander EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Expander EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Expander EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Expander EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Expander EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Expander EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Expander EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Expander EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Expander EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Expander EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Expander EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Expander EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Expander EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Expander EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Expander EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Expander EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Expander EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Expander EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Expander EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Expander EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Expander EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Expander EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Expander EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Expander EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public Expander ExpandDirection( Bind<System.Windows.Controls.ExpandDirection> bind ) {
            C.ExpandDirection = bind.V;
            return this;
        }



        public Expander IsExpanded( Bind<System.Boolean> bind ) {
            C.IsExpanded = bind.V;
            return this;
        }



        public Expander Header( Bind<System.Object> bind ) {
            C.Header = bind.V;
            return this;
        }




        public Expander HeaderTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.HeaderTemplate = bind.V;
            return this;
        }



        public Expander HeaderTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.HeaderTemplateSelector = bind.V;
            return this;
        }



        public Expander HeaderStringFormat( Bind<System.String> bind ) {
            C.HeaderStringFormat = bind.V;
            return this;
        }



        public Expander Content( Bind<System.Object> bind ) {
            if ( bind.V is FrameworkElement )
                C.Content = ((FrameworkElement) bind.V).C;
            else
                C.Content = bind.V;
            return this;
        }




        public Expander ContentTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ContentTemplate = bind.V;
            return this;
        }



        public Expander ContentTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ContentTemplateSelector = bind.V;
            return this;
        }



        public Expander ContentStringFormat( Bind<System.String> bind ) {
            C.ContentStringFormat = bind.V;
            return this;
        }



        public Expander BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public Expander BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public Expander Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public Expander Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public Expander FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public Expander FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public Expander FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public Expander FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public Expander FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public Expander HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public Expander VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public Expander TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public Expander Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public Expander Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new Expander Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Expander;
        }


        public new Expander OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Expander;
        }


        public new Expander UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Expander;
        }


        public new Expander Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Expander;
        }


        public new Expander DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Expander;
        }


        public new Expander Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Expander;
        }


        public new Expander Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Expander;
        }


        public new Expander Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Expander;
        }


        public new Expander LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Expander;
        }


        public new Expander Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Expander;
        }


        public new Expander MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Expander;
        }


        public new Expander MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Expander;
        }


        public new Expander Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Expander;
        }


        public new Expander MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Expander;
        }


        public new Expander MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Expander;
        }


        public new Expander FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Expander;
        }


        public new Expander Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Expander;
        }


        public new Expander HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Expander;
        }


        public new Expander VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Expander;
        }


        public new Expander FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Expander;
        }


        public new Expander Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Expander;
        }


        public new Expander ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Expander;
        }


        public new Expander ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Expander;
        }


        public new Expander ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Expander;
        }


        public new Expander AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Expander;
        }


        public new Expander RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Expander;
        }


        public new Expander RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Expander;
        }


        public new Expander Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Expander;
        }


        public new Expander OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Expander;
        }


        public new Expander Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Expander;
        }


        public new Expander Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Expander;
        }


        public new Expander ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Expander;
        }


        public new Expander SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Expander;
        }


        public new Expander IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Expander;
        }


        public new Expander Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Expander;
        }

   }

    public partial class Grid : FrameworkElement {
        public new System.Windows.Controls.Grid C { get { return base.C as System.Windows.Controls.Grid; } set { base.C = value; } }


        public static Grid Make() {
            return new Grid();
        }

        public Grid() {
            C = new System.Windows.Controls.Grid();
        }

        public new Grid GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public Grid Children( params Bind<FrameworkElement>[] bind ) {
           foreach( var b in bind ) {
                C.Children.Add( ( (FrameworkElement) b.V ).C);
            }
            return this;
        }


        public new Grid EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Grid EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Grid EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Grid EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Grid EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Grid EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Grid EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Grid EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Grid EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Grid EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Grid EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Grid EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Grid EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Grid EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Grid EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Grid EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Grid EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Grid EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Grid EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Grid EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Grid EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Grid EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Grid EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Grid EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Grid EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Grid EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Grid EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Grid EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Grid EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Grid EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Grid EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Grid EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Grid EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Grid EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Grid EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Grid EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Grid EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Grid EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Grid EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Grid EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Grid EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Grid EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Grid EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Grid EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Grid EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Grid EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Grid EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Grid EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Grid EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Grid EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Grid EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Grid EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Grid EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Grid EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Grid EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Grid EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Grid EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Grid EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Grid EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Grid EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Grid EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Grid EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Grid EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Grid EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Grid EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Grid EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Grid EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Grid EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Grid EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Grid EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Grid EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Grid EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Grid EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Grid EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Grid EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Grid EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Grid EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Grid EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Grid EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Grid EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Grid EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Grid EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Grid EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Grid EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Grid EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Grid EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Grid EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Grid EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Grid EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Grid EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Grid EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Grid EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Grid EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Grid EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Grid EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Grid EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Grid EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Grid EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Grid EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Grid EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Grid EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Grid EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Grid EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Grid EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Grid EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Grid EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Grid EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Grid EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public Grid ShowGridLines( Bind<System.Boolean> bind ) {
            C.ShowGridLines = bind.V;
            return this;
        }



        public Grid ColumnDefinitions( params Bind<object>[] bind ) {
             System.Windows.GridLengthConverter converter = new  System.Windows.GridLengthConverter();
           foreach( var b in bind ) {
               var width = (System.Windows.GridLength) converter.ConvertFrom( b.V );
               C.ColumnDefinitions.Add( new System.Windows.Controls.ColumnDefinition() { Width = width } );
            }
            return this;
        }

        public Grid RowDefinitions( params Bind<object>[] bind ) {
             System.Windows.GridLengthConverter converter = new  System.Windows.GridLengthConverter();
           foreach( var b in bind ) {
               var height = (System.Windows.GridLength) converter.ConvertFrom( b.V );
                C.RowDefinitions.Add(  new System.Windows.Controls.RowDefinition() { Height = height } );
            }
            return this;
        }



        public Grid Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }




        public Grid IsItemsHost( Bind<System.Boolean> bind ) {
            C.IsItemsHost = bind.V;
            return this;
        }



        public new Grid Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Grid;
        }


        public new Grid OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Grid;
        }


        public new Grid UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Grid;
        }


        public new Grid Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Grid;
        }


        public new Grid DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Grid;
        }


        public new Grid Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Grid;
        }


        public new Grid Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Grid;
        }


        public new Grid Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Grid;
        }


        public new Grid LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Grid;
        }


        public new Grid Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Grid;
        }


        public new Grid MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Grid;
        }


        public new Grid MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Grid;
        }


        public new Grid Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Grid;
        }


        public new Grid MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Grid;
        }


        public new Grid MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Grid;
        }


        public new Grid FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Grid;
        }


        public new Grid Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Grid;
        }


        public new Grid HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Grid;
        }


        public new Grid VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Grid;
        }


        public new Grid FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Grid;
        }


        public new Grid Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Grid;
        }


        public new Grid ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Grid;
        }


        public new Grid ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Grid;
        }


        public new Grid ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Grid;
        }


        public new Grid AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Grid;
        }


        public new Grid RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Grid;
        }


        public new Grid RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Grid;
        }


        public new Grid Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Grid;
        }


        public new Grid OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Grid;
        }


        public new Grid Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Grid;
        }


        public new Grid Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Grid;
        }


        public new Grid ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Grid;
        }


        public new Grid SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Grid;
        }


        public new Grid IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Grid;
        }


        public new Grid Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Grid;
        }

   }

    public partial class GridSplitter : FrameworkElement {
        public new System.Windows.Controls.GridSplitter C { get { return base.C as System.Windows.Controls.GridSplitter; } set { base.C = value; } }


        public static GridSplitter Make() {
            return new GridSplitter();
        }

        public GridSplitter() {
            C = new System.Windows.Controls.GridSplitter();
        }

        public new GridSplitter GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new GridSplitter EventDragStarted( System.Windows.Controls.Primitives.DragStartedEventHandler e ) {
            C.DragStarted += e;
            return this;
        }

        public new GridSplitter EventDragDelta( System.Windows.Controls.Primitives.DragDeltaEventHandler e ) {
            C.DragDelta += e;
            return this;
        }

        public new GridSplitter EventDragCompleted( System.Windows.Controls.Primitives.DragCompletedEventHandler e ) {
            C.DragCompleted += e;
            return this;
        }

        public new GridSplitter EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new GridSplitter EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new GridSplitter EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new GridSplitter EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new GridSplitter EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new GridSplitter EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new GridSplitter EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new GridSplitter EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new GridSplitter EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new GridSplitter EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new GridSplitter EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new GridSplitter EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new GridSplitter EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new GridSplitter EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new GridSplitter EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new GridSplitter EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new GridSplitter EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new GridSplitter EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new GridSplitter EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new GridSplitter EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new GridSplitter EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new GridSplitter EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new GridSplitter EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new GridSplitter EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new GridSplitter EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new GridSplitter EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new GridSplitter EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new GridSplitter EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new GridSplitter EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new GridSplitter EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new GridSplitter EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new GridSplitter EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new GridSplitter EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new GridSplitter EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new GridSplitter EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new GridSplitter EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new GridSplitter EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new GridSplitter EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new GridSplitter EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new GridSplitter EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new GridSplitter EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new GridSplitter EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new GridSplitter EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new GridSplitter EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new GridSplitter EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new GridSplitter EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new GridSplitter EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new GridSplitter EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new GridSplitter EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new GridSplitter EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new GridSplitter EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new GridSplitter EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new GridSplitter EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new GridSplitter EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new GridSplitter EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new GridSplitter EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new GridSplitter EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new GridSplitter EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new GridSplitter EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new GridSplitter EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new GridSplitter EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new GridSplitter EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new GridSplitter EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new GridSplitter EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new GridSplitter EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new GridSplitter EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new GridSplitter EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new GridSplitter EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new GridSplitter EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new GridSplitter EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new GridSplitter EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new GridSplitter EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new GridSplitter EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new GridSplitter EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new GridSplitter EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new GridSplitter EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new GridSplitter EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new GridSplitter EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new GridSplitter EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new GridSplitter EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new GridSplitter EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new GridSplitter EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new GridSplitter EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new GridSplitter EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new GridSplitter EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new GridSplitter EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new GridSplitter EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new GridSplitter EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new GridSplitter EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new GridSplitter EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new GridSplitter EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new GridSplitter EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new GridSplitter EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new GridSplitter EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new GridSplitter EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new GridSplitter EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new GridSplitter EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new GridSplitter EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new GridSplitter EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new GridSplitter EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new GridSplitter EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new GridSplitter EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new GridSplitter EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new GridSplitter EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new GridSplitter EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new GridSplitter EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new GridSplitter EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new GridSplitter EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new GridSplitter EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new GridSplitter EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public GridSplitter ResizeDirection( Bind<System.Windows.Controls.GridResizeDirection> bind ) {
            C.ResizeDirection = bind.V;
            return this;
        }



        public GridSplitter ResizeBehavior( Bind<System.Windows.Controls.GridResizeBehavior> bind ) {
            C.ResizeBehavior = bind.V;
            return this;
        }



        public GridSplitter ShowsPreview( Bind<System.Boolean> bind ) {
            C.ShowsPreview = bind.V;
            return this;
        }



        public GridSplitter PreviewStyle( Bind<System.Windows.Style> bind ) {
            C.PreviewStyle = bind.V;
            return this;
        }



        public GridSplitter KeyboardIncrement( Bind<System.Double> bind ) {
            C.KeyboardIncrement = bind.V;
            return this;
        }



        public GridSplitter DragIncrement( Bind<System.Double> bind ) {
            C.DragIncrement = bind.V;
            return this;
        }



        public GridSplitter BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public GridSplitter BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public GridSplitter Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public GridSplitter Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public GridSplitter FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public GridSplitter FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public GridSplitter FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public GridSplitter FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public GridSplitter FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public GridSplitter HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public GridSplitter VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public GridSplitter TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public GridSplitter Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public GridSplitter Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new GridSplitter Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as GridSplitter;
        }


        public new GridSplitter OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as GridSplitter;
        }


        public new GridSplitter UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as GridSplitter;
        }


        public new GridSplitter Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as GridSplitter;
        }


        public new GridSplitter DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as GridSplitter;
        }


        public new GridSplitter Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as GridSplitter;
        }


        public new GridSplitter Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as GridSplitter;
        }


        public new GridSplitter Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as GridSplitter;
        }


        public new GridSplitter LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as GridSplitter;
        }


        public new GridSplitter Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as GridSplitter;
        }


        public new GridSplitter MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as GridSplitter;
        }


        public new GridSplitter MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as GridSplitter;
        }


        public new GridSplitter Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as GridSplitter;
        }


        public new GridSplitter MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as GridSplitter;
        }


        public new GridSplitter MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as GridSplitter;
        }


        public new GridSplitter FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as GridSplitter;
        }


        public new GridSplitter Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as GridSplitter;
        }


        public new GridSplitter HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as GridSplitter;
        }


        public new GridSplitter VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as GridSplitter;
        }


        public new GridSplitter FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as GridSplitter;
        }


        public new GridSplitter Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as GridSplitter;
        }


        public new GridSplitter ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as GridSplitter;
        }


        public new GridSplitter ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as GridSplitter;
        }


        public new GridSplitter ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as GridSplitter;
        }


        public new GridSplitter AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as GridSplitter;
        }


        public new GridSplitter RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as GridSplitter;
        }


        public new GridSplitter RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as GridSplitter;
        }


        public new GridSplitter Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as GridSplitter;
        }


        public new GridSplitter OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as GridSplitter;
        }


        public new GridSplitter Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as GridSplitter;
        }


        public new GridSplitter Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as GridSplitter;
        }


        public new GridSplitter ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as GridSplitter;
        }


        public new GridSplitter SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as GridSplitter;
        }


        public new GridSplitter IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as GridSplitter;
        }


        public new GridSplitter Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as GridSplitter;
        }

   }

    public partial class GroupBox : FrameworkElement {
        public new System.Windows.Controls.GroupBox C { get { return base.C as System.Windows.Controls.GroupBox; } set { base.C = value; } }


        public static GroupBox Make() {
            return new GroupBox();
        }

        public GroupBox() {
            C = new System.Windows.Controls.GroupBox();
        }

        public new GroupBox GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new GroupBox EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new GroupBox EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new GroupBox EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new GroupBox EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new GroupBox EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new GroupBox EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new GroupBox EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new GroupBox EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new GroupBox EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new GroupBox EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new GroupBox EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new GroupBox EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new GroupBox EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new GroupBox EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new GroupBox EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new GroupBox EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new GroupBox EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new GroupBox EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new GroupBox EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new GroupBox EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new GroupBox EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new GroupBox EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new GroupBox EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new GroupBox EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new GroupBox EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new GroupBox EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new GroupBox EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new GroupBox EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new GroupBox EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new GroupBox EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new GroupBox EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new GroupBox EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new GroupBox EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new GroupBox EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new GroupBox EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new GroupBox EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new GroupBox EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new GroupBox EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new GroupBox EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new GroupBox EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new GroupBox EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new GroupBox EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new GroupBox EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new GroupBox EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new GroupBox EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new GroupBox EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new GroupBox EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new GroupBox EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new GroupBox EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new GroupBox EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new GroupBox EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new GroupBox EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new GroupBox EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new GroupBox EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new GroupBox EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new GroupBox EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new GroupBox EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new GroupBox EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new GroupBox EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new GroupBox EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new GroupBox EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new GroupBox EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new GroupBox EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new GroupBox EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new GroupBox EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new GroupBox EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new GroupBox EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new GroupBox EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new GroupBox EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new GroupBox EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new GroupBox EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new GroupBox EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new GroupBox EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new GroupBox EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new GroupBox EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new GroupBox EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new GroupBox EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new GroupBox EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new GroupBox EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new GroupBox EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new GroupBox EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new GroupBox EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new GroupBox EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new GroupBox EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new GroupBox EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new GroupBox EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new GroupBox EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new GroupBox EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new GroupBox EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new GroupBox EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new GroupBox EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new GroupBox EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new GroupBox EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new GroupBox EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new GroupBox EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new GroupBox EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new GroupBox EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new GroupBox EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new GroupBox EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new GroupBox EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new GroupBox EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new GroupBox EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new GroupBox EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new GroupBox EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new GroupBox EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new GroupBox EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new GroupBox EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new GroupBox EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new GroupBox EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new GroupBox EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public GroupBox Header( Bind<System.Object> bind ) {
            C.Header = bind.V;
            return this;
        }




        public GroupBox HeaderTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.HeaderTemplate = bind.V;
            return this;
        }



        public GroupBox HeaderTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.HeaderTemplateSelector = bind.V;
            return this;
        }



        public GroupBox HeaderStringFormat( Bind<System.String> bind ) {
            C.HeaderStringFormat = bind.V;
            return this;
        }



        public GroupBox Content( Bind<System.Object> bind ) {
            if ( bind.V is FrameworkElement )
                C.Content = ((FrameworkElement) bind.V).C;
            else
                C.Content = bind.V;
            return this;
        }




        public GroupBox ContentTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ContentTemplate = bind.V;
            return this;
        }



        public GroupBox ContentTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ContentTemplateSelector = bind.V;
            return this;
        }



        public GroupBox ContentStringFormat( Bind<System.String> bind ) {
            C.ContentStringFormat = bind.V;
            return this;
        }



        public GroupBox BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public GroupBox BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public GroupBox Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public GroupBox Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public GroupBox FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public GroupBox FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public GroupBox FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public GroupBox FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public GroupBox FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public GroupBox HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public GroupBox VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public GroupBox TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public GroupBox Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public GroupBox Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new GroupBox Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as GroupBox;
        }


        public new GroupBox OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as GroupBox;
        }


        public new GroupBox UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as GroupBox;
        }


        public new GroupBox Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as GroupBox;
        }


        public new GroupBox DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as GroupBox;
        }


        public new GroupBox Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as GroupBox;
        }


        public new GroupBox Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as GroupBox;
        }


        public new GroupBox Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as GroupBox;
        }


        public new GroupBox LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as GroupBox;
        }


        public new GroupBox Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as GroupBox;
        }


        public new GroupBox MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as GroupBox;
        }


        public new GroupBox MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as GroupBox;
        }


        public new GroupBox Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as GroupBox;
        }


        public new GroupBox MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as GroupBox;
        }


        public new GroupBox MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as GroupBox;
        }


        public new GroupBox FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as GroupBox;
        }


        public new GroupBox Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as GroupBox;
        }


        public new GroupBox HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as GroupBox;
        }


        public new GroupBox VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as GroupBox;
        }


        public new GroupBox FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as GroupBox;
        }


        public new GroupBox Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as GroupBox;
        }


        public new GroupBox ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as GroupBox;
        }


        public new GroupBox ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as GroupBox;
        }


        public new GroupBox ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as GroupBox;
        }


        public new GroupBox AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as GroupBox;
        }


        public new GroupBox RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as GroupBox;
        }


        public new GroupBox RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as GroupBox;
        }


        public new GroupBox Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as GroupBox;
        }


        public new GroupBox OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as GroupBox;
        }


        public new GroupBox Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as GroupBox;
        }


        public new GroupBox Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as GroupBox;
        }


        public new GroupBox ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as GroupBox;
        }


        public new GroupBox SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as GroupBox;
        }


        public new GroupBox IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as GroupBox;
        }


        public new GroupBox Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as GroupBox;
        }

   }

    public partial class Image : FrameworkElement {
        public new System.Windows.Controls.Image C { get { return base.C as System.Windows.Controls.Image; } set { base.C = value; } }


        public static Image Make() {
            return new Image();
        }

        public Image() {
            C = new System.Windows.Controls.Image();
        }

        public new Image GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new Image EventImageFailed( EventHandler<System.Windows.ExceptionRoutedEventArgs> e ) {
            C.ImageFailed += e;
            return this;
        }

        public new Image EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Image EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Image EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Image EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Image EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Image EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Image EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Image EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Image EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Image EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Image EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Image EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Image EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Image EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Image EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Image EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Image EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Image EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Image EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Image EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Image EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Image EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Image EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Image EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Image EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Image EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Image EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Image EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Image EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Image EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Image EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Image EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Image EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Image EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Image EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Image EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Image EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Image EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Image EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Image EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Image EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Image EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Image EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Image EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Image EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Image EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Image EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Image EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Image EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Image EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Image EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Image EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Image EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Image EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Image EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Image EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Image EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Image EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Image EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Image EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Image EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Image EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Image EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Image EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Image EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Image EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Image EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Image EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Image EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Image EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Image EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Image EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Image EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Image EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Image EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Image EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Image EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Image EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Image EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Image EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Image EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Image EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Image EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Image EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Image EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Image EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Image EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Image EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Image EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Image EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Image EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Image EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Image EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Image EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Image EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Image EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Image EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Image EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Image EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Image EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Image EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Image EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Image EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Image EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Image EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Image EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Image EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Image EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public Image Source( Bind<System.Windows.Media.ImageSource> bind ) {
            C.Source = bind.V;
            return this;
        }



        public Image Stretch( Bind<System.Windows.Media.Stretch> bind ) {
            C.Stretch = bind.V;
            return this;
        }



        public Image StretchDirection( Bind<System.Windows.Controls.StretchDirection> bind ) {
            C.StretchDirection = bind.V;
            return this;
        }



        public new Image Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Image;
        }


        public new Image OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Image;
        }


        public new Image UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Image;
        }


        public new Image Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Image;
        }


        public new Image DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Image;
        }


        public new Image Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Image;
        }


        public new Image Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Image;
        }


        public new Image Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Image;
        }


        public new Image LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Image;
        }


        public new Image Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Image;
        }


        public new Image MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Image;
        }


        public new Image MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Image;
        }


        public new Image Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Image;
        }


        public new Image MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Image;
        }


        public new Image MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Image;
        }


        public new Image FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Image;
        }


        public new Image Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Image;
        }


        public new Image HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Image;
        }


        public new Image VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Image;
        }


        public new Image FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Image;
        }


        public new Image Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Image;
        }


        public new Image ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Image;
        }


        public new Image ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Image;
        }


        public new Image ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Image;
        }


        public new Image AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Image;
        }


        public new Image RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Image;
        }


        public new Image RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Image;
        }


        public new Image Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Image;
        }


        public new Image OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Image;
        }


        public new Image Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Image;
        }


        public new Image Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Image;
        }


        public new Image ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Image;
        }


        public new Image SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Image;
        }


        public new Image IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Image;
        }


        public new Image Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Image;
        }

   }

    public partial class Label : FrameworkElement {
        public new System.Windows.Controls.Label C { get { return base.C as System.Windows.Controls.Label; } set { base.C = value; } }


        public static Label Make() {
            return new Label();
        }

        public Label() {
            C = new System.Windows.Controls.Label();
        }

        public new Label GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new Label EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new Label EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new Label EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Label EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Label EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Label EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Label EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Label EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Label EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Label EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Label EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Label EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Label EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Label EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Label EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Label EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Label EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Label EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Label EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Label EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Label EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Label EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Label EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Label EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Label EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Label EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Label EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Label EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Label EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Label EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Label EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Label EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Label EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Label EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Label EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Label EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Label EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Label EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Label EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Label EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Label EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Label EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Label EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Label EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Label EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Label EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Label EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Label EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Label EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Label EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Label EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Label EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Label EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Label EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Label EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Label EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Label EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Label EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Label EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Label EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Label EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Label EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Label EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Label EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Label EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Label EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Label EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Label EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Label EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Label EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Label EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Label EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Label EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Label EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Label EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Label EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Label EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Label EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Label EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Label EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Label EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Label EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Label EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Label EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Label EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Label EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Label EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Label EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Label EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Label EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Label EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Label EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Label EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Label EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Label EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Label EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Label EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Label EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Label EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Label EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Label EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Label EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Label EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Label EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Label EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Label EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Label EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Label EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Label EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Label EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public Label Target( Bind<System.Windows.UIElement> bind ) {
            C.Target = bind.V;
            return this;
        }



        public Label Content( Bind<System.Object> bind ) {
            if ( bind.V is FrameworkElement )
                C.Content = ((FrameworkElement) bind.V).C;
            else
                C.Content = bind.V;
            return this;
        }




        public Label ContentTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ContentTemplate = bind.V;
            return this;
        }



        public Label ContentTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ContentTemplateSelector = bind.V;
            return this;
        }



        public Label ContentStringFormat( Bind<System.String> bind ) {
            C.ContentStringFormat = bind.V;
            return this;
        }



        public Label BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public Label BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public Label Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public Label Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public Label FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public Label FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public Label FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public Label FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public Label FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public Label HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public Label VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public Label TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public Label Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public Label Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new Label Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Label;
        }


        public new Label OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Label;
        }


        public new Label UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Label;
        }


        public new Label Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Label;
        }


        public new Label DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Label;
        }


        public new Label Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Label;
        }


        public new Label Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Label;
        }


        public new Label Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Label;
        }


        public new Label LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Label;
        }


        public new Label Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Label;
        }


        public new Label MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Label;
        }


        public new Label MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Label;
        }


        public new Label Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Label;
        }


        public new Label MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Label;
        }


        public new Label MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Label;
        }


        public new Label FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Label;
        }


        public new Label Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Label;
        }


        public new Label HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Label;
        }


        public new Label VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Label;
        }


        public new Label FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Label;
        }


        public new Label Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Label;
        }


        public new Label ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Label;
        }


        public new Label ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Label;
        }


        public new Label ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Label;
        }


        public new Label AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Label;
        }


        public new Label RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Label;
        }


        public new Label RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Label;
        }


        public new Label Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Label;
        }


        public new Label OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Label;
        }


        public new Label Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Label;
        }


        public new Label Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Label;
        }


        public new Label ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Label;
        }


        public new Label SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Label;
        }


        public new Label IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Label;
        }


        public new Label Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Label;
        }

   }

    public partial class Line : FrameworkElement {
        public new System.Windows.Shapes.Line C { get { return base.C as System.Windows.Shapes.Line; } set { base.C = value; } }


        public static Line Make() {
            return new Line();
        }

        public Line() {
            C = new System.Windows.Shapes.Line();
        }

        public new Line GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new Line EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Line EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Line EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Line EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Line EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Line EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Line EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Line EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Line EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Line EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Line EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Line EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Line EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Line EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Line EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Line EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Line EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Line EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Line EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Line EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Line EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Line EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Line EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Line EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Line EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Line EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Line EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Line EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Line EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Line EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Line EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Line EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Line EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Line EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Line EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Line EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Line EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Line EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Line EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Line EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Line EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Line EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Line EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Line EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Line EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Line EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Line EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Line EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Line EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Line EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Line EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Line EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Line EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Line EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Line EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Line EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Line EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Line EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Line EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Line EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Line EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Line EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Line EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Line EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Line EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Line EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Line EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Line EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Line EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Line EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Line EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Line EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Line EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Line EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Line EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Line EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Line EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Line EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Line EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Line EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Line EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Line EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Line EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Line EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Line EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Line EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Line EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Line EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Line EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Line EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Line EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Line EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Line EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Line EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Line EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Line EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Line EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Line EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Line EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Line EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Line EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Line EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Line EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Line EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Line EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Line EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Line EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Line EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public Line X1( Bind<System.Double> bind ) {
            C.X1 = bind.V;
            return this;
        }



        public Line Y1( Bind<System.Double> bind ) {
            C.Y1 = bind.V;
            return this;
        }



        public Line X2( Bind<System.Double> bind ) {
            C.X2 = bind.V;
            return this;
        }



        public Line Y2( Bind<System.Double> bind ) {
            C.Y2 = bind.V;
            return this;
        }



        public Line Stretch( Bind<System.Windows.Media.Stretch> bind ) {
            C.Stretch = bind.V;
            return this;
        }





        public Line Fill( Bind<System.Windows.Media.Brush> bind ) {
            C.Fill = bind.V;
            return this;
        }



        public Line Stroke( Bind<System.Windows.Media.Brush> bind ) {
            C.Stroke = bind.V;
            return this;
        }



        public Line StrokeThickness( Bind<System.Double> bind ) {
            C.StrokeThickness = bind.V;
            return this;
        }



        public Line StrokeStartLineCap( Bind<System.Windows.Media.PenLineCap> bind ) {
            C.StrokeStartLineCap = bind.V;
            return this;
        }



        public Line StrokeEndLineCap( Bind<System.Windows.Media.PenLineCap> bind ) {
            C.StrokeEndLineCap = bind.V;
            return this;
        }



        public Line StrokeDashCap( Bind<System.Windows.Media.PenLineCap> bind ) {
            C.StrokeDashCap = bind.V;
            return this;
        }



        public Line StrokeLineJoin( Bind<System.Windows.Media.PenLineJoin> bind ) {
            C.StrokeLineJoin = bind.V;
            return this;
        }



        public Line StrokeMiterLimit( Bind<System.Double> bind ) {
            C.StrokeMiterLimit = bind.V;
            return this;
        }



        public Line StrokeDashOffset( Bind<System.Double> bind ) {
            C.StrokeDashOffset = bind.V;
            return this;
        }



        public Line StrokeDashArray( Bind<System.Windows.Media.DoubleCollection> bind ) {
            C.StrokeDashArray = bind.V;
            return this;
        }



        public new Line Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Line;
        }


        public new Line OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Line;
        }


        public new Line UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Line;
        }


        public new Line Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Line;
        }


        public new Line DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Line;
        }


        public new Line Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Line;
        }


        public new Line Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Line;
        }


        public new Line Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Line;
        }


        public new Line LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Line;
        }


        public new Line Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Line;
        }


        public new Line MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Line;
        }


        public new Line MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Line;
        }


        public new Line Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Line;
        }


        public new Line MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Line;
        }


        public new Line MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Line;
        }


        public new Line FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Line;
        }


        public new Line Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Line;
        }


        public new Line HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Line;
        }


        public new Line VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Line;
        }


        public new Line FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Line;
        }


        public new Line Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Line;
        }


        public new Line ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Line;
        }


        public new Line ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Line;
        }


        public new Line ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Line;
        }


        public new Line AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Line;
        }


        public new Line RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Line;
        }


        public new Line RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Line;
        }


        public new Line Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Line;
        }


        public new Line OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Line;
        }


        public new Line Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Line;
        }


        public new Line Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Line;
        }


        public new Line ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Line;
        }


        public new Line SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Line;
        }


        public new Line IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Line;
        }


        public new Line Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Line;
        }

   }

    public partial class ListBox : FrameworkElement {
        public new System.Windows.Controls.ListBox C { get { return base.C as System.Windows.Controls.ListBox; } set { base.C = value; } }


        public static ListBox Make() {
            return new ListBox();
        }

        public ListBox() {
            C = new System.Windows.Controls.ListBox();
        }

        public new ListBox GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new ListBox EventSelectionChanged( System.Windows.Controls.SelectionChangedEventHandler e ) {
            C.SelectionChanged += e;
            return this;
        }

        public new ListBox EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new ListBox EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new ListBox EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new ListBox EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new ListBox EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new ListBox EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new ListBox EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new ListBox EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new ListBox EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new ListBox EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new ListBox EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new ListBox EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new ListBox EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new ListBox EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new ListBox EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new ListBox EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new ListBox EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new ListBox EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new ListBox EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new ListBox EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new ListBox EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new ListBox EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new ListBox EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new ListBox EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new ListBox EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new ListBox EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new ListBox EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new ListBox EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new ListBox EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new ListBox EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new ListBox EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new ListBox EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new ListBox EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new ListBox EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new ListBox EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new ListBox EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new ListBox EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new ListBox EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new ListBox EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new ListBox EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new ListBox EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new ListBox EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new ListBox EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new ListBox EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new ListBox EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new ListBox EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new ListBox EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new ListBox EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new ListBox EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new ListBox EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new ListBox EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new ListBox EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new ListBox EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new ListBox EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new ListBox EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new ListBox EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new ListBox EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new ListBox EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new ListBox EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new ListBox EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new ListBox EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new ListBox EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new ListBox EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new ListBox EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new ListBox EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new ListBox EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new ListBox EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new ListBox EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new ListBox EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new ListBox EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new ListBox EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new ListBox EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new ListBox EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new ListBox EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new ListBox EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new ListBox EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new ListBox EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new ListBox EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new ListBox EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new ListBox EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new ListBox EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new ListBox EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new ListBox EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new ListBox EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new ListBox EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new ListBox EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new ListBox EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new ListBox EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new ListBox EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new ListBox EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new ListBox EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new ListBox EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new ListBox EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new ListBox EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new ListBox EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new ListBox EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new ListBox EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new ListBox EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new ListBox EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new ListBox EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new ListBox EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new ListBox EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new ListBox EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new ListBox EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new ListBox EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new ListBox EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new ListBox EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new ListBox EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new ListBox EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new ListBox EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public ListBox SelectionMode( Bind<System.Windows.Controls.SelectionMode> bind ) {
            C.SelectionMode = bind.V;
            return this;
        }




        public ListBox IsSynchronizedWithCurrentItem( Bind<bool?> bind ) {
            C.IsSynchronizedWithCurrentItem = bind.V;
            return this;
        }



        public ListBox SelectedIndex( Bind<System.Int32> bind ) {
            C.SelectedIndex = bind.V;
            return this;
        }



        public ListBox SelectedItem( Bind<System.Object> bind ) {
            C.SelectedItem = bind.V;
            return this;
        }



        public ListBox SelectedValue( Bind<System.Object> bind ) {
            C.SelectedValue = bind.V;
            return this;
        }



        public ListBox SelectedValuePath( Bind<System.String> bind ) {
            C.SelectedValuePath = bind.V;
            return this;
        }




        public ListBox ItemsSource( params Bind<object>[] bind ) {
            System.Collections.Generic.List<object> source = new System.Collections.Generic.List<object>();
           foreach( var b in bind ) {
                if ( b.V is FrameworkElement )
                    source.Add( ( (FrameworkElement) b.V ).C );
                else
                    source.Add( b.V );
            }
            C.ItemsSource = source;
            return this;
        }





        public ListBox DisplayMemberPath( Bind<System.String> bind ) {
            C.DisplayMemberPath = bind.V;
            return this;
        }



        public ListBox ItemTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ItemTemplate = bind.V;
            return this;
        }



        public ListBox ItemTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ItemTemplateSelector = bind.V;
            return this;
        }



        public ListBox ItemStringFormat( Bind<System.String> bind ) {
            C.ItemStringFormat = bind.V;
            return this;
        }



        public ListBox ItemBindingGroup( Bind<System.Windows.Data.BindingGroup> bind ) {
            C.ItemBindingGroup = bind.V;
            return this;
        }



        public ListBox ItemContainerStyle( Bind<System.Windows.Style> bind ) {
            C.ItemContainerStyle = bind.V;
            return this;
        }



        public ListBox ItemContainerStyleSelector( Bind<System.Windows.Controls.StyleSelector> bind ) {
            C.ItemContainerStyleSelector = bind.V;
            return this;
        }



        public ListBox ItemsPanel( Bind<System.Windows.Controls.ItemsPanelTemplate> bind ) {
            C.ItemsPanel = bind.V;
            return this;
        }





        public ListBox GroupStyleSelector( Bind<System.Windows.Controls.GroupStyleSelector> bind ) {
            C.GroupStyleSelector = bind.V;
            return this;
        }



        public ListBox AlternationCount( Bind<System.Int32> bind ) {
            C.AlternationCount = bind.V;
            return this;
        }



        public ListBox IsTextSearchEnabled( Bind<System.Boolean> bind ) {
            C.IsTextSearchEnabled = bind.V;
            return this;
        }



        public ListBox IsTextSearchCaseSensitive( Bind<System.Boolean> bind ) {
            C.IsTextSearchCaseSensitive = bind.V;
            return this;
        }



        public ListBox BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public ListBox BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public ListBox Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public ListBox Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public ListBox FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public ListBox FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public ListBox FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public ListBox FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public ListBox FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public ListBox HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public ListBox VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public ListBox TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public ListBox Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public ListBox Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new ListBox Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as ListBox;
        }


        public new ListBox OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as ListBox;
        }


        public new ListBox UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as ListBox;
        }


        public new ListBox Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as ListBox;
        }


        public new ListBox DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as ListBox;
        }


        public new ListBox Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as ListBox;
        }


        public new ListBox Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as ListBox;
        }


        public new ListBox Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as ListBox;
        }


        public new ListBox LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as ListBox;
        }


        public new ListBox Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as ListBox;
        }


        public new ListBox MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as ListBox;
        }


        public new ListBox MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as ListBox;
        }


        public new ListBox Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as ListBox;
        }


        public new ListBox MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as ListBox;
        }


        public new ListBox MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as ListBox;
        }


        public new ListBox FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as ListBox;
        }


        public new ListBox Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as ListBox;
        }


        public new ListBox HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as ListBox;
        }


        public new ListBox VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as ListBox;
        }


        public new ListBox FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as ListBox;
        }


        public new ListBox Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as ListBox;
        }


        public new ListBox ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as ListBox;
        }


        public new ListBox ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as ListBox;
        }


        public new ListBox ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as ListBox;
        }


        public new ListBox AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as ListBox;
        }


        public new ListBox RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as ListBox;
        }


        public new ListBox RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as ListBox;
        }


        public new ListBox Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as ListBox;
        }


        public new ListBox OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as ListBox;
        }


        public new ListBox Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as ListBox;
        }


        public new ListBox Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as ListBox;
        }


        public new ListBox ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as ListBox;
        }


        public new ListBox SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as ListBox;
        }


        public new ListBox IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as ListBox;
        }


        public new ListBox Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as ListBox;
        }

   }

    public partial class ListBoxItem : FrameworkElement {
        public new System.Windows.Controls.ListBoxItem C { get { return base.C as System.Windows.Controls.ListBoxItem; } set { base.C = value; } }


        public static ListBoxItem Make() {
            return new ListBoxItem();
        }

        public ListBoxItem() {
            C = new System.Windows.Controls.ListBoxItem();
        }

        public new ListBoxItem GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new ListBoxItem EventSelected( System.Windows.RoutedEventHandler e ) {
            C.Selected += e;
            return this;
        }

        public new ListBoxItem EventUnselected( System.Windows.RoutedEventHandler e ) {
            C.Unselected += e;
            return this;
        }

        public new ListBoxItem EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new ListBoxItem EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new ListBoxItem EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new ListBoxItem EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new ListBoxItem EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new ListBoxItem EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new ListBoxItem EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new ListBoxItem EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new ListBoxItem EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new ListBoxItem EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new ListBoxItem EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new ListBoxItem EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new ListBoxItem EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new ListBoxItem EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new ListBoxItem EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new ListBoxItem EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new ListBoxItem EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new ListBoxItem EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new ListBoxItem EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new ListBoxItem EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new ListBoxItem EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new ListBoxItem EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new ListBoxItem EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new ListBoxItem EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new ListBoxItem EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new ListBoxItem EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new ListBoxItem EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new ListBoxItem EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new ListBoxItem EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new ListBoxItem EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new ListBoxItem EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new ListBoxItem EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new ListBoxItem EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new ListBoxItem EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new ListBoxItem EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new ListBoxItem EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new ListBoxItem EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new ListBoxItem EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new ListBoxItem EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new ListBoxItem EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new ListBoxItem EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new ListBoxItem EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new ListBoxItem EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new ListBoxItem EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new ListBoxItem EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new ListBoxItem EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new ListBoxItem EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new ListBoxItem EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new ListBoxItem EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new ListBoxItem EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new ListBoxItem EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new ListBoxItem EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new ListBoxItem EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new ListBoxItem EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new ListBoxItem EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new ListBoxItem EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new ListBoxItem EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new ListBoxItem EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new ListBoxItem EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new ListBoxItem EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new ListBoxItem EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new ListBoxItem EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new ListBoxItem EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new ListBoxItem EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new ListBoxItem EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new ListBoxItem EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new ListBoxItem EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new ListBoxItem EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new ListBoxItem EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new ListBoxItem EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new ListBoxItem EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new ListBoxItem EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new ListBoxItem EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new ListBoxItem EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new ListBoxItem EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new ListBoxItem EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new ListBoxItem EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new ListBoxItem EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new ListBoxItem EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new ListBoxItem EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new ListBoxItem EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new ListBoxItem EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new ListBoxItem EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new ListBoxItem EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new ListBoxItem EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new ListBoxItem EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new ListBoxItem EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new ListBoxItem EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new ListBoxItem EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new ListBoxItem EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new ListBoxItem EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new ListBoxItem EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new ListBoxItem EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new ListBoxItem EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new ListBoxItem EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new ListBoxItem EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new ListBoxItem EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new ListBoxItem EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new ListBoxItem EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new ListBoxItem EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new ListBoxItem EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new ListBoxItem EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new ListBoxItem EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new ListBoxItem EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new ListBoxItem EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new ListBoxItem EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new ListBoxItem EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new ListBoxItem EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new ListBoxItem EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new ListBoxItem EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public ListBoxItem IsSelected( Bind<System.Boolean> bind ) {
            C.IsSelected = bind.V;
            return this;
        }



        public ListBoxItem Content( Bind<System.Object> bind ) {
            if ( bind.V is FrameworkElement )
                C.Content = ((FrameworkElement) bind.V).C;
            else
                C.Content = bind.V;
            return this;
        }




        public ListBoxItem ContentTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ContentTemplate = bind.V;
            return this;
        }



        public ListBoxItem ContentTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ContentTemplateSelector = bind.V;
            return this;
        }



        public ListBoxItem ContentStringFormat( Bind<System.String> bind ) {
            C.ContentStringFormat = bind.V;
            return this;
        }



        public ListBoxItem BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public ListBoxItem BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public ListBoxItem Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public ListBoxItem Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public ListBoxItem FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public ListBoxItem FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public ListBoxItem FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public ListBoxItem FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public ListBoxItem FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public ListBoxItem HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public ListBoxItem VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public ListBoxItem TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public ListBoxItem Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public ListBoxItem Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new ListBoxItem Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as ListBoxItem;
        }


        public new ListBoxItem OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as ListBoxItem;
        }


        public new ListBoxItem UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as ListBoxItem;
        }


        public new ListBoxItem Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as ListBoxItem;
        }


        public new ListBoxItem DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as ListBoxItem;
        }


        public new ListBoxItem Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as ListBoxItem;
        }


        public new ListBoxItem Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as ListBoxItem;
        }


        public new ListBoxItem Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as ListBoxItem;
        }


        public new ListBoxItem LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as ListBoxItem;
        }


        public new ListBoxItem Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as ListBoxItem;
        }


        public new ListBoxItem MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as ListBoxItem;
        }


        public new ListBoxItem MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as ListBoxItem;
        }


        public new ListBoxItem Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as ListBoxItem;
        }


        public new ListBoxItem MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as ListBoxItem;
        }


        public new ListBoxItem MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as ListBoxItem;
        }


        public new ListBoxItem FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as ListBoxItem;
        }


        public new ListBoxItem Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as ListBoxItem;
        }


        public new ListBoxItem HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as ListBoxItem;
        }


        public new ListBoxItem VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as ListBoxItem;
        }


        public new ListBoxItem FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as ListBoxItem;
        }


        public new ListBoxItem Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as ListBoxItem;
        }


        public new ListBoxItem ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as ListBoxItem;
        }


        public new ListBoxItem ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as ListBoxItem;
        }


        public new ListBoxItem ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as ListBoxItem;
        }


        public new ListBoxItem AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as ListBoxItem;
        }


        public new ListBoxItem RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as ListBoxItem;
        }


        public new ListBoxItem RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as ListBoxItem;
        }


        public new ListBoxItem Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as ListBoxItem;
        }


        public new ListBoxItem OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as ListBoxItem;
        }


        public new ListBoxItem Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as ListBoxItem;
        }


        public new ListBoxItem Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as ListBoxItem;
        }


        public new ListBoxItem ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as ListBoxItem;
        }


        public new ListBoxItem SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as ListBoxItem;
        }


        public new ListBoxItem IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as ListBoxItem;
        }


        public new ListBoxItem Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as ListBoxItem;
        }

   }

    public partial class ListView : FrameworkElement {
        public new System.Windows.Controls.ListView C { get { return base.C as System.Windows.Controls.ListView; } set { base.C = value; } }


        public static ListView Make() {
            return new ListView();
        }

        public ListView() {
            C = new System.Windows.Controls.ListView();
        }

        public new ListView GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new ListView EventSelectionChanged( System.Windows.Controls.SelectionChangedEventHandler e ) {
            C.SelectionChanged += e;
            return this;
        }

        public new ListView EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new ListView EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new ListView EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new ListView EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new ListView EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new ListView EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new ListView EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new ListView EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new ListView EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new ListView EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new ListView EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new ListView EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new ListView EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new ListView EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new ListView EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new ListView EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new ListView EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new ListView EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new ListView EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new ListView EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new ListView EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new ListView EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new ListView EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new ListView EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new ListView EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new ListView EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new ListView EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new ListView EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new ListView EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new ListView EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new ListView EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new ListView EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new ListView EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new ListView EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new ListView EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new ListView EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new ListView EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new ListView EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new ListView EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new ListView EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new ListView EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new ListView EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new ListView EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new ListView EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new ListView EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new ListView EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new ListView EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new ListView EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new ListView EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new ListView EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new ListView EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new ListView EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new ListView EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new ListView EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new ListView EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new ListView EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new ListView EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new ListView EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new ListView EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new ListView EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new ListView EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new ListView EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new ListView EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new ListView EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new ListView EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new ListView EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new ListView EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new ListView EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new ListView EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new ListView EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new ListView EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new ListView EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new ListView EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new ListView EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new ListView EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new ListView EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new ListView EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new ListView EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new ListView EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new ListView EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new ListView EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new ListView EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new ListView EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new ListView EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new ListView EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new ListView EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new ListView EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new ListView EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new ListView EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new ListView EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new ListView EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new ListView EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new ListView EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new ListView EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new ListView EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new ListView EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new ListView EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new ListView EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new ListView EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new ListView EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new ListView EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new ListView EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new ListView EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new ListView EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new ListView EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new ListView EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new ListView EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new ListView EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new ListView EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new ListView EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public ListView View( Bind<System.Windows.Controls.ViewBase> bind ) {
            C.View = bind.V;
            return this;
        }



        public ListView SelectionMode( Bind<System.Windows.Controls.SelectionMode> bind ) {
            C.SelectionMode = bind.V;
            return this;
        }




        public ListView IsSynchronizedWithCurrentItem( Bind<bool?> bind ) {
            C.IsSynchronizedWithCurrentItem = bind.V;
            return this;
        }



        public ListView SelectedIndex( Bind<System.Int32> bind ) {
            C.SelectedIndex = bind.V;
            return this;
        }



        public ListView SelectedItem( Bind<System.Object> bind ) {
            C.SelectedItem = bind.V;
            return this;
        }



        public ListView SelectedValue( Bind<System.Object> bind ) {
            C.SelectedValue = bind.V;
            return this;
        }



        public ListView SelectedValuePath( Bind<System.String> bind ) {
            C.SelectedValuePath = bind.V;
            return this;
        }




        public ListView ItemsSource( params Bind<object>[] bind ) {
            System.Collections.Generic.List<object> source = new System.Collections.Generic.List<object>();
           foreach( var b in bind ) {
                if ( b.V is FrameworkElement )
                    source.Add( ( (FrameworkElement) b.V ).C );
                else
                    source.Add( b.V );
            }
            C.ItemsSource = source;
            return this;
        }





        public ListView DisplayMemberPath( Bind<System.String> bind ) {
            C.DisplayMemberPath = bind.V;
            return this;
        }



        public ListView ItemTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ItemTemplate = bind.V;
            return this;
        }



        public ListView ItemTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ItemTemplateSelector = bind.V;
            return this;
        }



        public ListView ItemStringFormat( Bind<System.String> bind ) {
            C.ItemStringFormat = bind.V;
            return this;
        }



        public ListView ItemBindingGroup( Bind<System.Windows.Data.BindingGroup> bind ) {
            C.ItemBindingGroup = bind.V;
            return this;
        }



        public ListView ItemContainerStyle( Bind<System.Windows.Style> bind ) {
            C.ItemContainerStyle = bind.V;
            return this;
        }



        public ListView ItemContainerStyleSelector( Bind<System.Windows.Controls.StyleSelector> bind ) {
            C.ItemContainerStyleSelector = bind.V;
            return this;
        }



        public ListView ItemsPanel( Bind<System.Windows.Controls.ItemsPanelTemplate> bind ) {
            C.ItemsPanel = bind.V;
            return this;
        }





        public ListView GroupStyleSelector( Bind<System.Windows.Controls.GroupStyleSelector> bind ) {
            C.GroupStyleSelector = bind.V;
            return this;
        }



        public ListView AlternationCount( Bind<System.Int32> bind ) {
            C.AlternationCount = bind.V;
            return this;
        }



        public ListView IsTextSearchEnabled( Bind<System.Boolean> bind ) {
            C.IsTextSearchEnabled = bind.V;
            return this;
        }



        public ListView IsTextSearchCaseSensitive( Bind<System.Boolean> bind ) {
            C.IsTextSearchCaseSensitive = bind.V;
            return this;
        }



        public ListView BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public ListView BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public ListView Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public ListView Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public ListView FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public ListView FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public ListView FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public ListView FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public ListView FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public ListView HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public ListView VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public ListView TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public ListView Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public ListView Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new ListView Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as ListView;
        }


        public new ListView OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as ListView;
        }


        public new ListView UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as ListView;
        }


        public new ListView Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as ListView;
        }


        public new ListView DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as ListView;
        }


        public new ListView Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as ListView;
        }


        public new ListView Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as ListView;
        }


        public new ListView Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as ListView;
        }


        public new ListView LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as ListView;
        }


        public new ListView Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as ListView;
        }


        public new ListView MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as ListView;
        }


        public new ListView MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as ListView;
        }


        public new ListView Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as ListView;
        }


        public new ListView MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as ListView;
        }


        public new ListView MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as ListView;
        }


        public new ListView FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as ListView;
        }


        public new ListView Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as ListView;
        }


        public new ListView HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as ListView;
        }


        public new ListView VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as ListView;
        }


        public new ListView FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as ListView;
        }


        public new ListView Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as ListView;
        }


        public new ListView ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as ListView;
        }


        public new ListView ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as ListView;
        }


        public new ListView ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as ListView;
        }


        public new ListView AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as ListView;
        }


        public new ListView RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as ListView;
        }


        public new ListView RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as ListView;
        }


        public new ListView Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as ListView;
        }


        public new ListView OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as ListView;
        }


        public new ListView Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as ListView;
        }


        public new ListView Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as ListView;
        }


        public new ListView ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as ListView;
        }


        public new ListView SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as ListView;
        }


        public new ListView IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as ListView;
        }


        public new ListView Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as ListView;
        }

   }

    public partial class ListViewItem : FrameworkElement {
        public new System.Windows.Controls.ListViewItem C { get { return base.C as System.Windows.Controls.ListViewItem; } set { base.C = value; } }


        public static ListViewItem Make() {
            return new ListViewItem();
        }

        public ListViewItem() {
            C = new System.Windows.Controls.ListViewItem();
        }

        public new ListViewItem GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new ListViewItem EventSelected( System.Windows.RoutedEventHandler e ) {
            C.Selected += e;
            return this;
        }

        public new ListViewItem EventUnselected( System.Windows.RoutedEventHandler e ) {
            C.Unselected += e;
            return this;
        }

        public new ListViewItem EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new ListViewItem EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new ListViewItem EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new ListViewItem EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new ListViewItem EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new ListViewItem EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new ListViewItem EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new ListViewItem EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new ListViewItem EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new ListViewItem EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new ListViewItem EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new ListViewItem EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new ListViewItem EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new ListViewItem EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new ListViewItem EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new ListViewItem EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new ListViewItem EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new ListViewItem EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new ListViewItem EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new ListViewItem EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new ListViewItem EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new ListViewItem EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new ListViewItem EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new ListViewItem EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new ListViewItem EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new ListViewItem EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new ListViewItem EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new ListViewItem EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new ListViewItem EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new ListViewItem EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new ListViewItem EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new ListViewItem EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new ListViewItem EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new ListViewItem EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new ListViewItem EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new ListViewItem EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new ListViewItem EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new ListViewItem EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new ListViewItem EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new ListViewItem EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new ListViewItem EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new ListViewItem EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new ListViewItem EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new ListViewItem EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new ListViewItem EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new ListViewItem EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new ListViewItem EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new ListViewItem EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new ListViewItem EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new ListViewItem EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new ListViewItem EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new ListViewItem EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new ListViewItem EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new ListViewItem EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new ListViewItem EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new ListViewItem EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new ListViewItem EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new ListViewItem EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new ListViewItem EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new ListViewItem EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new ListViewItem EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new ListViewItem EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new ListViewItem EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new ListViewItem EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new ListViewItem EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new ListViewItem EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new ListViewItem EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new ListViewItem EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new ListViewItem EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new ListViewItem EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new ListViewItem EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new ListViewItem EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new ListViewItem EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new ListViewItem EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new ListViewItem EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new ListViewItem EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new ListViewItem EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new ListViewItem EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new ListViewItem EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new ListViewItem EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new ListViewItem EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new ListViewItem EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new ListViewItem EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new ListViewItem EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new ListViewItem EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new ListViewItem EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new ListViewItem EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new ListViewItem EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new ListViewItem EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new ListViewItem EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new ListViewItem EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new ListViewItem EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new ListViewItem EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new ListViewItem EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new ListViewItem EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new ListViewItem EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new ListViewItem EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new ListViewItem EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new ListViewItem EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new ListViewItem EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new ListViewItem EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new ListViewItem EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new ListViewItem EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new ListViewItem EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new ListViewItem EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new ListViewItem EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new ListViewItem EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new ListViewItem EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new ListViewItem EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new ListViewItem EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public ListViewItem IsSelected( Bind<System.Boolean> bind ) {
            C.IsSelected = bind.V;
            return this;
        }



        public ListViewItem Content( Bind<System.Object> bind ) {
            if ( bind.V is FrameworkElement )
                C.Content = ((FrameworkElement) bind.V).C;
            else
                C.Content = bind.V;
            return this;
        }




        public ListViewItem ContentTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ContentTemplate = bind.V;
            return this;
        }



        public ListViewItem ContentTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ContentTemplateSelector = bind.V;
            return this;
        }



        public ListViewItem ContentStringFormat( Bind<System.String> bind ) {
            C.ContentStringFormat = bind.V;
            return this;
        }



        public ListViewItem BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public ListViewItem BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public ListViewItem Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public ListViewItem Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public ListViewItem FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public ListViewItem FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public ListViewItem FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public ListViewItem FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public ListViewItem FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public ListViewItem HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public ListViewItem VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public ListViewItem TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public ListViewItem Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public ListViewItem Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new ListViewItem Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as ListViewItem;
        }


        public new ListViewItem OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as ListViewItem;
        }


        public new ListViewItem UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as ListViewItem;
        }


        public new ListViewItem Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as ListViewItem;
        }


        public new ListViewItem DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as ListViewItem;
        }


        public new ListViewItem Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as ListViewItem;
        }


        public new ListViewItem Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as ListViewItem;
        }


        public new ListViewItem Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as ListViewItem;
        }


        public new ListViewItem LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as ListViewItem;
        }


        public new ListViewItem Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as ListViewItem;
        }


        public new ListViewItem MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as ListViewItem;
        }


        public new ListViewItem MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as ListViewItem;
        }


        public new ListViewItem Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as ListViewItem;
        }


        public new ListViewItem MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as ListViewItem;
        }


        public new ListViewItem MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as ListViewItem;
        }


        public new ListViewItem FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as ListViewItem;
        }


        public new ListViewItem Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as ListViewItem;
        }


        public new ListViewItem HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as ListViewItem;
        }


        public new ListViewItem VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as ListViewItem;
        }


        public new ListViewItem FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as ListViewItem;
        }


        public new ListViewItem Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as ListViewItem;
        }


        public new ListViewItem ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as ListViewItem;
        }


        public new ListViewItem ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as ListViewItem;
        }


        public new ListViewItem ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as ListViewItem;
        }


        public new ListViewItem AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as ListViewItem;
        }


        public new ListViewItem RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as ListViewItem;
        }


        public new ListViewItem RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as ListViewItem;
        }


        public new ListViewItem Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as ListViewItem;
        }


        public new ListViewItem OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as ListViewItem;
        }


        public new ListViewItem Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as ListViewItem;
        }


        public new ListViewItem Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as ListViewItem;
        }


        public new ListViewItem ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as ListViewItem;
        }


        public new ListViewItem SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as ListViewItem;
        }


        public new ListViewItem IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as ListViewItem;
        }


        public new ListViewItem Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as ListViewItem;
        }

   }

    public partial class MediaElement : FrameworkElement {
        public new System.Windows.Controls.MediaElement C { get { return base.C as System.Windows.Controls.MediaElement; } set { base.C = value; } }


        public static MediaElement Make() {
            return new MediaElement();
        }

        public MediaElement() {
            C = new System.Windows.Controls.MediaElement();
        }

        public new MediaElement GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new MediaElement EventMediaFailed( EventHandler<System.Windows.ExceptionRoutedEventArgs> e ) {
            C.MediaFailed += e;
            return this;
        }

        public new MediaElement EventMediaOpened( System.Windows.RoutedEventHandler e ) {
            C.MediaOpened += e;
            return this;
        }

        public new MediaElement EventBufferingStarted( System.Windows.RoutedEventHandler e ) {
            C.BufferingStarted += e;
            return this;
        }

        public new MediaElement EventBufferingEnded( System.Windows.RoutedEventHandler e ) {
            C.BufferingEnded += e;
            return this;
        }

        public new MediaElement EventScriptCommand( EventHandler<System.Windows.MediaScriptCommandRoutedEventArgs> e ) {
            C.ScriptCommand += e;
            return this;
        }

        public new MediaElement EventMediaEnded( System.Windows.RoutedEventHandler e ) {
            C.MediaEnded += e;
            return this;
        }

        public new MediaElement EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new MediaElement EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new MediaElement EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new MediaElement EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new MediaElement EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new MediaElement EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new MediaElement EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new MediaElement EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new MediaElement EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new MediaElement EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new MediaElement EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new MediaElement EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new MediaElement EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new MediaElement EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new MediaElement EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new MediaElement EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new MediaElement EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new MediaElement EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new MediaElement EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new MediaElement EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new MediaElement EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new MediaElement EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new MediaElement EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new MediaElement EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new MediaElement EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new MediaElement EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new MediaElement EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new MediaElement EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new MediaElement EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new MediaElement EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new MediaElement EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new MediaElement EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new MediaElement EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new MediaElement EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new MediaElement EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new MediaElement EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new MediaElement EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new MediaElement EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new MediaElement EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new MediaElement EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new MediaElement EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new MediaElement EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new MediaElement EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new MediaElement EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new MediaElement EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new MediaElement EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new MediaElement EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new MediaElement EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new MediaElement EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new MediaElement EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new MediaElement EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new MediaElement EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new MediaElement EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new MediaElement EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new MediaElement EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new MediaElement EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new MediaElement EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new MediaElement EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new MediaElement EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new MediaElement EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new MediaElement EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new MediaElement EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new MediaElement EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new MediaElement EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new MediaElement EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new MediaElement EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new MediaElement EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new MediaElement EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new MediaElement EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new MediaElement EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new MediaElement EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new MediaElement EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new MediaElement EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new MediaElement EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new MediaElement EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new MediaElement EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new MediaElement EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new MediaElement EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new MediaElement EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new MediaElement EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new MediaElement EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new MediaElement EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new MediaElement EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new MediaElement EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new MediaElement EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new MediaElement EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new MediaElement EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new MediaElement EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new MediaElement EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new MediaElement EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new MediaElement EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new MediaElement EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new MediaElement EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new MediaElement EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new MediaElement EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new MediaElement EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new MediaElement EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new MediaElement EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new MediaElement EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new MediaElement EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new MediaElement EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new MediaElement EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new MediaElement EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new MediaElement EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new MediaElement EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new MediaElement EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new MediaElement EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new MediaElement EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public MediaElement Source( Bind<System.Uri> bind ) {
            C.Source = bind.V;
            return this;
        }



        public MediaElement Clock( Bind<System.Windows.Media.MediaClock> bind ) {
            C.Clock = bind.V;
            return this;
        }



        public MediaElement Stretch( Bind<System.Windows.Media.Stretch> bind ) {
            C.Stretch = bind.V;
            return this;
        }



        public MediaElement StretchDirection( Bind<System.Windows.Controls.StretchDirection> bind ) {
            C.StretchDirection = bind.V;
            return this;
        }



        public MediaElement Volume( Bind<System.Double> bind ) {
            C.Volume = bind.V;
            return this;
        }



        public MediaElement Balance( Bind<System.Double> bind ) {
            C.Balance = bind.V;
            return this;
        }



        public MediaElement IsMuted( Bind<System.Boolean> bind ) {
            C.IsMuted = bind.V;
            return this;
        }



        public MediaElement ScrubbingEnabled( Bind<System.Boolean> bind ) {
            C.ScrubbingEnabled = bind.V;
            return this;
        }



        public MediaElement UnloadedBehavior( Bind<System.Windows.Controls.MediaState> bind ) {
            C.UnloadedBehavior = bind.V;
            return this;
        }



        public MediaElement LoadedBehavior( Bind<System.Windows.Controls.MediaState> bind ) {
            C.LoadedBehavior = bind.V;
            return this;
        }












        public MediaElement Position( Bind<System.TimeSpan> bind ) {
            C.Position = bind.V;
            return this;
        }



        public MediaElement SpeedRatio( Bind<System.Double> bind ) {
            C.SpeedRatio = bind.V;
            return this;
        }



        public new MediaElement Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as MediaElement;
        }


        public new MediaElement OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as MediaElement;
        }


        public new MediaElement UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as MediaElement;
        }


        public new MediaElement Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as MediaElement;
        }


        public new MediaElement DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as MediaElement;
        }


        public new MediaElement Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as MediaElement;
        }


        public new MediaElement Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as MediaElement;
        }


        public new MediaElement Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as MediaElement;
        }


        public new MediaElement LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as MediaElement;
        }


        public new MediaElement Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as MediaElement;
        }


        public new MediaElement MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as MediaElement;
        }


        public new MediaElement MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as MediaElement;
        }


        public new MediaElement Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as MediaElement;
        }


        public new MediaElement MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as MediaElement;
        }


        public new MediaElement MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as MediaElement;
        }


        public new MediaElement FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as MediaElement;
        }


        public new MediaElement Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as MediaElement;
        }


        public new MediaElement HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as MediaElement;
        }


        public new MediaElement VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as MediaElement;
        }


        public new MediaElement FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as MediaElement;
        }


        public new MediaElement Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as MediaElement;
        }


        public new MediaElement ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as MediaElement;
        }


        public new MediaElement ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as MediaElement;
        }


        public new MediaElement ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as MediaElement;
        }


        public new MediaElement AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as MediaElement;
        }


        public new MediaElement RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as MediaElement;
        }


        public new MediaElement RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as MediaElement;
        }


        public new MediaElement Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as MediaElement;
        }


        public new MediaElement OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as MediaElement;
        }


        public new MediaElement Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as MediaElement;
        }


        public new MediaElement Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as MediaElement;
        }


        public new MediaElement ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as MediaElement;
        }


        public new MediaElement SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as MediaElement;
        }


        public new MediaElement IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as MediaElement;
        }


        public new MediaElement Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as MediaElement;
        }

   }

    public partial class Menu : FrameworkElement {
        public new System.Windows.Controls.Menu C { get { return base.C as System.Windows.Controls.Menu; } set { base.C = value; } }


        public static Menu Make() {
            return new Menu();
        }

        public Menu() {
            C = new System.Windows.Controls.Menu();
        }

        public new Menu GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new Menu EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new Menu EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new Menu EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Menu EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Menu EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Menu EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Menu EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Menu EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Menu EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Menu EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Menu EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Menu EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Menu EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Menu EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Menu EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Menu EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Menu EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Menu EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Menu EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Menu EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Menu EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Menu EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Menu EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Menu EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Menu EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Menu EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Menu EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Menu EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Menu EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Menu EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Menu EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Menu EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Menu EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Menu EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Menu EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Menu EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Menu EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Menu EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Menu EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Menu EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Menu EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Menu EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Menu EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Menu EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Menu EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Menu EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Menu EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Menu EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Menu EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Menu EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Menu EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Menu EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Menu EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Menu EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Menu EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Menu EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Menu EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Menu EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Menu EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Menu EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Menu EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Menu EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Menu EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Menu EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Menu EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Menu EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Menu EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Menu EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Menu EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Menu EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Menu EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Menu EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Menu EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Menu EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Menu EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Menu EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Menu EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Menu EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Menu EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Menu EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Menu EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Menu EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Menu EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Menu EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Menu EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Menu EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Menu EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Menu EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Menu EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Menu EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Menu EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Menu EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Menu EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Menu EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Menu EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Menu EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Menu EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Menu EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Menu EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Menu EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Menu EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Menu EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Menu EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Menu EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Menu EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Menu EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Menu EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Menu EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Menu EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Menu EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public Menu IsMainMenu( Bind<System.Boolean> bind ) {
            C.IsMainMenu = bind.V;
            return this;
        }




        public Menu ItemsSource( params Bind<object>[] bind ) {
            System.Collections.Generic.List<object> source = new System.Collections.Generic.List<object>();
           foreach( var b in bind ) {
                if ( b.V is FrameworkElement )
                    source.Add( ( (FrameworkElement) b.V ).C );
                else
                    source.Add( b.V );
            }
            C.ItemsSource = source;
            return this;
        }





        public Menu DisplayMemberPath( Bind<System.String> bind ) {
            C.DisplayMemberPath = bind.V;
            return this;
        }



        public Menu ItemTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ItemTemplate = bind.V;
            return this;
        }



        public Menu ItemTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ItemTemplateSelector = bind.V;
            return this;
        }



        public Menu ItemStringFormat( Bind<System.String> bind ) {
            C.ItemStringFormat = bind.V;
            return this;
        }



        public Menu ItemBindingGroup( Bind<System.Windows.Data.BindingGroup> bind ) {
            C.ItemBindingGroup = bind.V;
            return this;
        }



        public Menu ItemContainerStyle( Bind<System.Windows.Style> bind ) {
            C.ItemContainerStyle = bind.V;
            return this;
        }



        public Menu ItemContainerStyleSelector( Bind<System.Windows.Controls.StyleSelector> bind ) {
            C.ItemContainerStyleSelector = bind.V;
            return this;
        }



        public Menu ItemsPanel( Bind<System.Windows.Controls.ItemsPanelTemplate> bind ) {
            C.ItemsPanel = bind.V;
            return this;
        }





        public Menu GroupStyleSelector( Bind<System.Windows.Controls.GroupStyleSelector> bind ) {
            C.GroupStyleSelector = bind.V;
            return this;
        }



        public Menu AlternationCount( Bind<System.Int32> bind ) {
            C.AlternationCount = bind.V;
            return this;
        }



        public Menu IsTextSearchEnabled( Bind<System.Boolean> bind ) {
            C.IsTextSearchEnabled = bind.V;
            return this;
        }



        public Menu IsTextSearchCaseSensitive( Bind<System.Boolean> bind ) {
            C.IsTextSearchCaseSensitive = bind.V;
            return this;
        }



        public Menu BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public Menu BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public Menu Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public Menu Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public Menu FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public Menu FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public Menu FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public Menu FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public Menu FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public Menu HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public Menu VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public Menu TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public Menu Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public Menu Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new Menu Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Menu;
        }


        public new Menu OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Menu;
        }


        public new Menu UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Menu;
        }


        public new Menu Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Menu;
        }


        public new Menu DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Menu;
        }


        public new Menu Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Menu;
        }


        public new Menu Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Menu;
        }


        public new Menu Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Menu;
        }


        public new Menu LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Menu;
        }


        public new Menu Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Menu;
        }


        public new Menu MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Menu;
        }


        public new Menu MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Menu;
        }


        public new Menu Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Menu;
        }


        public new Menu MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Menu;
        }


        public new Menu MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Menu;
        }


        public new Menu FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Menu;
        }


        public new Menu Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Menu;
        }


        public new Menu HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Menu;
        }


        public new Menu VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Menu;
        }


        public new Menu FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Menu;
        }


        public new Menu Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Menu;
        }


        public new Menu ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Menu;
        }


        public new Menu ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Menu;
        }


        public new Menu ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Menu;
        }


        public new Menu AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Menu;
        }


        public new Menu RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Menu;
        }


        public new Menu RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Menu;
        }


        public new Menu Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Menu;
        }


        public new Menu OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Menu;
        }


        public new Menu Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Menu;
        }


        public new Menu Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Menu;
        }


        public new Menu ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Menu;
        }


        public new Menu SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Menu;
        }


        public new Menu IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Menu;
        }


        public new Menu Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Menu;
        }

   }

    public partial class MenuItem : FrameworkElement {
        public new System.Windows.Controls.MenuItem C { get { return base.C as System.Windows.Controls.MenuItem; } set { base.C = value; } }


        public static MenuItem Make() {
            return new MenuItem();
        }

        public MenuItem() {
            C = new System.Windows.Controls.MenuItem();
        }

        public new MenuItem GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new MenuItem EventClick( System.Windows.RoutedEventHandler e ) {
            C.Click += e;
            return this;
        }

        public new MenuItem EventChecked( System.Windows.RoutedEventHandler e ) {
            C.Checked += e;
            return this;
        }

        public new MenuItem EventUnchecked( System.Windows.RoutedEventHandler e ) {
            C.Unchecked += e;
            return this;
        }

        public new MenuItem EventSubmenuOpened( System.Windows.RoutedEventHandler e ) {
            C.SubmenuOpened += e;
            return this;
        }

        public new MenuItem EventSubmenuClosed( System.Windows.RoutedEventHandler e ) {
            C.SubmenuClosed += e;
            return this;
        }

        public new MenuItem EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new MenuItem EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new MenuItem EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new MenuItem EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new MenuItem EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new MenuItem EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new MenuItem EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new MenuItem EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new MenuItem EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new MenuItem EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new MenuItem EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new MenuItem EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new MenuItem EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new MenuItem EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new MenuItem EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new MenuItem EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new MenuItem EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new MenuItem EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new MenuItem EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new MenuItem EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new MenuItem EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new MenuItem EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new MenuItem EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new MenuItem EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new MenuItem EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new MenuItem EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new MenuItem EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new MenuItem EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new MenuItem EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new MenuItem EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new MenuItem EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new MenuItem EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new MenuItem EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new MenuItem EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new MenuItem EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new MenuItem EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new MenuItem EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new MenuItem EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new MenuItem EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new MenuItem EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new MenuItem EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new MenuItem EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new MenuItem EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new MenuItem EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new MenuItem EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new MenuItem EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new MenuItem EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new MenuItem EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new MenuItem EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new MenuItem EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new MenuItem EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new MenuItem EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new MenuItem EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new MenuItem EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new MenuItem EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new MenuItem EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new MenuItem EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new MenuItem EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new MenuItem EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new MenuItem EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new MenuItem EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new MenuItem EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new MenuItem EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new MenuItem EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new MenuItem EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new MenuItem EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new MenuItem EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new MenuItem EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new MenuItem EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new MenuItem EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new MenuItem EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new MenuItem EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new MenuItem EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new MenuItem EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new MenuItem EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new MenuItem EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new MenuItem EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new MenuItem EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new MenuItem EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new MenuItem EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new MenuItem EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new MenuItem EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new MenuItem EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new MenuItem EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new MenuItem EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new MenuItem EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new MenuItem EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new MenuItem EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new MenuItem EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new MenuItem EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new MenuItem EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new MenuItem EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new MenuItem EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new MenuItem EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new MenuItem EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new MenuItem EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new MenuItem EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new MenuItem EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new MenuItem EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new MenuItem EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new MenuItem EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new MenuItem EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new MenuItem EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new MenuItem EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new MenuItem EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new MenuItem EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new MenuItem EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new MenuItem EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new MenuItem EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new MenuItem EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }





        public MenuItem Command( Bind<System.Windows.Input.ICommand> bind ) {
            C.Command = bind.V;
            return this;
        }



        public MenuItem CommandParameter( Bind<System.Object> bind ) {
            C.CommandParameter = bind.V;
            return this;
        }



        public MenuItem CommandTarget( Bind<System.Windows.IInputElement> bind ) {
            C.CommandTarget = bind.V;
            return this;
        }



        public MenuItem IsSubmenuOpen( Bind<System.Boolean> bind ) {
            C.IsSubmenuOpen = bind.V;
            return this;
        }




        public MenuItem IsCheckable( Bind<System.Boolean> bind ) {
            C.IsCheckable = bind.V;
            return this;
        }



        public MenuItem IsChecked( Bind<System.Boolean> bind ) {
            C.IsChecked = bind.V;
            return this;
        }



        public MenuItem StaysOpenOnClick( Bind<System.Boolean> bind ) {
            C.StaysOpenOnClick = bind.V;
            return this;
        }



        public MenuItem InputGestureText( Bind<System.String> bind ) {
            C.InputGestureText = bind.V;
            return this;
        }



        public MenuItem Icon( Bind<System.Object> bind ) {
            C.Icon = bind.V;
            return this;
        }




        public MenuItem Header( Bind<System.Object> bind ) {
            C.Header = bind.V;
            return this;
        }




        public MenuItem HeaderTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.HeaderTemplate = bind.V;
            return this;
        }



        public MenuItem HeaderTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.HeaderTemplateSelector = bind.V;
            return this;
        }



        public MenuItem HeaderStringFormat( Bind<System.String> bind ) {
            C.HeaderStringFormat = bind.V;
            return this;
        }




        public MenuItem ItemsSource( params Bind<object>[] bind ) {
            System.Collections.Generic.List<object> source = new System.Collections.Generic.List<object>();
           foreach( var b in bind ) {
                if ( b.V is FrameworkElement )
                    source.Add( ( (FrameworkElement) b.V ).C );
                else
                    source.Add( b.V );
            }
            C.ItemsSource = source;
            return this;
        }





        public MenuItem DisplayMemberPath( Bind<System.String> bind ) {
            C.DisplayMemberPath = bind.V;
            return this;
        }



        public MenuItem ItemTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ItemTemplate = bind.V;
            return this;
        }



        public MenuItem ItemTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ItemTemplateSelector = bind.V;
            return this;
        }



        public MenuItem ItemStringFormat( Bind<System.String> bind ) {
            C.ItemStringFormat = bind.V;
            return this;
        }



        public MenuItem ItemBindingGroup( Bind<System.Windows.Data.BindingGroup> bind ) {
            C.ItemBindingGroup = bind.V;
            return this;
        }



        public MenuItem ItemContainerStyle( Bind<System.Windows.Style> bind ) {
            C.ItemContainerStyle = bind.V;
            return this;
        }



        public MenuItem ItemContainerStyleSelector( Bind<System.Windows.Controls.StyleSelector> bind ) {
            C.ItemContainerStyleSelector = bind.V;
            return this;
        }



        public MenuItem ItemsPanel( Bind<System.Windows.Controls.ItemsPanelTemplate> bind ) {
            C.ItemsPanel = bind.V;
            return this;
        }





        public MenuItem GroupStyleSelector( Bind<System.Windows.Controls.GroupStyleSelector> bind ) {
            C.GroupStyleSelector = bind.V;
            return this;
        }



        public MenuItem AlternationCount( Bind<System.Int32> bind ) {
            C.AlternationCount = bind.V;
            return this;
        }



        public MenuItem IsTextSearchEnabled( Bind<System.Boolean> bind ) {
            C.IsTextSearchEnabled = bind.V;
            return this;
        }



        public MenuItem IsTextSearchCaseSensitive( Bind<System.Boolean> bind ) {
            C.IsTextSearchCaseSensitive = bind.V;
            return this;
        }



        public MenuItem BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public MenuItem BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public MenuItem Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public MenuItem Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public MenuItem FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public MenuItem FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public MenuItem FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public MenuItem FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public MenuItem FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public MenuItem HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public MenuItem VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public MenuItem TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public MenuItem Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public MenuItem Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new MenuItem Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as MenuItem;
        }


        public new MenuItem OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as MenuItem;
        }


        public new MenuItem UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as MenuItem;
        }


        public new MenuItem Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as MenuItem;
        }


        public new MenuItem DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as MenuItem;
        }


        public new MenuItem Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as MenuItem;
        }


        public new MenuItem Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as MenuItem;
        }


        public new MenuItem Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as MenuItem;
        }


        public new MenuItem LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as MenuItem;
        }


        public new MenuItem Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as MenuItem;
        }


        public new MenuItem MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as MenuItem;
        }


        public new MenuItem MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as MenuItem;
        }


        public new MenuItem Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as MenuItem;
        }


        public new MenuItem MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as MenuItem;
        }


        public new MenuItem MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as MenuItem;
        }


        public new MenuItem FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as MenuItem;
        }


        public new MenuItem Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as MenuItem;
        }


        public new MenuItem HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as MenuItem;
        }


        public new MenuItem VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as MenuItem;
        }


        public new MenuItem FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as MenuItem;
        }


        public new MenuItem Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as MenuItem;
        }


        public new MenuItem ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as MenuItem;
        }


        public new MenuItem ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as MenuItem;
        }


        public new MenuItem ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as MenuItem;
        }


        public new MenuItem AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as MenuItem;
        }


        public new MenuItem RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as MenuItem;
        }


        public new MenuItem RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as MenuItem;
        }


        public new MenuItem Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as MenuItem;
        }


        public new MenuItem OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as MenuItem;
        }


        public new MenuItem Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as MenuItem;
        }


        public new MenuItem Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as MenuItem;
        }


        public new MenuItem ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as MenuItem;
        }


        public new MenuItem SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as MenuItem;
        }


        public new MenuItem IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as MenuItem;
        }


        public new MenuItem Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as MenuItem;
        }

   }

    public partial class PasswordBox : FrameworkElement {
        public new System.Windows.Controls.PasswordBox C { get { return base.C as System.Windows.Controls.PasswordBox; } set { base.C = value; } }


        public static PasswordBox Make() {
            return new PasswordBox();
        }

        public PasswordBox() {
            C = new System.Windows.Controls.PasswordBox();
        }

        public new PasswordBox GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new PasswordBox EventPasswordChanged( System.Windows.RoutedEventHandler e ) {
            C.PasswordChanged += e;
            return this;
        }

        public new PasswordBox EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new PasswordBox EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new PasswordBox EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new PasswordBox EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new PasswordBox EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new PasswordBox EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new PasswordBox EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new PasswordBox EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new PasswordBox EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new PasswordBox EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new PasswordBox EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new PasswordBox EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new PasswordBox EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new PasswordBox EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new PasswordBox EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new PasswordBox EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new PasswordBox EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new PasswordBox EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new PasswordBox EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new PasswordBox EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new PasswordBox EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new PasswordBox EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new PasswordBox EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new PasswordBox EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new PasswordBox EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new PasswordBox EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new PasswordBox EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new PasswordBox EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new PasswordBox EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new PasswordBox EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new PasswordBox EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new PasswordBox EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new PasswordBox EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new PasswordBox EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new PasswordBox EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new PasswordBox EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new PasswordBox EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new PasswordBox EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new PasswordBox EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new PasswordBox EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new PasswordBox EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new PasswordBox EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new PasswordBox EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new PasswordBox EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new PasswordBox EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new PasswordBox EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new PasswordBox EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new PasswordBox EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new PasswordBox EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new PasswordBox EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new PasswordBox EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new PasswordBox EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new PasswordBox EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new PasswordBox EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new PasswordBox EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new PasswordBox EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new PasswordBox EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new PasswordBox EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new PasswordBox EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new PasswordBox EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new PasswordBox EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new PasswordBox EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new PasswordBox EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new PasswordBox EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new PasswordBox EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new PasswordBox EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new PasswordBox EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new PasswordBox EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new PasswordBox EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new PasswordBox EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new PasswordBox EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new PasswordBox EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new PasswordBox EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new PasswordBox EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new PasswordBox EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new PasswordBox EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new PasswordBox EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new PasswordBox EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new PasswordBox EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new PasswordBox EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new PasswordBox EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new PasswordBox EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new PasswordBox EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new PasswordBox EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new PasswordBox EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new PasswordBox EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new PasswordBox EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new PasswordBox EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new PasswordBox EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new PasswordBox EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new PasswordBox EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new PasswordBox EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new PasswordBox EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new PasswordBox EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new PasswordBox EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new PasswordBox EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new PasswordBox EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new PasswordBox EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new PasswordBox EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new PasswordBox EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new PasswordBox EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new PasswordBox EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new PasswordBox EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new PasswordBox EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new PasswordBox EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new PasswordBox EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new PasswordBox EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new PasswordBox EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new PasswordBox EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new PasswordBox EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public PasswordBox Password( Bind<System.String> bind ) {
            C.Password = bind.V;
            return this;
        }




        public PasswordBox PasswordChar( Bind<System.Char> bind ) {
            C.PasswordChar = bind.V;
            return this;
        }



        public PasswordBox MaxLength( Bind<System.Int32> bind ) {
            C.MaxLength = bind.V;
            return this;
        }



        public PasswordBox SelectionBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.SelectionBrush = bind.V;
            return this;
        }



        public PasswordBox SelectionOpacity( Bind<System.Double> bind ) {
            C.SelectionOpacity = bind.V;
            return this;
        }



        public PasswordBox CaretBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.CaretBrush = bind.V;
            return this;
        }



        public PasswordBox BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public PasswordBox BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public PasswordBox Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public PasswordBox Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public PasswordBox FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public PasswordBox FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public PasswordBox FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public PasswordBox FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public PasswordBox FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public PasswordBox HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public PasswordBox VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public PasswordBox TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public PasswordBox Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public PasswordBox Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new PasswordBox Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as PasswordBox;
        }


        public new PasswordBox OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as PasswordBox;
        }


        public new PasswordBox UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as PasswordBox;
        }


        public new PasswordBox Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as PasswordBox;
        }


        public new PasswordBox DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as PasswordBox;
        }


        public new PasswordBox Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as PasswordBox;
        }


        public new PasswordBox Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as PasswordBox;
        }


        public new PasswordBox Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as PasswordBox;
        }


        public new PasswordBox LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as PasswordBox;
        }


        public new PasswordBox Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as PasswordBox;
        }


        public new PasswordBox MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as PasswordBox;
        }


        public new PasswordBox MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as PasswordBox;
        }


        public new PasswordBox Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as PasswordBox;
        }


        public new PasswordBox MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as PasswordBox;
        }


        public new PasswordBox MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as PasswordBox;
        }


        public new PasswordBox FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as PasswordBox;
        }


        public new PasswordBox Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as PasswordBox;
        }


        public new PasswordBox HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as PasswordBox;
        }


        public new PasswordBox VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as PasswordBox;
        }


        public new PasswordBox FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as PasswordBox;
        }


        public new PasswordBox Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as PasswordBox;
        }


        public new PasswordBox ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as PasswordBox;
        }


        public new PasswordBox ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as PasswordBox;
        }


        public new PasswordBox ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as PasswordBox;
        }


        public new PasswordBox AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as PasswordBox;
        }


        public new PasswordBox RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as PasswordBox;
        }


        public new PasswordBox RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as PasswordBox;
        }


        public new PasswordBox Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as PasswordBox;
        }


        public new PasswordBox OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as PasswordBox;
        }


        public new PasswordBox Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as PasswordBox;
        }


        public new PasswordBox Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as PasswordBox;
        }


        public new PasswordBox ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as PasswordBox;
        }


        public new PasswordBox SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as PasswordBox;
        }


        public new PasswordBox IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as PasswordBox;
        }


        public new PasswordBox Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as PasswordBox;
        }

   }

    public partial class ProgressBar : FrameworkElement {
        public new System.Windows.Controls.ProgressBar C { get { return base.C as System.Windows.Controls.ProgressBar; } set { base.C = value; } }


        public static ProgressBar Make() {
            return new ProgressBar();
        }

        public ProgressBar() {
            C = new System.Windows.Controls.ProgressBar();
        }

        public new ProgressBar GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new ProgressBar EventValueChanged( System.Windows.RoutedPropertyChangedEventHandler<System.Double> e ) {
            C.ValueChanged += e;
            return this;
        }

        public new ProgressBar EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new ProgressBar EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new ProgressBar EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new ProgressBar EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new ProgressBar EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new ProgressBar EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new ProgressBar EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new ProgressBar EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new ProgressBar EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new ProgressBar EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new ProgressBar EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new ProgressBar EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new ProgressBar EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new ProgressBar EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new ProgressBar EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new ProgressBar EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new ProgressBar EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new ProgressBar EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new ProgressBar EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new ProgressBar EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new ProgressBar EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new ProgressBar EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new ProgressBar EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new ProgressBar EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new ProgressBar EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new ProgressBar EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new ProgressBar EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new ProgressBar EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new ProgressBar EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new ProgressBar EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new ProgressBar EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new ProgressBar EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new ProgressBar EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new ProgressBar EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new ProgressBar EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new ProgressBar EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new ProgressBar EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new ProgressBar EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new ProgressBar EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new ProgressBar EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new ProgressBar EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new ProgressBar EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new ProgressBar EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new ProgressBar EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new ProgressBar EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new ProgressBar EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new ProgressBar EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new ProgressBar EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new ProgressBar EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new ProgressBar EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new ProgressBar EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new ProgressBar EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new ProgressBar EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new ProgressBar EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new ProgressBar EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new ProgressBar EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new ProgressBar EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new ProgressBar EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new ProgressBar EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new ProgressBar EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new ProgressBar EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new ProgressBar EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new ProgressBar EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new ProgressBar EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new ProgressBar EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new ProgressBar EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new ProgressBar EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new ProgressBar EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new ProgressBar EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new ProgressBar EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new ProgressBar EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new ProgressBar EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new ProgressBar EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new ProgressBar EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new ProgressBar EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new ProgressBar EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new ProgressBar EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new ProgressBar EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new ProgressBar EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new ProgressBar EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new ProgressBar EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new ProgressBar EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new ProgressBar EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new ProgressBar EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new ProgressBar EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new ProgressBar EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new ProgressBar EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new ProgressBar EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new ProgressBar EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new ProgressBar EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new ProgressBar EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new ProgressBar EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new ProgressBar EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new ProgressBar EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new ProgressBar EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new ProgressBar EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new ProgressBar EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new ProgressBar EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new ProgressBar EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new ProgressBar EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new ProgressBar EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new ProgressBar EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new ProgressBar EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new ProgressBar EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new ProgressBar EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new ProgressBar EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new ProgressBar EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new ProgressBar EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new ProgressBar EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new ProgressBar EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public ProgressBar IsIndeterminate( Bind<System.Boolean> bind ) {
            C.IsIndeterminate = bind.V;
            return this;
        }



        public ProgressBar Orientation( Bind<System.Windows.Controls.Orientation> bind ) {
            C.Orientation = bind.V;
            return this;
        }



        public ProgressBar Minimum( Bind<System.Double> bind ) {
            C.Minimum = bind.V;
            return this;
        }



        public ProgressBar Maximum( Bind<System.Double> bind ) {
            C.Maximum = bind.V;
            return this;
        }



        public ProgressBar Value( Bind<System.Double> bind ) {
            C.Value = bind.V;
            return this;
        }



        public ProgressBar LargeChange( Bind<System.Double> bind ) {
            C.LargeChange = bind.V;
            return this;
        }



        public ProgressBar SmallChange( Bind<System.Double> bind ) {
            C.SmallChange = bind.V;
            return this;
        }



        public ProgressBar BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public ProgressBar BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public ProgressBar Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public ProgressBar Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public ProgressBar FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public ProgressBar FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public ProgressBar FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public ProgressBar FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public ProgressBar FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public ProgressBar HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public ProgressBar VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public ProgressBar TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public ProgressBar Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public ProgressBar Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new ProgressBar Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as ProgressBar;
        }


        public new ProgressBar OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as ProgressBar;
        }


        public new ProgressBar UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as ProgressBar;
        }


        public new ProgressBar Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as ProgressBar;
        }


        public new ProgressBar DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as ProgressBar;
        }


        public new ProgressBar Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as ProgressBar;
        }


        public new ProgressBar Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as ProgressBar;
        }


        public new ProgressBar Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as ProgressBar;
        }


        public new ProgressBar LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as ProgressBar;
        }


        public new ProgressBar Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as ProgressBar;
        }


        public new ProgressBar MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as ProgressBar;
        }


        public new ProgressBar MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as ProgressBar;
        }


        public new ProgressBar Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as ProgressBar;
        }


        public new ProgressBar MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as ProgressBar;
        }


        public new ProgressBar MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as ProgressBar;
        }


        public new ProgressBar FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as ProgressBar;
        }


        public new ProgressBar Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as ProgressBar;
        }


        public new ProgressBar HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as ProgressBar;
        }


        public new ProgressBar VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as ProgressBar;
        }


        public new ProgressBar FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as ProgressBar;
        }


        public new ProgressBar Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as ProgressBar;
        }


        public new ProgressBar ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as ProgressBar;
        }


        public new ProgressBar ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as ProgressBar;
        }


        public new ProgressBar ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as ProgressBar;
        }


        public new ProgressBar AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as ProgressBar;
        }


        public new ProgressBar RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as ProgressBar;
        }


        public new ProgressBar RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as ProgressBar;
        }


        public new ProgressBar Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as ProgressBar;
        }


        public new ProgressBar OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as ProgressBar;
        }


        public new ProgressBar Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as ProgressBar;
        }


        public new ProgressBar Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as ProgressBar;
        }


        public new ProgressBar ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as ProgressBar;
        }


        public new ProgressBar SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as ProgressBar;
        }


        public new ProgressBar IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as ProgressBar;
        }


        public new ProgressBar Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as ProgressBar;
        }

   }

    public partial class RadioButton : FrameworkElement {
        public new System.Windows.Controls.RadioButton C { get { return base.C as System.Windows.Controls.RadioButton; } set { base.C = value; } }


        public static RadioButton Make() {
            return new RadioButton();
        }

        public RadioButton() {
            C = new System.Windows.Controls.RadioButton();
        }

        public new RadioButton GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new RadioButton EventChecked( System.Windows.RoutedEventHandler e ) {
            C.Checked += e;
            return this;
        }

        public new RadioButton EventUnchecked( System.Windows.RoutedEventHandler e ) {
            C.Unchecked += e;
            return this;
        }

        public new RadioButton EventIndeterminate( System.Windows.RoutedEventHandler e ) {
            C.Indeterminate += e;
            return this;
        }

        public new RadioButton EventClick( System.Windows.RoutedEventHandler e ) {
            C.Click += e;
            return this;
        }

        public new RadioButton EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new RadioButton EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new RadioButton EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new RadioButton EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new RadioButton EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new RadioButton EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new RadioButton EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new RadioButton EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new RadioButton EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new RadioButton EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new RadioButton EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new RadioButton EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new RadioButton EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new RadioButton EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new RadioButton EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new RadioButton EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new RadioButton EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new RadioButton EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new RadioButton EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new RadioButton EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new RadioButton EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new RadioButton EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new RadioButton EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new RadioButton EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new RadioButton EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new RadioButton EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new RadioButton EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new RadioButton EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new RadioButton EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new RadioButton EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new RadioButton EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new RadioButton EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new RadioButton EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new RadioButton EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new RadioButton EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new RadioButton EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new RadioButton EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new RadioButton EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new RadioButton EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new RadioButton EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new RadioButton EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new RadioButton EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new RadioButton EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new RadioButton EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new RadioButton EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new RadioButton EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new RadioButton EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new RadioButton EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new RadioButton EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new RadioButton EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new RadioButton EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new RadioButton EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new RadioButton EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new RadioButton EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new RadioButton EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new RadioButton EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new RadioButton EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new RadioButton EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new RadioButton EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new RadioButton EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new RadioButton EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new RadioButton EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new RadioButton EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new RadioButton EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new RadioButton EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new RadioButton EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new RadioButton EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new RadioButton EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new RadioButton EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new RadioButton EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new RadioButton EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new RadioButton EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new RadioButton EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new RadioButton EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new RadioButton EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new RadioButton EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new RadioButton EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new RadioButton EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new RadioButton EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new RadioButton EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new RadioButton EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new RadioButton EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new RadioButton EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new RadioButton EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new RadioButton EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new RadioButton EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new RadioButton EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new RadioButton EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new RadioButton EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new RadioButton EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new RadioButton EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new RadioButton EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new RadioButton EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new RadioButton EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new RadioButton EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new RadioButton EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new RadioButton EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new RadioButton EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new RadioButton EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new RadioButton EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new RadioButton EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new RadioButton EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new RadioButton EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new RadioButton EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new RadioButton EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new RadioButton EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new RadioButton EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new RadioButton EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new RadioButton EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new RadioButton EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public RadioButton GroupName( Bind<System.String> bind ) {
            C.GroupName = bind.V;
            return this;
        }



        public RadioButton IsChecked( Bind<bool?> bind ) {
            C.IsChecked = bind.V;
            return this;
        }



        public RadioButton IsThreeState( Bind<System.Boolean> bind ) {
            C.IsThreeState = bind.V;
            return this;
        }



        public RadioButton Command( Bind<System.Windows.Input.ICommand> bind ) {
            C.Command = bind.V;
            return this;
        }



        public RadioButton CommandParameter( Bind<System.Object> bind ) {
            C.CommandParameter = bind.V;
            return this;
        }



        public RadioButton CommandTarget( Bind<System.Windows.IInputElement> bind ) {
            C.CommandTarget = bind.V;
            return this;
        }



        public RadioButton ClickMode( Bind<System.Windows.Controls.ClickMode> bind ) {
            C.ClickMode = bind.V;
            return this;
        }



        public RadioButton Content( Bind<System.Object> bind ) {
            if ( bind.V is FrameworkElement )
                C.Content = ((FrameworkElement) bind.V).C;
            else
                C.Content = bind.V;
            return this;
        }




        public RadioButton ContentTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ContentTemplate = bind.V;
            return this;
        }



        public RadioButton ContentTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ContentTemplateSelector = bind.V;
            return this;
        }



        public RadioButton ContentStringFormat( Bind<System.String> bind ) {
            C.ContentStringFormat = bind.V;
            return this;
        }



        public RadioButton BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public RadioButton BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public RadioButton Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public RadioButton Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public RadioButton FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public RadioButton FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public RadioButton FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public RadioButton FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public RadioButton FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public RadioButton HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public RadioButton VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public RadioButton TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public RadioButton Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public RadioButton Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new RadioButton Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as RadioButton;
        }


        public new RadioButton OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as RadioButton;
        }


        public new RadioButton UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as RadioButton;
        }


        public new RadioButton Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as RadioButton;
        }


        public new RadioButton DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as RadioButton;
        }


        public new RadioButton Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as RadioButton;
        }


        public new RadioButton Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as RadioButton;
        }


        public new RadioButton Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as RadioButton;
        }


        public new RadioButton LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as RadioButton;
        }


        public new RadioButton Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as RadioButton;
        }


        public new RadioButton MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as RadioButton;
        }


        public new RadioButton MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as RadioButton;
        }


        public new RadioButton Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as RadioButton;
        }


        public new RadioButton MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as RadioButton;
        }


        public new RadioButton MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as RadioButton;
        }


        public new RadioButton FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as RadioButton;
        }


        public new RadioButton Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as RadioButton;
        }


        public new RadioButton HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as RadioButton;
        }


        public new RadioButton VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as RadioButton;
        }


        public new RadioButton FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as RadioButton;
        }


        public new RadioButton Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as RadioButton;
        }


        public new RadioButton ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as RadioButton;
        }


        public new RadioButton ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as RadioButton;
        }


        public new RadioButton ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as RadioButton;
        }


        public new RadioButton AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as RadioButton;
        }


        public new RadioButton RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as RadioButton;
        }


        public new RadioButton RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as RadioButton;
        }


        public new RadioButton Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as RadioButton;
        }


        public new RadioButton OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as RadioButton;
        }


        public new RadioButton Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as RadioButton;
        }


        public new RadioButton Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as RadioButton;
        }


        public new RadioButton ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as RadioButton;
        }


        public new RadioButton SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as RadioButton;
        }


        public new RadioButton IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as RadioButton;
        }


        public new RadioButton Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as RadioButton;
        }

   }

    public partial class Rectangle : FrameworkElement {
        public new System.Windows.Shapes.Rectangle C { get { return base.C as System.Windows.Shapes.Rectangle; } set { base.C = value; } }


        public static Rectangle Make() {
            return new Rectangle();
        }

        public Rectangle() {
            C = new System.Windows.Shapes.Rectangle();
        }

        public new Rectangle GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new Rectangle EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Rectangle EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Rectangle EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Rectangle EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Rectangle EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Rectangle EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Rectangle EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Rectangle EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Rectangle EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Rectangle EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Rectangle EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Rectangle EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Rectangle EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Rectangle EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Rectangle EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Rectangle EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Rectangle EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Rectangle EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Rectangle EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Rectangle EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Rectangle EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Rectangle EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Rectangle EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Rectangle EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Rectangle EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Rectangle EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Rectangle EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Rectangle EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Rectangle EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Rectangle EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Rectangle EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Rectangle EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Rectangle EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Rectangle EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Rectangle EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Rectangle EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Rectangle EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Rectangle EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Rectangle EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Rectangle EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Rectangle EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Rectangle EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Rectangle EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Rectangle EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Rectangle EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Rectangle EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Rectangle EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Rectangle EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Rectangle EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Rectangle EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Rectangle EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Rectangle EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Rectangle EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Rectangle EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Rectangle EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Rectangle EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Rectangle EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Rectangle EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Rectangle EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Rectangle EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Rectangle EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Rectangle EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Rectangle EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Rectangle EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Rectangle EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Rectangle EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Rectangle EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Rectangle EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Rectangle EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Rectangle EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Rectangle EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Rectangle EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Rectangle EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Rectangle EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Rectangle EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Rectangle EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Rectangle EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Rectangle EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Rectangle EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Rectangle EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Rectangle EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Rectangle EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Rectangle EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Rectangle EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Rectangle EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Rectangle EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Rectangle EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Rectangle EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Rectangle EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Rectangle EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Rectangle EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Rectangle EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Rectangle EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Rectangle EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Rectangle EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Rectangle EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Rectangle EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Rectangle EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Rectangle EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Rectangle EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Rectangle EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Rectangle EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Rectangle EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Rectangle EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Rectangle EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Rectangle EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Rectangle EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Rectangle EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public Rectangle RadiusX( Bind<System.Double> bind ) {
            C.RadiusX = bind.V;
            return this;
        }



        public Rectangle RadiusY( Bind<System.Double> bind ) {
            C.RadiusY = bind.V;
            return this;
        }





        public Rectangle Stretch( Bind<System.Windows.Media.Stretch> bind ) {
            C.Stretch = bind.V;
            return this;
        }



        public Rectangle Fill( Bind<System.Windows.Media.Brush> bind ) {
            C.Fill = bind.V;
            return this;
        }



        public Rectangle Stroke( Bind<System.Windows.Media.Brush> bind ) {
            C.Stroke = bind.V;
            return this;
        }



        public Rectangle StrokeThickness( Bind<System.Double> bind ) {
            C.StrokeThickness = bind.V;
            return this;
        }



        public Rectangle StrokeStartLineCap( Bind<System.Windows.Media.PenLineCap> bind ) {
            C.StrokeStartLineCap = bind.V;
            return this;
        }



        public Rectangle StrokeEndLineCap( Bind<System.Windows.Media.PenLineCap> bind ) {
            C.StrokeEndLineCap = bind.V;
            return this;
        }



        public Rectangle StrokeDashCap( Bind<System.Windows.Media.PenLineCap> bind ) {
            C.StrokeDashCap = bind.V;
            return this;
        }



        public Rectangle StrokeLineJoin( Bind<System.Windows.Media.PenLineJoin> bind ) {
            C.StrokeLineJoin = bind.V;
            return this;
        }



        public Rectangle StrokeMiterLimit( Bind<System.Double> bind ) {
            C.StrokeMiterLimit = bind.V;
            return this;
        }



        public Rectangle StrokeDashOffset( Bind<System.Double> bind ) {
            C.StrokeDashOffset = bind.V;
            return this;
        }



        public Rectangle StrokeDashArray( Bind<System.Windows.Media.DoubleCollection> bind ) {
            C.StrokeDashArray = bind.V;
            return this;
        }



        public new Rectangle Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Rectangle;
        }


        public new Rectangle OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Rectangle;
        }


        public new Rectangle UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Rectangle;
        }


        public new Rectangle Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Rectangle;
        }


        public new Rectangle DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Rectangle;
        }


        public new Rectangle Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Rectangle;
        }


        public new Rectangle Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Rectangle;
        }


        public new Rectangle Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Rectangle;
        }


        public new Rectangle LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Rectangle;
        }


        public new Rectangle Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Rectangle;
        }


        public new Rectangle MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Rectangle;
        }


        public new Rectangle MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Rectangle;
        }


        public new Rectangle Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Rectangle;
        }


        public new Rectangle MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Rectangle;
        }


        public new Rectangle MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Rectangle;
        }


        public new Rectangle FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Rectangle;
        }


        public new Rectangle Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Rectangle;
        }


        public new Rectangle HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Rectangle;
        }


        public new Rectangle VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Rectangle;
        }


        public new Rectangle FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Rectangle;
        }


        public new Rectangle Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Rectangle;
        }


        public new Rectangle ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Rectangle;
        }


        public new Rectangle ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Rectangle;
        }


        public new Rectangle ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Rectangle;
        }


        public new Rectangle AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Rectangle;
        }


        public new Rectangle RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Rectangle;
        }


        public new Rectangle RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Rectangle;
        }


        public new Rectangle Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Rectangle;
        }


        public new Rectangle OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Rectangle;
        }


        public new Rectangle Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Rectangle;
        }


        public new Rectangle Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Rectangle;
        }


        public new Rectangle ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Rectangle;
        }


        public new Rectangle SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Rectangle;
        }


        public new Rectangle IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Rectangle;
        }


        public new Rectangle Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Rectangle;
        }

   }

    public partial class RichTextBox : FrameworkElement {
        public new System.Windows.Controls.RichTextBox C { get { return base.C as System.Windows.Controls.RichTextBox; } set { base.C = value; } }


        public static RichTextBox Make() {
            return new RichTextBox();
        }

        public RichTextBox() {
            C = new System.Windows.Controls.RichTextBox();
        }

        public new RichTextBox GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new RichTextBox EventTextChanged( System.Windows.Controls.TextChangedEventHandler e ) {
            C.TextChanged += e;
            return this;
        }

        public new RichTextBox EventSelectionChanged( System.Windows.RoutedEventHandler e ) {
            C.SelectionChanged += e;
            return this;
        }

        public new RichTextBox EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new RichTextBox EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new RichTextBox EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new RichTextBox EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new RichTextBox EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new RichTextBox EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new RichTextBox EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new RichTextBox EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new RichTextBox EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new RichTextBox EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new RichTextBox EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new RichTextBox EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new RichTextBox EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new RichTextBox EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new RichTextBox EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new RichTextBox EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new RichTextBox EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new RichTextBox EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new RichTextBox EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new RichTextBox EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new RichTextBox EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new RichTextBox EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new RichTextBox EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new RichTextBox EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new RichTextBox EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new RichTextBox EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new RichTextBox EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new RichTextBox EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new RichTextBox EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new RichTextBox EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new RichTextBox EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new RichTextBox EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new RichTextBox EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new RichTextBox EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new RichTextBox EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new RichTextBox EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new RichTextBox EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new RichTextBox EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new RichTextBox EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new RichTextBox EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new RichTextBox EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new RichTextBox EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new RichTextBox EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new RichTextBox EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new RichTextBox EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new RichTextBox EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new RichTextBox EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new RichTextBox EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new RichTextBox EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new RichTextBox EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new RichTextBox EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new RichTextBox EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new RichTextBox EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new RichTextBox EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new RichTextBox EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new RichTextBox EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new RichTextBox EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new RichTextBox EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new RichTextBox EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new RichTextBox EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new RichTextBox EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new RichTextBox EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new RichTextBox EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new RichTextBox EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new RichTextBox EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new RichTextBox EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new RichTextBox EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new RichTextBox EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new RichTextBox EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new RichTextBox EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new RichTextBox EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new RichTextBox EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new RichTextBox EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new RichTextBox EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new RichTextBox EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new RichTextBox EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new RichTextBox EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new RichTextBox EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new RichTextBox EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new RichTextBox EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new RichTextBox EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new RichTextBox EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new RichTextBox EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new RichTextBox EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new RichTextBox EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new RichTextBox EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new RichTextBox EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new RichTextBox EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new RichTextBox EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new RichTextBox EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new RichTextBox EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new RichTextBox EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new RichTextBox EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new RichTextBox EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new RichTextBox EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new RichTextBox EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new RichTextBox EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new RichTextBox EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new RichTextBox EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new RichTextBox EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new RichTextBox EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new RichTextBox EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new RichTextBox EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new RichTextBox EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new RichTextBox EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new RichTextBox EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new RichTextBox EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new RichTextBox EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new RichTextBox EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new RichTextBox EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public RichTextBox Document( Bind<System.Windows.Documents.FlowDocument> bind ) {
            C.Document = bind.V;
            return this;
        }



        public RichTextBox IsDocumentEnabled( Bind<System.Boolean> bind ) {
            C.IsDocumentEnabled = bind.V;
            return this;
        }




        public RichTextBox CaretPosition( Bind<System.Windows.Documents.TextPointer> bind ) {
            C.CaretPosition = bind.V;
            return this;
        }



        public RichTextBox IsReadOnly( Bind<System.Boolean> bind ) {
            C.IsReadOnly = bind.V;
            return this;
        }



        public RichTextBox IsReadOnlyCaretVisible( Bind<System.Boolean> bind ) {
            C.IsReadOnlyCaretVisible = bind.V;
            return this;
        }



        public RichTextBox AcceptsReturn( Bind<System.Boolean> bind ) {
            C.AcceptsReturn = bind.V;
            return this;
        }



        public RichTextBox AcceptsTab( Bind<System.Boolean> bind ) {
            C.AcceptsTab = bind.V;
            return this;
        }




        public RichTextBox HorizontalScrollBarVisibility( Bind<System.Windows.Controls.ScrollBarVisibility> bind ) {
            C.HorizontalScrollBarVisibility = bind.V;
            return this;
        }



        public RichTextBox VerticalScrollBarVisibility( Bind<System.Windows.Controls.ScrollBarVisibility> bind ) {
            C.VerticalScrollBarVisibility = bind.V;
            return this;
        }









        public RichTextBox IsUndoEnabled( Bind<System.Boolean> bind ) {
            C.IsUndoEnabled = bind.V;
            return this;
        }



        public RichTextBox UndoLimit( Bind<System.Int32> bind ) {
            C.UndoLimit = bind.V;
            return this;
        }



        public RichTextBox AutoWordSelection( Bind<System.Boolean> bind ) {
            C.AutoWordSelection = bind.V;
            return this;
        }



        public RichTextBox SelectionBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.SelectionBrush = bind.V;
            return this;
        }



        public RichTextBox SelectionOpacity( Bind<System.Double> bind ) {
            C.SelectionOpacity = bind.V;
            return this;
        }



        public RichTextBox CaretBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.CaretBrush = bind.V;
            return this;
        }



        public RichTextBox BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public RichTextBox BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public RichTextBox Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public RichTextBox Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public RichTextBox FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public RichTextBox FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public RichTextBox FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public RichTextBox FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public RichTextBox FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public RichTextBox HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public RichTextBox VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public RichTextBox TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public RichTextBox Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public RichTextBox Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new RichTextBox Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as RichTextBox;
        }


        public new RichTextBox OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as RichTextBox;
        }


        public new RichTextBox UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as RichTextBox;
        }


        public new RichTextBox Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as RichTextBox;
        }


        public new RichTextBox DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as RichTextBox;
        }


        public new RichTextBox Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as RichTextBox;
        }


        public new RichTextBox Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as RichTextBox;
        }


        public new RichTextBox Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as RichTextBox;
        }


        public new RichTextBox LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as RichTextBox;
        }


        public new RichTextBox Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as RichTextBox;
        }


        public new RichTextBox MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as RichTextBox;
        }


        public new RichTextBox MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as RichTextBox;
        }


        public new RichTextBox Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as RichTextBox;
        }


        public new RichTextBox MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as RichTextBox;
        }


        public new RichTextBox MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as RichTextBox;
        }


        public new RichTextBox FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as RichTextBox;
        }


        public new RichTextBox Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as RichTextBox;
        }


        public new RichTextBox HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as RichTextBox;
        }


        public new RichTextBox VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as RichTextBox;
        }


        public new RichTextBox FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as RichTextBox;
        }


        public new RichTextBox Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as RichTextBox;
        }


        public new RichTextBox ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as RichTextBox;
        }


        public new RichTextBox ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as RichTextBox;
        }


        public new RichTextBox ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as RichTextBox;
        }


        public new RichTextBox AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as RichTextBox;
        }


        public new RichTextBox RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as RichTextBox;
        }


        public new RichTextBox RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as RichTextBox;
        }


        public new RichTextBox Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as RichTextBox;
        }


        public new RichTextBox OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as RichTextBox;
        }


        public new RichTextBox Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as RichTextBox;
        }


        public new RichTextBox Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as RichTextBox;
        }


        public new RichTextBox ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as RichTextBox;
        }


        public new RichTextBox SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as RichTextBox;
        }


        public new RichTextBox IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as RichTextBox;
        }


        public new RichTextBox Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as RichTextBox;
        }

   }

    public partial class ScrollViewer : FrameworkElement {
        public new System.Windows.Controls.ScrollViewer C { get { return base.C as System.Windows.Controls.ScrollViewer; } set { base.C = value; } }


        public static ScrollViewer Make() {
            return new ScrollViewer();
        }

        public ScrollViewer() {
            C = new System.Windows.Controls.ScrollViewer();
        }

        public new ScrollViewer GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new ScrollViewer EventScrollChanged( System.Windows.Controls.ScrollChangedEventHandler e ) {
            C.ScrollChanged += e;
            return this;
        }

        public new ScrollViewer EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new ScrollViewer EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new ScrollViewer EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new ScrollViewer EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new ScrollViewer EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new ScrollViewer EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new ScrollViewer EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new ScrollViewer EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new ScrollViewer EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new ScrollViewer EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new ScrollViewer EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new ScrollViewer EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new ScrollViewer EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new ScrollViewer EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new ScrollViewer EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new ScrollViewer EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new ScrollViewer EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new ScrollViewer EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new ScrollViewer EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new ScrollViewer EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new ScrollViewer EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new ScrollViewer EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new ScrollViewer EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new ScrollViewer EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new ScrollViewer EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new ScrollViewer EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new ScrollViewer EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new ScrollViewer EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new ScrollViewer EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new ScrollViewer EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new ScrollViewer EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new ScrollViewer EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new ScrollViewer EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new ScrollViewer EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new ScrollViewer EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new ScrollViewer EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new ScrollViewer EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new ScrollViewer EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new ScrollViewer EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new ScrollViewer EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new ScrollViewer EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new ScrollViewer EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new ScrollViewer EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new ScrollViewer EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new ScrollViewer EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new ScrollViewer EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new ScrollViewer EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new ScrollViewer EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new ScrollViewer EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new ScrollViewer EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new ScrollViewer EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new ScrollViewer EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new ScrollViewer EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new ScrollViewer EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new ScrollViewer EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new ScrollViewer EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new ScrollViewer EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new ScrollViewer EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new ScrollViewer EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new ScrollViewer EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new ScrollViewer EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new ScrollViewer EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new ScrollViewer EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new ScrollViewer EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new ScrollViewer EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new ScrollViewer EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new ScrollViewer EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new ScrollViewer EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new ScrollViewer EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new ScrollViewer EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new ScrollViewer EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new ScrollViewer EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new ScrollViewer EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new ScrollViewer EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new ScrollViewer EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new ScrollViewer EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new ScrollViewer EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new ScrollViewer EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new ScrollViewer EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new ScrollViewer EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new ScrollViewer EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new ScrollViewer EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new ScrollViewer EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new ScrollViewer EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new ScrollViewer EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new ScrollViewer EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new ScrollViewer EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new ScrollViewer EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new ScrollViewer EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new ScrollViewer EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new ScrollViewer EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new ScrollViewer EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new ScrollViewer EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new ScrollViewer EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new ScrollViewer EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new ScrollViewer EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new ScrollViewer EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new ScrollViewer EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new ScrollViewer EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new ScrollViewer EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new ScrollViewer EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new ScrollViewer EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new ScrollViewer EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new ScrollViewer EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new ScrollViewer EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new ScrollViewer EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new ScrollViewer EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new ScrollViewer EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new ScrollViewer EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new ScrollViewer EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public ScrollViewer CanContentScroll( Bind<System.Boolean> bind ) {
            C.CanContentScroll = bind.V;
            return this;
        }



        public ScrollViewer HorizontalScrollBarVisibility( Bind<System.Windows.Controls.ScrollBarVisibility> bind ) {
            C.HorizontalScrollBarVisibility = bind.V;
            return this;
        }



        public ScrollViewer VerticalScrollBarVisibility( Bind<System.Windows.Controls.ScrollBarVisibility> bind ) {
            C.VerticalScrollBarVisibility = bind.V;
            return this;
        }











        public ScrollViewer IsDeferredScrollingEnabled( Bind<System.Boolean> bind ) {
            C.IsDeferredScrollingEnabled = bind.V;
            return this;
        }



        public ScrollViewer PanningMode( Bind<System.Windows.Controls.PanningMode> bind ) {
            C.PanningMode = bind.V;
            return this;
        }



        public ScrollViewer PanningDeceleration( Bind<System.Double> bind ) {
            C.PanningDeceleration = bind.V;
            return this;
        }



        public ScrollViewer PanningRatio( Bind<System.Double> bind ) {
            C.PanningRatio = bind.V;
            return this;
        }



        public ScrollViewer Content( Bind<System.Object> bind ) {
            if ( bind.V is FrameworkElement )
                C.Content = ((FrameworkElement) bind.V).C;
            else
                C.Content = bind.V;
            return this;
        }




        public ScrollViewer ContentTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ContentTemplate = bind.V;
            return this;
        }



        public ScrollViewer ContentTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ContentTemplateSelector = bind.V;
            return this;
        }



        public ScrollViewer ContentStringFormat( Bind<System.String> bind ) {
            C.ContentStringFormat = bind.V;
            return this;
        }



        public ScrollViewer BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public ScrollViewer BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public ScrollViewer Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public ScrollViewer Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public ScrollViewer FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public ScrollViewer FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public ScrollViewer FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public ScrollViewer FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public ScrollViewer FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public ScrollViewer HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public ScrollViewer VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public ScrollViewer TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public ScrollViewer Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public ScrollViewer Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new ScrollViewer Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as ScrollViewer;
        }


        public new ScrollViewer OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as ScrollViewer;
        }


        public new ScrollViewer UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as ScrollViewer;
        }


        public new ScrollViewer Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as ScrollViewer;
        }


        public new ScrollViewer DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as ScrollViewer;
        }


        public new ScrollViewer Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as ScrollViewer;
        }


        public new ScrollViewer Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as ScrollViewer;
        }


        public new ScrollViewer Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as ScrollViewer;
        }


        public new ScrollViewer LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as ScrollViewer;
        }


        public new ScrollViewer Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as ScrollViewer;
        }


        public new ScrollViewer MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as ScrollViewer;
        }


        public new ScrollViewer MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as ScrollViewer;
        }


        public new ScrollViewer Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as ScrollViewer;
        }


        public new ScrollViewer MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as ScrollViewer;
        }


        public new ScrollViewer MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as ScrollViewer;
        }


        public new ScrollViewer FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as ScrollViewer;
        }


        public new ScrollViewer Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as ScrollViewer;
        }


        public new ScrollViewer HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as ScrollViewer;
        }


        public new ScrollViewer VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as ScrollViewer;
        }


        public new ScrollViewer FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as ScrollViewer;
        }


        public new ScrollViewer Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as ScrollViewer;
        }


        public new ScrollViewer ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as ScrollViewer;
        }


        public new ScrollViewer ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as ScrollViewer;
        }


        public new ScrollViewer ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as ScrollViewer;
        }


        public new ScrollViewer AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as ScrollViewer;
        }


        public new ScrollViewer RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as ScrollViewer;
        }


        public new ScrollViewer RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as ScrollViewer;
        }


        public new ScrollViewer Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as ScrollViewer;
        }


        public new ScrollViewer OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as ScrollViewer;
        }


        public new ScrollViewer Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as ScrollViewer;
        }


        public new ScrollViewer Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as ScrollViewer;
        }


        public new ScrollViewer ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as ScrollViewer;
        }


        public new ScrollViewer SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as ScrollViewer;
        }


        public new ScrollViewer IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as ScrollViewer;
        }


        public new ScrollViewer Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as ScrollViewer;
        }

   }

    public partial class Separator : FrameworkElement {
        public new System.Windows.Controls.Separator C { get { return base.C as System.Windows.Controls.Separator; } set { base.C = value; } }


        public static Separator Make() {
            return new Separator();
        }

        public Separator() {
            C = new System.Windows.Controls.Separator();
        }

        public new Separator GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new Separator EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new Separator EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new Separator EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Separator EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Separator EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Separator EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Separator EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Separator EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Separator EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Separator EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Separator EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Separator EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Separator EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Separator EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Separator EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Separator EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Separator EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Separator EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Separator EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Separator EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Separator EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Separator EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Separator EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Separator EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Separator EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Separator EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Separator EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Separator EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Separator EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Separator EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Separator EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Separator EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Separator EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Separator EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Separator EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Separator EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Separator EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Separator EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Separator EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Separator EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Separator EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Separator EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Separator EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Separator EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Separator EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Separator EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Separator EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Separator EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Separator EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Separator EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Separator EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Separator EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Separator EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Separator EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Separator EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Separator EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Separator EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Separator EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Separator EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Separator EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Separator EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Separator EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Separator EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Separator EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Separator EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Separator EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Separator EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Separator EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Separator EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Separator EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Separator EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Separator EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Separator EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Separator EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Separator EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Separator EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Separator EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Separator EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Separator EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Separator EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Separator EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Separator EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Separator EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Separator EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Separator EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Separator EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Separator EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Separator EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Separator EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Separator EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Separator EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Separator EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Separator EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Separator EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Separator EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Separator EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Separator EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Separator EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Separator EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Separator EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Separator EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Separator EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Separator EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Separator EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Separator EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Separator EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Separator EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Separator EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Separator EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Separator EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public Separator BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public Separator BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public Separator Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public Separator Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public Separator FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public Separator FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public Separator FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public Separator FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public Separator FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public Separator HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public Separator VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public Separator TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public Separator Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public Separator Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new Separator Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Separator;
        }


        public new Separator OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Separator;
        }


        public new Separator UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Separator;
        }


        public new Separator Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Separator;
        }


        public new Separator DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Separator;
        }


        public new Separator Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Separator;
        }


        public new Separator Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Separator;
        }


        public new Separator Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Separator;
        }


        public new Separator LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Separator;
        }


        public new Separator Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Separator;
        }


        public new Separator MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Separator;
        }


        public new Separator MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Separator;
        }


        public new Separator Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Separator;
        }


        public new Separator MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Separator;
        }


        public new Separator MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Separator;
        }


        public new Separator FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Separator;
        }


        public new Separator Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Separator;
        }


        public new Separator HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Separator;
        }


        public new Separator VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Separator;
        }


        public new Separator FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Separator;
        }


        public new Separator Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Separator;
        }


        public new Separator ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Separator;
        }


        public new Separator ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Separator;
        }


        public new Separator ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Separator;
        }


        public new Separator AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Separator;
        }


        public new Separator RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Separator;
        }


        public new Separator RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Separator;
        }


        public new Separator Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Separator;
        }


        public new Separator OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Separator;
        }


        public new Separator Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Separator;
        }


        public new Separator Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Separator;
        }


        public new Separator ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Separator;
        }


        public new Separator SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Separator;
        }


        public new Separator IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Separator;
        }


        public new Separator Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Separator;
        }

   }

    public partial class Slider : FrameworkElement {
        public new System.Windows.Controls.Slider C { get { return base.C as System.Windows.Controls.Slider; } set { base.C = value; } }


        public static Slider Make() {
            return new Slider();
        }

        public Slider() {
            C = new System.Windows.Controls.Slider();
        }

        public new Slider GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new Slider EventValueChanged( System.Windows.RoutedPropertyChangedEventHandler<System.Double> e ) {
            C.ValueChanged += e;
            return this;
        }

        public new Slider EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new Slider EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new Slider EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Slider EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Slider EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Slider EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Slider EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Slider EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Slider EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Slider EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Slider EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Slider EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Slider EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Slider EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Slider EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Slider EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Slider EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Slider EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Slider EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Slider EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Slider EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Slider EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Slider EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Slider EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Slider EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Slider EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Slider EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Slider EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Slider EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Slider EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Slider EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Slider EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Slider EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Slider EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Slider EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Slider EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Slider EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Slider EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Slider EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Slider EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Slider EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Slider EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Slider EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Slider EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Slider EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Slider EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Slider EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Slider EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Slider EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Slider EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Slider EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Slider EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Slider EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Slider EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Slider EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Slider EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Slider EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Slider EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Slider EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Slider EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Slider EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Slider EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Slider EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Slider EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Slider EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Slider EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Slider EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Slider EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Slider EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Slider EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Slider EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Slider EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Slider EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Slider EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Slider EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Slider EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Slider EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Slider EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Slider EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Slider EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Slider EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Slider EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Slider EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Slider EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Slider EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Slider EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Slider EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Slider EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Slider EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Slider EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Slider EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Slider EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Slider EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Slider EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Slider EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Slider EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Slider EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Slider EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Slider EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Slider EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Slider EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Slider EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Slider EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Slider EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Slider EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Slider EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Slider EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Slider EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Slider EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Slider EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }







        public Slider Orientation( Bind<System.Windows.Controls.Orientation> bind ) {
            C.Orientation = bind.V;
            return this;
        }



        public Slider IsDirectionReversed( Bind<System.Boolean> bind ) {
            C.IsDirectionReversed = bind.V;
            return this;
        }



        public Slider Delay( Bind<System.Int32> bind ) {
            C.Delay = bind.V;
            return this;
        }



        public Slider Interval( Bind<System.Int32> bind ) {
            C.Interval = bind.V;
            return this;
        }



        public Slider AutoToolTipPlacement( Bind<System.Windows.Controls.Primitives.AutoToolTipPlacement> bind ) {
            C.AutoToolTipPlacement = bind.V;
            return this;
        }



        public Slider AutoToolTipPrecision( Bind<System.Int32> bind ) {
            C.AutoToolTipPrecision = bind.V;
            return this;
        }



        public Slider IsSnapToTickEnabled( Bind<System.Boolean> bind ) {
            C.IsSnapToTickEnabled = bind.V;
            return this;
        }



        public Slider TickPlacement( Bind<System.Windows.Controls.Primitives.TickPlacement> bind ) {
            C.TickPlacement = bind.V;
            return this;
        }



        public Slider TickFrequency( Bind<System.Double> bind ) {
            C.TickFrequency = bind.V;
            return this;
        }



        public Slider Ticks( Bind<System.Windows.Media.DoubleCollection> bind ) {
            C.Ticks = bind.V;
            return this;
        }



        public Slider IsSelectionRangeEnabled( Bind<System.Boolean> bind ) {
            C.IsSelectionRangeEnabled = bind.V;
            return this;
        }



        public Slider SelectionStart( Bind<System.Double> bind ) {
            C.SelectionStart = bind.V;
            return this;
        }



        public Slider SelectionEnd( Bind<System.Double> bind ) {
            C.SelectionEnd = bind.V;
            return this;
        }



        public Slider IsMoveToPointEnabled( Bind<System.Boolean> bind ) {
            C.IsMoveToPointEnabled = bind.V;
            return this;
        }



        public Slider Minimum( Bind<System.Double> bind ) {
            C.Minimum = bind.V;
            return this;
        }



        public Slider Maximum( Bind<System.Double> bind ) {
            C.Maximum = bind.V;
            return this;
        }



        public Slider Value( Bind<System.Double> bind ) {
            C.Value = bind.V;
            return this;
        }



        public Slider LargeChange( Bind<System.Double> bind ) {
            C.LargeChange = bind.V;
            return this;
        }



        public Slider SmallChange( Bind<System.Double> bind ) {
            C.SmallChange = bind.V;
            return this;
        }



        public Slider BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public Slider BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public Slider Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public Slider Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public Slider FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public Slider FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public Slider FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public Slider FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public Slider FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public Slider HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public Slider VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public Slider TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public Slider Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public Slider Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new Slider Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Slider;
        }


        public new Slider OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Slider;
        }


        public new Slider UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Slider;
        }


        public new Slider Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Slider;
        }


        public new Slider DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Slider;
        }


        public new Slider Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Slider;
        }


        public new Slider Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Slider;
        }


        public new Slider Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Slider;
        }


        public new Slider LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Slider;
        }


        public new Slider Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Slider;
        }


        public new Slider MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Slider;
        }


        public new Slider MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Slider;
        }


        public new Slider Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Slider;
        }


        public new Slider MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Slider;
        }


        public new Slider MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Slider;
        }


        public new Slider FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Slider;
        }


        public new Slider Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Slider;
        }


        public new Slider HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Slider;
        }


        public new Slider VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Slider;
        }


        public new Slider FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Slider;
        }


        public new Slider Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Slider;
        }


        public new Slider ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Slider;
        }


        public new Slider ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Slider;
        }


        public new Slider ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Slider;
        }


        public new Slider AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Slider;
        }


        public new Slider RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Slider;
        }


        public new Slider RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Slider;
        }


        public new Slider Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Slider;
        }


        public new Slider OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Slider;
        }


        public new Slider Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Slider;
        }


        public new Slider Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Slider;
        }


        public new Slider ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Slider;
        }


        public new Slider SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Slider;
        }


        public new Slider IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Slider;
        }


        public new Slider Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Slider;
        }

   }

    public partial class StackPanel : FrameworkElement {
        public new System.Windows.Controls.StackPanel C { get { return base.C as System.Windows.Controls.StackPanel; } set { base.C = value; } }


        public static StackPanel Make() {
            return new StackPanel();
        }

        public StackPanel() {
            C = new System.Windows.Controls.StackPanel();
        }

        public new StackPanel GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public StackPanel Children( params Bind<FrameworkElement>[] bind ) {
           foreach( var b in bind ) {
                C.Children.Add( ( (FrameworkElement) b.V ).C);
            }
            return this;
        }


        public new StackPanel EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new StackPanel EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new StackPanel EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new StackPanel EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new StackPanel EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new StackPanel EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new StackPanel EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new StackPanel EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new StackPanel EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new StackPanel EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new StackPanel EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new StackPanel EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new StackPanel EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new StackPanel EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new StackPanel EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new StackPanel EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new StackPanel EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new StackPanel EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new StackPanel EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new StackPanel EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new StackPanel EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new StackPanel EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new StackPanel EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new StackPanel EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new StackPanel EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new StackPanel EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new StackPanel EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new StackPanel EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new StackPanel EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new StackPanel EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new StackPanel EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new StackPanel EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new StackPanel EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new StackPanel EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new StackPanel EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new StackPanel EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new StackPanel EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new StackPanel EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new StackPanel EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new StackPanel EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new StackPanel EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new StackPanel EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new StackPanel EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new StackPanel EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new StackPanel EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new StackPanel EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new StackPanel EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new StackPanel EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new StackPanel EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new StackPanel EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new StackPanel EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new StackPanel EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new StackPanel EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new StackPanel EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new StackPanel EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new StackPanel EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new StackPanel EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new StackPanel EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new StackPanel EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new StackPanel EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new StackPanel EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new StackPanel EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new StackPanel EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new StackPanel EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new StackPanel EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new StackPanel EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new StackPanel EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new StackPanel EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new StackPanel EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new StackPanel EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new StackPanel EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new StackPanel EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new StackPanel EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new StackPanel EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new StackPanel EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new StackPanel EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new StackPanel EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new StackPanel EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new StackPanel EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new StackPanel EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new StackPanel EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new StackPanel EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new StackPanel EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new StackPanel EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new StackPanel EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new StackPanel EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new StackPanel EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new StackPanel EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new StackPanel EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new StackPanel EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new StackPanel EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new StackPanel EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new StackPanel EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new StackPanel EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new StackPanel EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new StackPanel EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new StackPanel EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new StackPanel EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new StackPanel EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new StackPanel EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new StackPanel EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new StackPanel EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new StackPanel EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new StackPanel EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new StackPanel EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new StackPanel EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new StackPanel EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new StackPanel EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public StackPanel Orientation( Bind<System.Windows.Controls.Orientation> bind ) {
            C.Orientation = bind.V;
            return this;
        }



        public StackPanel CanHorizontallyScroll( Bind<System.Boolean> bind ) {
            C.CanHorizontallyScroll = bind.V;
            return this;
        }



        public StackPanel CanVerticallyScroll( Bind<System.Boolean> bind ) {
            C.CanVerticallyScroll = bind.V;
            return this;
        }







        public StackPanel ScrollOwner( Bind<System.Windows.Controls.ScrollViewer> bind ) {
            C.ScrollOwner = bind.V;
            return this;
        }



        public StackPanel Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }




        public StackPanel IsItemsHost( Bind<System.Boolean> bind ) {
            C.IsItemsHost = bind.V;
            return this;
        }



        public new StackPanel Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as StackPanel;
        }


        public new StackPanel OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as StackPanel;
        }


        public new StackPanel UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as StackPanel;
        }


        public new StackPanel Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as StackPanel;
        }


        public new StackPanel DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as StackPanel;
        }


        public new StackPanel Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as StackPanel;
        }


        public new StackPanel Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as StackPanel;
        }


        public new StackPanel Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as StackPanel;
        }


        public new StackPanel LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as StackPanel;
        }


        public new StackPanel Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as StackPanel;
        }


        public new StackPanel MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as StackPanel;
        }


        public new StackPanel MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as StackPanel;
        }


        public new StackPanel Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as StackPanel;
        }


        public new StackPanel MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as StackPanel;
        }


        public new StackPanel MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as StackPanel;
        }


        public new StackPanel FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as StackPanel;
        }


        public new StackPanel Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as StackPanel;
        }


        public new StackPanel HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as StackPanel;
        }


        public new StackPanel VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as StackPanel;
        }


        public new StackPanel FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as StackPanel;
        }


        public new StackPanel Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as StackPanel;
        }


        public new StackPanel ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as StackPanel;
        }


        public new StackPanel ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as StackPanel;
        }


        public new StackPanel ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as StackPanel;
        }


        public new StackPanel AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as StackPanel;
        }


        public new StackPanel RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as StackPanel;
        }


        public new StackPanel RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as StackPanel;
        }


        public new StackPanel Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as StackPanel;
        }


        public new StackPanel OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as StackPanel;
        }


        public new StackPanel Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as StackPanel;
        }


        public new StackPanel Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as StackPanel;
        }


        public new StackPanel ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as StackPanel;
        }


        public new StackPanel SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as StackPanel;
        }


        public new StackPanel IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as StackPanel;
        }


        public new StackPanel Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as StackPanel;
        }

   }

    public partial class TabControl : FrameworkElement {
        public new System.Windows.Controls.TabControl C { get { return base.C as System.Windows.Controls.TabControl; } set { base.C = value; } }


        public static TabControl Make() {
            return new TabControl();
        }

        public TabControl() {
            C = new System.Windows.Controls.TabControl();
        }

        public new TabControl GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new TabControl EventSelectionChanged( System.Windows.Controls.SelectionChangedEventHandler e ) {
            C.SelectionChanged += e;
            return this;
        }

        public new TabControl EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new TabControl EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new TabControl EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new TabControl EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new TabControl EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new TabControl EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new TabControl EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new TabControl EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new TabControl EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new TabControl EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new TabControl EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new TabControl EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new TabControl EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new TabControl EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new TabControl EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new TabControl EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new TabControl EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new TabControl EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new TabControl EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new TabControl EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new TabControl EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new TabControl EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new TabControl EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new TabControl EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new TabControl EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new TabControl EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new TabControl EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new TabControl EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new TabControl EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new TabControl EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new TabControl EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new TabControl EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new TabControl EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new TabControl EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new TabControl EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new TabControl EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new TabControl EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new TabControl EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new TabControl EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new TabControl EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new TabControl EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new TabControl EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new TabControl EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new TabControl EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new TabControl EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new TabControl EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new TabControl EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new TabControl EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new TabControl EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new TabControl EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new TabControl EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new TabControl EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new TabControl EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new TabControl EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new TabControl EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new TabControl EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new TabControl EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new TabControl EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new TabControl EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new TabControl EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new TabControl EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new TabControl EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new TabControl EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new TabControl EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new TabControl EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new TabControl EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new TabControl EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new TabControl EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new TabControl EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new TabControl EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new TabControl EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new TabControl EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new TabControl EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new TabControl EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new TabControl EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new TabControl EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new TabControl EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new TabControl EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new TabControl EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new TabControl EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new TabControl EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new TabControl EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new TabControl EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new TabControl EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new TabControl EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new TabControl EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new TabControl EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new TabControl EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new TabControl EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new TabControl EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new TabControl EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new TabControl EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new TabControl EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new TabControl EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new TabControl EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new TabControl EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new TabControl EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new TabControl EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new TabControl EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new TabControl EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new TabControl EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new TabControl EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new TabControl EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new TabControl EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new TabControl EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new TabControl EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new TabControl EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new TabControl EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new TabControl EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new TabControl EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public TabControl TabStripPlacement( Bind<System.Windows.Controls.Dock> bind ) {
            C.TabStripPlacement = bind.V;
            return this;
        }



        public TabControl ContentTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ContentTemplate = bind.V;
            return this;
        }



        public TabControl ContentTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ContentTemplateSelector = bind.V;
            return this;
        }



        public TabControl ContentStringFormat( Bind<System.String> bind ) {
            C.ContentStringFormat = bind.V;
            return this;
        }



        public TabControl IsSynchronizedWithCurrentItem( Bind<bool?> bind ) {
            C.IsSynchronizedWithCurrentItem = bind.V;
            return this;
        }



        public TabControl SelectedIndex( Bind<System.Int32> bind ) {
            C.SelectedIndex = bind.V;
            return this;
        }



        public TabControl SelectedItem( Bind<System.Object> bind ) {
            C.SelectedItem = bind.V;
            return this;
        }



        public TabControl SelectedValue( Bind<System.Object> bind ) {
            C.SelectedValue = bind.V;
            return this;
        }



        public TabControl SelectedValuePath( Bind<System.String> bind ) {
            C.SelectedValuePath = bind.V;
            return this;
        }




        public TabControl ItemsSource( params Bind<object>[] bind ) {
            System.Collections.Generic.List<object> source = new System.Collections.Generic.List<object>();
           foreach( var b in bind ) {
                if ( b.V is FrameworkElement )
                    source.Add( ( (FrameworkElement) b.V ).C );
                else
                    source.Add( b.V );
            }
            C.ItemsSource = source;
            return this;
        }





        public TabControl DisplayMemberPath( Bind<System.String> bind ) {
            C.DisplayMemberPath = bind.V;
            return this;
        }



        public TabControl ItemTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ItemTemplate = bind.V;
            return this;
        }



        public TabControl ItemTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ItemTemplateSelector = bind.V;
            return this;
        }



        public TabControl ItemStringFormat( Bind<System.String> bind ) {
            C.ItemStringFormat = bind.V;
            return this;
        }



        public TabControl ItemBindingGroup( Bind<System.Windows.Data.BindingGroup> bind ) {
            C.ItemBindingGroup = bind.V;
            return this;
        }



        public TabControl ItemContainerStyle( Bind<System.Windows.Style> bind ) {
            C.ItemContainerStyle = bind.V;
            return this;
        }



        public TabControl ItemContainerStyleSelector( Bind<System.Windows.Controls.StyleSelector> bind ) {
            C.ItemContainerStyleSelector = bind.V;
            return this;
        }



        public TabControl ItemsPanel( Bind<System.Windows.Controls.ItemsPanelTemplate> bind ) {
            C.ItemsPanel = bind.V;
            return this;
        }





        public TabControl GroupStyleSelector( Bind<System.Windows.Controls.GroupStyleSelector> bind ) {
            C.GroupStyleSelector = bind.V;
            return this;
        }



        public TabControl AlternationCount( Bind<System.Int32> bind ) {
            C.AlternationCount = bind.V;
            return this;
        }



        public TabControl IsTextSearchEnabled( Bind<System.Boolean> bind ) {
            C.IsTextSearchEnabled = bind.V;
            return this;
        }



        public TabControl IsTextSearchCaseSensitive( Bind<System.Boolean> bind ) {
            C.IsTextSearchCaseSensitive = bind.V;
            return this;
        }



        public TabControl BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public TabControl BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public TabControl Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public TabControl Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public TabControl FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public TabControl FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public TabControl FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public TabControl FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public TabControl FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public TabControl HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public TabControl VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public TabControl TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public TabControl Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public TabControl Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new TabControl Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as TabControl;
        }


        public new TabControl OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as TabControl;
        }


        public new TabControl UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as TabControl;
        }


        public new TabControl Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as TabControl;
        }


        public new TabControl DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as TabControl;
        }


        public new TabControl Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as TabControl;
        }


        public new TabControl Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as TabControl;
        }


        public new TabControl Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as TabControl;
        }


        public new TabControl LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as TabControl;
        }


        public new TabControl Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as TabControl;
        }


        public new TabControl MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as TabControl;
        }


        public new TabControl MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as TabControl;
        }


        public new TabControl Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as TabControl;
        }


        public new TabControl MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as TabControl;
        }


        public new TabControl MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as TabControl;
        }


        public new TabControl FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as TabControl;
        }


        public new TabControl Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as TabControl;
        }


        public new TabControl HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as TabControl;
        }


        public new TabControl VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as TabControl;
        }


        public new TabControl FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as TabControl;
        }


        public new TabControl Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as TabControl;
        }


        public new TabControl ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as TabControl;
        }


        public new TabControl ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as TabControl;
        }


        public new TabControl ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as TabControl;
        }


        public new TabControl AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as TabControl;
        }


        public new TabControl RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as TabControl;
        }


        public new TabControl RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as TabControl;
        }


        public new TabControl Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as TabControl;
        }


        public new TabControl OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as TabControl;
        }


        public new TabControl Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as TabControl;
        }


        public new TabControl Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as TabControl;
        }


        public new TabControl ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as TabControl;
        }


        public new TabControl SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as TabControl;
        }


        public new TabControl IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as TabControl;
        }


        public new TabControl Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as TabControl;
        }

   }

    public partial class TabItem : FrameworkElement {
        public new System.Windows.Controls.TabItem C { get { return base.C as System.Windows.Controls.TabItem; } set { base.C = value; } }


        public static TabItem Make() {
            return new TabItem();
        }

        public TabItem() {
            C = new System.Windows.Controls.TabItem();
        }

        public new TabItem GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new TabItem EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new TabItem EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new TabItem EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new TabItem EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new TabItem EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new TabItem EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new TabItem EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new TabItem EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new TabItem EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new TabItem EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new TabItem EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new TabItem EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new TabItem EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new TabItem EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new TabItem EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new TabItem EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new TabItem EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new TabItem EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new TabItem EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new TabItem EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new TabItem EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new TabItem EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new TabItem EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new TabItem EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new TabItem EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new TabItem EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new TabItem EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new TabItem EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new TabItem EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new TabItem EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new TabItem EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new TabItem EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new TabItem EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new TabItem EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new TabItem EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new TabItem EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new TabItem EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new TabItem EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new TabItem EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new TabItem EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new TabItem EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new TabItem EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new TabItem EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new TabItem EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new TabItem EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new TabItem EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new TabItem EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new TabItem EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new TabItem EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new TabItem EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new TabItem EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new TabItem EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new TabItem EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new TabItem EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new TabItem EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new TabItem EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new TabItem EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new TabItem EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new TabItem EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new TabItem EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new TabItem EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new TabItem EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new TabItem EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new TabItem EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new TabItem EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new TabItem EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new TabItem EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new TabItem EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new TabItem EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new TabItem EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new TabItem EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new TabItem EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new TabItem EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new TabItem EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new TabItem EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new TabItem EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new TabItem EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new TabItem EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new TabItem EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new TabItem EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new TabItem EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new TabItem EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new TabItem EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new TabItem EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new TabItem EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new TabItem EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new TabItem EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new TabItem EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new TabItem EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new TabItem EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new TabItem EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new TabItem EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new TabItem EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new TabItem EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new TabItem EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new TabItem EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new TabItem EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new TabItem EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new TabItem EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new TabItem EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new TabItem EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new TabItem EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new TabItem EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new TabItem EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new TabItem EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new TabItem EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new TabItem EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new TabItem EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new TabItem EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new TabItem EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public TabItem IsSelected( Bind<System.Boolean> bind ) {
            C.IsSelected = bind.V;
            return this;
        }




        public TabItem Header( Bind<System.Object> bind ) {
            C.Header = bind.V;
            return this;
        }




        public TabItem HeaderTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.HeaderTemplate = bind.V;
            return this;
        }



        public TabItem HeaderTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.HeaderTemplateSelector = bind.V;
            return this;
        }



        public TabItem HeaderStringFormat( Bind<System.String> bind ) {
            C.HeaderStringFormat = bind.V;
            return this;
        }



        public TabItem Content( Bind<System.Object> bind ) {
            if ( bind.V is FrameworkElement )
                C.Content = ((FrameworkElement) bind.V).C;
            else
                C.Content = bind.V;
            return this;
        }




        public TabItem ContentTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ContentTemplate = bind.V;
            return this;
        }



        public TabItem ContentTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ContentTemplateSelector = bind.V;
            return this;
        }



        public TabItem ContentStringFormat( Bind<System.String> bind ) {
            C.ContentStringFormat = bind.V;
            return this;
        }



        public TabItem BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public TabItem BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public TabItem Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public TabItem Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public TabItem FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public TabItem FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public TabItem FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public TabItem FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public TabItem FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public TabItem HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public TabItem VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public TabItem TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public TabItem Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public TabItem Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new TabItem Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as TabItem;
        }


        public new TabItem OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as TabItem;
        }


        public new TabItem UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as TabItem;
        }


        public new TabItem Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as TabItem;
        }


        public new TabItem DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as TabItem;
        }


        public new TabItem Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as TabItem;
        }


        public new TabItem Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as TabItem;
        }


        public new TabItem Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as TabItem;
        }


        public new TabItem LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as TabItem;
        }


        public new TabItem Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as TabItem;
        }


        public new TabItem MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as TabItem;
        }


        public new TabItem MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as TabItem;
        }


        public new TabItem Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as TabItem;
        }


        public new TabItem MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as TabItem;
        }


        public new TabItem MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as TabItem;
        }


        public new TabItem FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as TabItem;
        }


        public new TabItem Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as TabItem;
        }


        public new TabItem HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as TabItem;
        }


        public new TabItem VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as TabItem;
        }


        public new TabItem FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as TabItem;
        }


        public new TabItem Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as TabItem;
        }


        public new TabItem ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as TabItem;
        }


        public new TabItem ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as TabItem;
        }


        public new TabItem ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as TabItem;
        }


        public new TabItem AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as TabItem;
        }


        public new TabItem RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as TabItem;
        }


        public new TabItem RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as TabItem;
        }


        public new TabItem Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as TabItem;
        }


        public new TabItem OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as TabItem;
        }


        public new TabItem Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as TabItem;
        }


        public new TabItem Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as TabItem;
        }


        public new TabItem ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as TabItem;
        }


        public new TabItem SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as TabItem;
        }


        public new TabItem IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as TabItem;
        }


        public new TabItem Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as TabItem;
        }

   }

    public partial class TextBlock : FrameworkElement {
        public new System.Windows.Controls.TextBlock C { get { return base.C as System.Windows.Controls.TextBlock; } set { base.C = value; } }


        public static TextBlock Make() {
            return new TextBlock();
        }

        public TextBlock() {
            C = new System.Windows.Controls.TextBlock();
        }

        public new TextBlock GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new TextBlock EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new TextBlock EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new TextBlock EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new TextBlock EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new TextBlock EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new TextBlock EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new TextBlock EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new TextBlock EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new TextBlock EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new TextBlock EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new TextBlock EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new TextBlock EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new TextBlock EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new TextBlock EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new TextBlock EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new TextBlock EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new TextBlock EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new TextBlock EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new TextBlock EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new TextBlock EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new TextBlock EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new TextBlock EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new TextBlock EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new TextBlock EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new TextBlock EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new TextBlock EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new TextBlock EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new TextBlock EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new TextBlock EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new TextBlock EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new TextBlock EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new TextBlock EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new TextBlock EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new TextBlock EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new TextBlock EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new TextBlock EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new TextBlock EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new TextBlock EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new TextBlock EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new TextBlock EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new TextBlock EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new TextBlock EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new TextBlock EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new TextBlock EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new TextBlock EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new TextBlock EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new TextBlock EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new TextBlock EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new TextBlock EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new TextBlock EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new TextBlock EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new TextBlock EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new TextBlock EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new TextBlock EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new TextBlock EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new TextBlock EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new TextBlock EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new TextBlock EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new TextBlock EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new TextBlock EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new TextBlock EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new TextBlock EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new TextBlock EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new TextBlock EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new TextBlock EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new TextBlock EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new TextBlock EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new TextBlock EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new TextBlock EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new TextBlock EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new TextBlock EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new TextBlock EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new TextBlock EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new TextBlock EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new TextBlock EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new TextBlock EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new TextBlock EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new TextBlock EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new TextBlock EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new TextBlock EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new TextBlock EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new TextBlock EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new TextBlock EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new TextBlock EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new TextBlock EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new TextBlock EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new TextBlock EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new TextBlock EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new TextBlock EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new TextBlock EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new TextBlock EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new TextBlock EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new TextBlock EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new TextBlock EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new TextBlock EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new TextBlock EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new TextBlock EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new TextBlock EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new TextBlock EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new TextBlock EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new TextBlock EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new TextBlock EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new TextBlock EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new TextBlock EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new TextBlock EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new TextBlock EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new TextBlock EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new TextBlock EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }







        public TextBlock BaselineOffset( Bind<System.Double> bind ) {
            C.BaselineOffset = bind.V;
            return this;
        }



        public TextBlock Text( Bind<System.String> bind ) {
            C.Text = bind.V;
            return this;
        }



        public TextBlock FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public TextBlock FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public TextBlock FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public TextBlock FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public TextBlock FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public TextBlock Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public TextBlock Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public TextBlock TextDecorations( Bind<System.Windows.TextDecorationCollection> bind ) {
            C.TextDecorations = bind.V;
            return this;
        }



        public TextBlock TextEffects( Bind<System.Windows.Media.TextEffectCollection> bind ) {
            C.TextEffects = bind.V;
            return this;
        }



        public TextBlock LineHeight( Bind<System.Double> bind ) {
            C.LineHeight = bind.V;
            return this;
        }



        public TextBlock LineStackingStrategy( Bind<System.Windows.LineStackingStrategy> bind ) {
            C.LineStackingStrategy = bind.V;
            return this;
        }



        public TextBlock Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public TextBlock TextAlignment( Bind<System.Windows.TextAlignment> bind ) {
            C.TextAlignment = bind.V;
            return this;
        }



        public TextBlock TextTrimming( Bind<System.Windows.TextTrimming> bind ) {
            C.TextTrimming = bind.V;
            return this;
        }



        public TextBlock TextWrapping( Bind<System.Windows.TextWrapping> bind ) {
            C.TextWrapping = bind.V;
            return this;
        }



        public TextBlock IsHyphenationEnabled( Bind<System.Boolean> bind ) {
            C.IsHyphenationEnabled = bind.V;
            return this;
        }



        public new TextBlock Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as TextBlock;
        }


        public new TextBlock OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as TextBlock;
        }


        public new TextBlock UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as TextBlock;
        }


        public new TextBlock Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as TextBlock;
        }


        public new TextBlock DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as TextBlock;
        }


        public new TextBlock Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as TextBlock;
        }


        public new TextBlock Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as TextBlock;
        }


        public new TextBlock Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as TextBlock;
        }


        public new TextBlock LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as TextBlock;
        }


        public new TextBlock Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as TextBlock;
        }


        public new TextBlock MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as TextBlock;
        }


        public new TextBlock MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as TextBlock;
        }


        public new TextBlock Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as TextBlock;
        }


        public new TextBlock MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as TextBlock;
        }


        public new TextBlock MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as TextBlock;
        }


        public new TextBlock FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as TextBlock;
        }


        public new TextBlock Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as TextBlock;
        }


        public new TextBlock HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as TextBlock;
        }


        public new TextBlock VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as TextBlock;
        }


        public new TextBlock FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as TextBlock;
        }


        public new TextBlock Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as TextBlock;
        }


        public new TextBlock ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as TextBlock;
        }


        public new TextBlock ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as TextBlock;
        }


        public new TextBlock ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as TextBlock;
        }


        public new TextBlock AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as TextBlock;
        }


        public new TextBlock RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as TextBlock;
        }


        public new TextBlock RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as TextBlock;
        }


        public new TextBlock Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as TextBlock;
        }


        public new TextBlock OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as TextBlock;
        }


        public new TextBlock Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as TextBlock;
        }


        public new TextBlock Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as TextBlock;
        }


        public new TextBlock ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as TextBlock;
        }


        public new TextBlock SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as TextBlock;
        }


        public new TextBlock IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as TextBlock;
        }


        public new TextBlock Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as TextBlock;
        }

   }

    public partial class TextBox : FrameworkElement {
        public new System.Windows.Controls.TextBox C { get { return base.C as System.Windows.Controls.TextBox; } set { base.C = value; } }


        public static TextBox Make() {
            return new TextBox();
        }

        public TextBox() {
            C = new System.Windows.Controls.TextBox();
        }

        public new TextBox GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new TextBox EventTextChanged( System.Windows.Controls.TextChangedEventHandler e ) {
            C.TextChanged += e;
            return this;
        }

        public new TextBox EventSelectionChanged( System.Windows.RoutedEventHandler e ) {
            C.SelectionChanged += e;
            return this;
        }

        public new TextBox EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new TextBox EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new TextBox EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new TextBox EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new TextBox EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new TextBox EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new TextBox EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new TextBox EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new TextBox EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new TextBox EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new TextBox EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new TextBox EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new TextBox EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new TextBox EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new TextBox EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new TextBox EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new TextBox EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new TextBox EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new TextBox EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new TextBox EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new TextBox EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new TextBox EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new TextBox EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new TextBox EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new TextBox EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new TextBox EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new TextBox EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new TextBox EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new TextBox EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new TextBox EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new TextBox EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new TextBox EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new TextBox EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new TextBox EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new TextBox EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new TextBox EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new TextBox EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new TextBox EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new TextBox EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new TextBox EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new TextBox EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new TextBox EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new TextBox EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new TextBox EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new TextBox EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new TextBox EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new TextBox EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new TextBox EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new TextBox EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new TextBox EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new TextBox EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new TextBox EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new TextBox EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new TextBox EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new TextBox EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new TextBox EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new TextBox EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new TextBox EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new TextBox EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new TextBox EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new TextBox EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new TextBox EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new TextBox EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new TextBox EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new TextBox EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new TextBox EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new TextBox EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new TextBox EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new TextBox EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new TextBox EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new TextBox EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new TextBox EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new TextBox EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new TextBox EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new TextBox EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new TextBox EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new TextBox EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new TextBox EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new TextBox EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new TextBox EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new TextBox EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new TextBox EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new TextBox EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new TextBox EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new TextBox EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new TextBox EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new TextBox EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new TextBox EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new TextBox EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new TextBox EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new TextBox EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new TextBox EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new TextBox EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new TextBox EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new TextBox EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new TextBox EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new TextBox EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new TextBox EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new TextBox EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new TextBox EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new TextBox EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new TextBox EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new TextBox EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new TextBox EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new TextBox EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new TextBox EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new TextBox EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new TextBox EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new TextBox EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new TextBox EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public TextBox TextWrapping( Bind<System.Windows.TextWrapping> bind ) {
            C.TextWrapping = bind.V;
            return this;
        }



        public TextBox MinLines( Bind<System.Int32> bind ) {
            C.MinLines = bind.V;
            return this;
        }



        public TextBox MaxLines( Bind<System.Int32> bind ) {
            C.MaxLines = bind.V;
            return this;
        }



        public TextBox Text( Bind<System.String> bind ) {
            C.Text = bind.V;
            return this;
        }



        public TextBox CharacterCasing( Bind<System.Windows.Controls.CharacterCasing> bind ) {
            C.CharacterCasing = bind.V;
            return this;
        }



        public TextBox MaxLength( Bind<System.Int32> bind ) {
            C.MaxLength = bind.V;
            return this;
        }



        public TextBox TextAlignment( Bind<System.Windows.TextAlignment> bind ) {
            C.TextAlignment = bind.V;
            return this;
        }



        public TextBox SelectedText( Bind<System.String> bind ) {
            C.SelectedText = bind.V;
            return this;
        }



        public TextBox SelectionLength( Bind<System.Int32> bind ) {
            C.SelectionLength = bind.V;
            return this;
        }



        public TextBox SelectionStart( Bind<System.Int32> bind ) {
            C.SelectionStart = bind.V;
            return this;
        }



        public TextBox CaretIndex( Bind<System.Int32> bind ) {
            C.CaretIndex = bind.V;
            return this;
        }




        public TextBox TextDecorations( Bind<System.Windows.TextDecorationCollection> bind ) {
            C.TextDecorations = bind.V;
            return this;
        }




        public TextBox IsReadOnly( Bind<System.Boolean> bind ) {
            C.IsReadOnly = bind.V;
            return this;
        }



        public TextBox IsReadOnlyCaretVisible( Bind<System.Boolean> bind ) {
            C.IsReadOnlyCaretVisible = bind.V;
            return this;
        }



        public TextBox AcceptsReturn( Bind<System.Boolean> bind ) {
            C.AcceptsReturn = bind.V;
            return this;
        }



        public TextBox AcceptsTab( Bind<System.Boolean> bind ) {
            C.AcceptsTab = bind.V;
            return this;
        }




        public TextBox HorizontalScrollBarVisibility( Bind<System.Windows.Controls.ScrollBarVisibility> bind ) {
            C.HorizontalScrollBarVisibility = bind.V;
            return this;
        }



        public TextBox VerticalScrollBarVisibility( Bind<System.Windows.Controls.ScrollBarVisibility> bind ) {
            C.VerticalScrollBarVisibility = bind.V;
            return this;
        }









        public TextBox IsUndoEnabled( Bind<System.Boolean> bind ) {
            C.IsUndoEnabled = bind.V;
            return this;
        }



        public TextBox UndoLimit( Bind<System.Int32> bind ) {
            C.UndoLimit = bind.V;
            return this;
        }



        public TextBox AutoWordSelection( Bind<System.Boolean> bind ) {
            C.AutoWordSelection = bind.V;
            return this;
        }



        public TextBox SelectionBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.SelectionBrush = bind.V;
            return this;
        }



        public TextBox SelectionOpacity( Bind<System.Double> bind ) {
            C.SelectionOpacity = bind.V;
            return this;
        }



        public TextBox CaretBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.CaretBrush = bind.V;
            return this;
        }



        public TextBox BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public TextBox BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public TextBox Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public TextBox Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public TextBox FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public TextBox FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public TextBox FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public TextBox FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public TextBox FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public TextBox HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public TextBox VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public TextBox TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public TextBox Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public TextBox Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new TextBox Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as TextBox;
        }


        public new TextBox OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as TextBox;
        }


        public new TextBox UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as TextBox;
        }


        public new TextBox Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as TextBox;
        }


        public new TextBox DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as TextBox;
        }


        public new TextBox Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as TextBox;
        }


        public new TextBox Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as TextBox;
        }


        public new TextBox Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as TextBox;
        }


        public new TextBox LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as TextBox;
        }


        public new TextBox Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as TextBox;
        }


        public new TextBox MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as TextBox;
        }


        public new TextBox MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as TextBox;
        }


        public new TextBox Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as TextBox;
        }


        public new TextBox MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as TextBox;
        }


        public new TextBox MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as TextBox;
        }


        public new TextBox FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as TextBox;
        }


        public new TextBox Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as TextBox;
        }


        public new TextBox HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as TextBox;
        }


        public new TextBox VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as TextBox;
        }


        public new TextBox FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as TextBox;
        }


        public new TextBox Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as TextBox;
        }


        public new TextBox ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as TextBox;
        }


        public new TextBox ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as TextBox;
        }


        public new TextBox ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as TextBox;
        }


        public new TextBox AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as TextBox;
        }


        public new TextBox RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as TextBox;
        }


        public new TextBox RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as TextBox;
        }


        public new TextBox Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as TextBox;
        }


        public new TextBox OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as TextBox;
        }


        public new TextBox Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as TextBox;
        }


        public new TextBox Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as TextBox;
        }


        public new TextBox ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as TextBox;
        }


        public new TextBox SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as TextBox;
        }


        public new TextBox IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as TextBox;
        }


        public new TextBox Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as TextBox;
        }

   }

    public partial class ToolBar : FrameworkElement {
        public new System.Windows.Controls.ToolBar C { get { return base.C as System.Windows.Controls.ToolBar; } set { base.C = value; } }


        public static ToolBar Make() {
            return new ToolBar();
        }

        public ToolBar() {
            C = new System.Windows.Controls.ToolBar();
        }

        public new ToolBar GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new ToolBar EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new ToolBar EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new ToolBar EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new ToolBar EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new ToolBar EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new ToolBar EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new ToolBar EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new ToolBar EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new ToolBar EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new ToolBar EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new ToolBar EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new ToolBar EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new ToolBar EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new ToolBar EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new ToolBar EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new ToolBar EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new ToolBar EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new ToolBar EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new ToolBar EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new ToolBar EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new ToolBar EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new ToolBar EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new ToolBar EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new ToolBar EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new ToolBar EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new ToolBar EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new ToolBar EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new ToolBar EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new ToolBar EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new ToolBar EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new ToolBar EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new ToolBar EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new ToolBar EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new ToolBar EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new ToolBar EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new ToolBar EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new ToolBar EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new ToolBar EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new ToolBar EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new ToolBar EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new ToolBar EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new ToolBar EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new ToolBar EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new ToolBar EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new ToolBar EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new ToolBar EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new ToolBar EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new ToolBar EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new ToolBar EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new ToolBar EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new ToolBar EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new ToolBar EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new ToolBar EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new ToolBar EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new ToolBar EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new ToolBar EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new ToolBar EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new ToolBar EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new ToolBar EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new ToolBar EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new ToolBar EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new ToolBar EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new ToolBar EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new ToolBar EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new ToolBar EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new ToolBar EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new ToolBar EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new ToolBar EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new ToolBar EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new ToolBar EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new ToolBar EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new ToolBar EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new ToolBar EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new ToolBar EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new ToolBar EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new ToolBar EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new ToolBar EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new ToolBar EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new ToolBar EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new ToolBar EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new ToolBar EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new ToolBar EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new ToolBar EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new ToolBar EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new ToolBar EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new ToolBar EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new ToolBar EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new ToolBar EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new ToolBar EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new ToolBar EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new ToolBar EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new ToolBar EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new ToolBar EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new ToolBar EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new ToolBar EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new ToolBar EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new ToolBar EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new ToolBar EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new ToolBar EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new ToolBar EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new ToolBar EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new ToolBar EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new ToolBar EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new ToolBar EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new ToolBar EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new ToolBar EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new ToolBar EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new ToolBar EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new ToolBar EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new ToolBar EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }


        public ToolBar Band( Bind<System.Int32> bind ) {
            C.Band = bind.V;
            return this;
        }



        public ToolBar BandIndex( Bind<System.Int32> bind ) {
            C.BandIndex = bind.V;
            return this;
        }



        public ToolBar IsOverflowOpen( Bind<System.Boolean> bind ) {
            C.IsOverflowOpen = bind.V;
            return this;
        }












        public ToolBar Header( Bind<System.Object> bind ) {
            C.Header = bind.V;
            return this;
        }




        public ToolBar HeaderTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.HeaderTemplate = bind.V;
            return this;
        }



        public ToolBar HeaderTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.HeaderTemplateSelector = bind.V;
            return this;
        }



        public ToolBar HeaderStringFormat( Bind<System.String> bind ) {
            C.HeaderStringFormat = bind.V;
            return this;
        }




        public ToolBar ItemsSource( params Bind<object>[] bind ) {
            System.Collections.Generic.List<object> source = new System.Collections.Generic.List<object>();
           foreach( var b in bind ) {
                if ( b.V is FrameworkElement )
                    source.Add( ( (FrameworkElement) b.V ).C );
                else
                    source.Add( b.V );
            }
            C.ItemsSource = source;
            return this;
        }





        public ToolBar DisplayMemberPath( Bind<System.String> bind ) {
            C.DisplayMemberPath = bind.V;
            return this;
        }



        public ToolBar ItemTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ItemTemplate = bind.V;
            return this;
        }



        public ToolBar ItemTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ItemTemplateSelector = bind.V;
            return this;
        }



        public ToolBar ItemStringFormat( Bind<System.String> bind ) {
            C.ItemStringFormat = bind.V;
            return this;
        }



        public ToolBar ItemBindingGroup( Bind<System.Windows.Data.BindingGroup> bind ) {
            C.ItemBindingGroup = bind.V;
            return this;
        }



        public ToolBar ItemContainerStyle( Bind<System.Windows.Style> bind ) {
            C.ItemContainerStyle = bind.V;
            return this;
        }



        public ToolBar ItemContainerStyleSelector( Bind<System.Windows.Controls.StyleSelector> bind ) {
            C.ItemContainerStyleSelector = bind.V;
            return this;
        }



        public ToolBar ItemsPanel( Bind<System.Windows.Controls.ItemsPanelTemplate> bind ) {
            C.ItemsPanel = bind.V;
            return this;
        }





        public ToolBar GroupStyleSelector( Bind<System.Windows.Controls.GroupStyleSelector> bind ) {
            C.GroupStyleSelector = bind.V;
            return this;
        }



        public ToolBar AlternationCount( Bind<System.Int32> bind ) {
            C.AlternationCount = bind.V;
            return this;
        }



        public ToolBar IsTextSearchEnabled( Bind<System.Boolean> bind ) {
            C.IsTextSearchEnabled = bind.V;
            return this;
        }



        public ToolBar IsTextSearchCaseSensitive( Bind<System.Boolean> bind ) {
            C.IsTextSearchCaseSensitive = bind.V;
            return this;
        }



        public ToolBar BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public ToolBar BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public ToolBar Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public ToolBar Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public ToolBar FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public ToolBar FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public ToolBar FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public ToolBar FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public ToolBar FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public ToolBar HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public ToolBar VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public ToolBar TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public ToolBar Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public ToolBar Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new ToolBar Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as ToolBar;
        }


        public new ToolBar OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as ToolBar;
        }


        public new ToolBar UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as ToolBar;
        }


        public new ToolBar Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as ToolBar;
        }


        public new ToolBar DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as ToolBar;
        }


        public new ToolBar Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as ToolBar;
        }


        public new ToolBar Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as ToolBar;
        }


        public new ToolBar Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as ToolBar;
        }


        public new ToolBar LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as ToolBar;
        }


        public new ToolBar Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as ToolBar;
        }


        public new ToolBar MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as ToolBar;
        }


        public new ToolBar MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as ToolBar;
        }


        public new ToolBar Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as ToolBar;
        }


        public new ToolBar MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as ToolBar;
        }


        public new ToolBar MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as ToolBar;
        }


        public new ToolBar FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as ToolBar;
        }


        public new ToolBar Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as ToolBar;
        }


        public new ToolBar HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as ToolBar;
        }


        public new ToolBar VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as ToolBar;
        }


        public new ToolBar FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as ToolBar;
        }


        public new ToolBar Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as ToolBar;
        }


        public new ToolBar ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as ToolBar;
        }


        public new ToolBar ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as ToolBar;
        }


        public new ToolBar ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as ToolBar;
        }


        public new ToolBar AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as ToolBar;
        }


        public new ToolBar RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as ToolBar;
        }


        public new ToolBar RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as ToolBar;
        }


        public new ToolBar Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as ToolBar;
        }


        public new ToolBar OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as ToolBar;
        }


        public new ToolBar Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as ToolBar;
        }


        public new ToolBar Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as ToolBar;
        }


        public new ToolBar ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as ToolBar;
        }


        public new ToolBar SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as ToolBar;
        }


        public new ToolBar IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as ToolBar;
        }


        public new ToolBar Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as ToolBar;
        }

   }

    public partial class TreeView : FrameworkElement {
        public new System.Windows.Controls.TreeView C { get { return base.C as System.Windows.Controls.TreeView; } set { base.C = value; } }


        public static TreeView Make() {
            return new TreeView();
        }

        public TreeView() {
            C = new System.Windows.Controls.TreeView();
        }

        public new TreeView GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new TreeView EventSelectedItemChanged( System.Windows.RoutedPropertyChangedEventHandler<System.Object> e ) {
            C.SelectedItemChanged += e;
            return this;
        }

        public new TreeView EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new TreeView EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new TreeView EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new TreeView EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new TreeView EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new TreeView EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new TreeView EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new TreeView EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new TreeView EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new TreeView EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new TreeView EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new TreeView EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new TreeView EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new TreeView EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new TreeView EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new TreeView EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new TreeView EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new TreeView EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new TreeView EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new TreeView EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new TreeView EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new TreeView EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new TreeView EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new TreeView EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new TreeView EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new TreeView EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new TreeView EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new TreeView EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new TreeView EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new TreeView EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new TreeView EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new TreeView EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new TreeView EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new TreeView EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new TreeView EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new TreeView EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new TreeView EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new TreeView EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new TreeView EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new TreeView EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new TreeView EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new TreeView EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new TreeView EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new TreeView EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new TreeView EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new TreeView EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new TreeView EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new TreeView EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new TreeView EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new TreeView EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new TreeView EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new TreeView EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new TreeView EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new TreeView EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new TreeView EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new TreeView EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new TreeView EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new TreeView EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new TreeView EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new TreeView EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new TreeView EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new TreeView EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new TreeView EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new TreeView EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new TreeView EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new TreeView EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new TreeView EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new TreeView EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new TreeView EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new TreeView EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new TreeView EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new TreeView EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new TreeView EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new TreeView EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new TreeView EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new TreeView EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new TreeView EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new TreeView EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new TreeView EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new TreeView EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new TreeView EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new TreeView EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new TreeView EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new TreeView EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new TreeView EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new TreeView EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new TreeView EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new TreeView EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new TreeView EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new TreeView EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new TreeView EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new TreeView EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new TreeView EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new TreeView EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new TreeView EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new TreeView EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new TreeView EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new TreeView EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new TreeView EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new TreeView EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new TreeView EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new TreeView EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new TreeView EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new TreeView EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new TreeView EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new TreeView EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new TreeView EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new TreeView EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new TreeView EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new TreeView EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }



        public TreeView SelectedValuePath( Bind<System.String> bind ) {
            C.SelectedValuePath = bind.V;
            return this;
        }




        public TreeView ItemsSource( params Bind<object>[] bind ) {
            System.Collections.Generic.List<object> source = new System.Collections.Generic.List<object>();
           foreach( var b in bind ) {
                if ( b.V is FrameworkElement )
                    source.Add( ( (FrameworkElement) b.V ).C );
                else
                    source.Add( b.V );
            }
            C.ItemsSource = source;
            return this;
        }





        public TreeView DisplayMemberPath( Bind<System.String> bind ) {
            C.DisplayMemberPath = bind.V;
            return this;
        }



        public TreeView ItemTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ItemTemplate = bind.V;
            return this;
        }



        public TreeView ItemTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ItemTemplateSelector = bind.V;
            return this;
        }



        public TreeView ItemStringFormat( Bind<System.String> bind ) {
            C.ItemStringFormat = bind.V;
            return this;
        }



        public TreeView ItemBindingGroup( Bind<System.Windows.Data.BindingGroup> bind ) {
            C.ItemBindingGroup = bind.V;
            return this;
        }



        public TreeView ItemContainerStyle( Bind<System.Windows.Style> bind ) {
            C.ItemContainerStyle = bind.V;
            return this;
        }



        public TreeView ItemContainerStyleSelector( Bind<System.Windows.Controls.StyleSelector> bind ) {
            C.ItemContainerStyleSelector = bind.V;
            return this;
        }



        public TreeView ItemsPanel( Bind<System.Windows.Controls.ItemsPanelTemplate> bind ) {
            C.ItemsPanel = bind.V;
            return this;
        }





        public TreeView GroupStyleSelector( Bind<System.Windows.Controls.GroupStyleSelector> bind ) {
            C.GroupStyleSelector = bind.V;
            return this;
        }



        public TreeView AlternationCount( Bind<System.Int32> bind ) {
            C.AlternationCount = bind.V;
            return this;
        }



        public TreeView IsTextSearchEnabled( Bind<System.Boolean> bind ) {
            C.IsTextSearchEnabled = bind.V;
            return this;
        }



        public TreeView IsTextSearchCaseSensitive( Bind<System.Boolean> bind ) {
            C.IsTextSearchCaseSensitive = bind.V;
            return this;
        }



        public TreeView BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public TreeView BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public TreeView Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public TreeView Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public TreeView FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public TreeView FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public TreeView FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public TreeView FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public TreeView FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public TreeView HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public TreeView VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public TreeView TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public TreeView Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public TreeView Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new TreeView Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as TreeView;
        }


        public new TreeView OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as TreeView;
        }


        public new TreeView UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as TreeView;
        }


        public new TreeView Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as TreeView;
        }


        public new TreeView DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as TreeView;
        }


        public new TreeView Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as TreeView;
        }


        public new TreeView Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as TreeView;
        }


        public new TreeView Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as TreeView;
        }


        public new TreeView LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as TreeView;
        }


        public new TreeView Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as TreeView;
        }


        public new TreeView MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as TreeView;
        }


        public new TreeView MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as TreeView;
        }


        public new TreeView Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as TreeView;
        }


        public new TreeView MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as TreeView;
        }


        public new TreeView MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as TreeView;
        }


        public new TreeView FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as TreeView;
        }


        public new TreeView Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as TreeView;
        }


        public new TreeView HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as TreeView;
        }


        public new TreeView VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as TreeView;
        }


        public new TreeView FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as TreeView;
        }


        public new TreeView Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as TreeView;
        }


        public new TreeView ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as TreeView;
        }


        public new TreeView ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as TreeView;
        }


        public new TreeView ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as TreeView;
        }


        public new TreeView AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as TreeView;
        }


        public new TreeView RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as TreeView;
        }


        public new TreeView RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as TreeView;
        }


        public new TreeView Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as TreeView;
        }


        public new TreeView OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as TreeView;
        }


        public new TreeView Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as TreeView;
        }


        public new TreeView Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as TreeView;
        }


        public new TreeView ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as TreeView;
        }


        public new TreeView SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as TreeView;
        }


        public new TreeView IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as TreeView;
        }


        public new TreeView Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as TreeView;
        }

   }

    public partial class TreeViewItem : FrameworkElement {
        public new System.Windows.Controls.TreeViewItem C { get { return base.C as System.Windows.Controls.TreeViewItem; } set { base.C = value; } }


        public static TreeViewItem Make() {
            return new TreeViewItem();
        }

        public TreeViewItem() {
            C = new System.Windows.Controls.TreeViewItem();
        }

        public new TreeViewItem GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new TreeViewItem EventExpanded( System.Windows.RoutedEventHandler e ) {
            C.Expanded += e;
            return this;
        }

        public new TreeViewItem EventCollapsed( System.Windows.RoutedEventHandler e ) {
            C.Collapsed += e;
            return this;
        }

        public new TreeViewItem EventSelected( System.Windows.RoutedEventHandler e ) {
            C.Selected += e;
            return this;
        }

        public new TreeViewItem EventUnselected( System.Windows.RoutedEventHandler e ) {
            C.Unselected += e;
            return this;
        }

        public new TreeViewItem EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new TreeViewItem EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new TreeViewItem EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new TreeViewItem EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new TreeViewItem EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new TreeViewItem EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new TreeViewItem EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new TreeViewItem EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new TreeViewItem EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new TreeViewItem EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new TreeViewItem EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new TreeViewItem EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new TreeViewItem EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new TreeViewItem EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new TreeViewItem EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new TreeViewItem EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new TreeViewItem EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new TreeViewItem EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new TreeViewItem EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new TreeViewItem EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new TreeViewItem EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new TreeViewItem EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new TreeViewItem EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new TreeViewItem EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new TreeViewItem EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new TreeViewItem EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new TreeViewItem EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new TreeViewItem EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new TreeViewItem EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new TreeViewItem EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new TreeViewItem EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new TreeViewItem EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new TreeViewItem EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new TreeViewItem EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new TreeViewItem EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new TreeViewItem EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new TreeViewItem EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new TreeViewItem EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new TreeViewItem EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new TreeViewItem EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new TreeViewItem EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new TreeViewItem EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new TreeViewItem EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new TreeViewItem EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new TreeViewItem EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new TreeViewItem EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new TreeViewItem EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new TreeViewItem EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new TreeViewItem EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new TreeViewItem EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new TreeViewItem EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new TreeViewItem EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new TreeViewItem EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new TreeViewItem EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new TreeViewItem EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new TreeViewItem EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new TreeViewItem EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new TreeViewItem EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new TreeViewItem EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new TreeViewItem EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new TreeViewItem EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new TreeViewItem EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new TreeViewItem EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new TreeViewItem EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new TreeViewItem EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new TreeViewItem EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new TreeViewItem EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new TreeViewItem EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new TreeViewItem EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new TreeViewItem EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new TreeViewItem EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new TreeViewItem EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new TreeViewItem EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new TreeViewItem EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new TreeViewItem EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new TreeViewItem EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new TreeViewItem EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new TreeViewItem EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new TreeViewItem EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new TreeViewItem EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new TreeViewItem EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new TreeViewItem EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new TreeViewItem EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new TreeViewItem EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new TreeViewItem EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new TreeViewItem EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new TreeViewItem EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new TreeViewItem EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new TreeViewItem EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new TreeViewItem EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new TreeViewItem EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new TreeViewItem EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new TreeViewItem EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new TreeViewItem EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new TreeViewItem EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new TreeViewItem EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new TreeViewItem EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new TreeViewItem EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new TreeViewItem EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new TreeViewItem EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new TreeViewItem EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new TreeViewItem EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new TreeViewItem EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new TreeViewItem EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new TreeViewItem EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new TreeViewItem EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new TreeViewItem EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new TreeViewItem EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new TreeViewItem EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new TreeViewItem EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public TreeViewItem IsExpanded( Bind<System.Boolean> bind ) {
            C.IsExpanded = bind.V;
            return this;
        }



        public TreeViewItem IsSelected( Bind<System.Boolean> bind ) {
            C.IsSelected = bind.V;
            return this;
        }




        public TreeViewItem Header( Bind<System.Object> bind ) {
            C.Header = bind.V;
            return this;
        }




        public TreeViewItem HeaderTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.HeaderTemplate = bind.V;
            return this;
        }



        public TreeViewItem HeaderTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.HeaderTemplateSelector = bind.V;
            return this;
        }



        public TreeViewItem HeaderStringFormat( Bind<System.String> bind ) {
            C.HeaderStringFormat = bind.V;
            return this;
        }




        public TreeViewItem ItemsSource( params Bind<object>[] bind ) {
            System.Collections.Generic.List<object> source = new System.Collections.Generic.List<object>();
           foreach( var b in bind ) {
                if ( b.V is FrameworkElement )
                    source.Add( ( (FrameworkElement) b.V ).C );
                else
                    source.Add( b.V );
            }
            C.ItemsSource = source;
            return this;
        }





        public TreeViewItem DisplayMemberPath( Bind<System.String> bind ) {
            C.DisplayMemberPath = bind.V;
            return this;
        }



        public TreeViewItem ItemTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ItemTemplate = bind.V;
            return this;
        }



        public TreeViewItem ItemTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ItemTemplateSelector = bind.V;
            return this;
        }



        public TreeViewItem ItemStringFormat( Bind<System.String> bind ) {
            C.ItemStringFormat = bind.V;
            return this;
        }



        public TreeViewItem ItemBindingGroup( Bind<System.Windows.Data.BindingGroup> bind ) {
            C.ItemBindingGroup = bind.V;
            return this;
        }



        public TreeViewItem ItemContainerStyle( Bind<System.Windows.Style> bind ) {
            C.ItemContainerStyle = bind.V;
            return this;
        }



        public TreeViewItem ItemContainerStyleSelector( Bind<System.Windows.Controls.StyleSelector> bind ) {
            C.ItemContainerStyleSelector = bind.V;
            return this;
        }



        public TreeViewItem ItemsPanel( Bind<System.Windows.Controls.ItemsPanelTemplate> bind ) {
            C.ItemsPanel = bind.V;
            return this;
        }





        public TreeViewItem GroupStyleSelector( Bind<System.Windows.Controls.GroupStyleSelector> bind ) {
            C.GroupStyleSelector = bind.V;
            return this;
        }



        public TreeViewItem AlternationCount( Bind<System.Int32> bind ) {
            C.AlternationCount = bind.V;
            return this;
        }



        public TreeViewItem IsTextSearchEnabled( Bind<System.Boolean> bind ) {
            C.IsTextSearchEnabled = bind.V;
            return this;
        }



        public TreeViewItem IsTextSearchCaseSensitive( Bind<System.Boolean> bind ) {
            C.IsTextSearchCaseSensitive = bind.V;
            return this;
        }



        public TreeViewItem BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public TreeViewItem BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public TreeViewItem Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public TreeViewItem Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public TreeViewItem FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public TreeViewItem FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public TreeViewItem FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public TreeViewItem FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public TreeViewItem FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public TreeViewItem HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public TreeViewItem VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public TreeViewItem TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public TreeViewItem Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public TreeViewItem Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new TreeViewItem Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as TreeViewItem;
        }


        public new TreeViewItem OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as TreeViewItem;
        }


        public new TreeViewItem UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as TreeViewItem;
        }


        public new TreeViewItem Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as TreeViewItem;
        }


        public new TreeViewItem DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as TreeViewItem;
        }


        public new TreeViewItem Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as TreeViewItem;
        }


        public new TreeViewItem Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as TreeViewItem;
        }


        public new TreeViewItem Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as TreeViewItem;
        }


        public new TreeViewItem LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as TreeViewItem;
        }


        public new TreeViewItem Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as TreeViewItem;
        }


        public new TreeViewItem MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as TreeViewItem;
        }


        public new TreeViewItem MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as TreeViewItem;
        }


        public new TreeViewItem Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as TreeViewItem;
        }


        public new TreeViewItem MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as TreeViewItem;
        }


        public new TreeViewItem MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as TreeViewItem;
        }


        public new TreeViewItem FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as TreeViewItem;
        }


        public new TreeViewItem Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as TreeViewItem;
        }


        public new TreeViewItem HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as TreeViewItem;
        }


        public new TreeViewItem VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as TreeViewItem;
        }


        public new TreeViewItem FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as TreeViewItem;
        }


        public new TreeViewItem Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as TreeViewItem;
        }


        public new TreeViewItem ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as TreeViewItem;
        }


        public new TreeViewItem ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as TreeViewItem;
        }


        public new TreeViewItem ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as TreeViewItem;
        }


        public new TreeViewItem AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as TreeViewItem;
        }


        public new TreeViewItem RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as TreeViewItem;
        }


        public new TreeViewItem RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as TreeViewItem;
        }


        public new TreeViewItem Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as TreeViewItem;
        }


        public new TreeViewItem OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as TreeViewItem;
        }


        public new TreeViewItem Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as TreeViewItem;
        }


        public new TreeViewItem Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as TreeViewItem;
        }


        public new TreeViewItem ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as TreeViewItem;
        }


        public new TreeViewItem SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as TreeViewItem;
        }


        public new TreeViewItem IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as TreeViewItem;
        }


        public new TreeViewItem Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as TreeViewItem;
        }

   }

    public partial class UserControl : FrameworkElement {
        public new System.Windows.Controls.UserControl C { get { return base.C as System.Windows.Controls.UserControl; } set { base.C = value; } }


        public static UserControl Make() {
            return new UserControl();
        }

        public UserControl() {
            C = new System.Windows.Controls.UserControl();
        }

        public new UserControl GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new UserControl EventPreviewMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDoubleClick += e;
            return this;
        }

        public new UserControl EventMouseDoubleClick( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDoubleClick += e;
            return this;
        }

        public new UserControl EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new UserControl EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new UserControl EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new UserControl EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new UserControl EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new UserControl EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new UserControl EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new UserControl EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new UserControl EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new UserControl EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new UserControl EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new UserControl EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new UserControl EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new UserControl EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new UserControl EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new UserControl EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new UserControl EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new UserControl EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new UserControl EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new UserControl EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new UserControl EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new UserControl EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new UserControl EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new UserControl EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new UserControl EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new UserControl EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new UserControl EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new UserControl EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new UserControl EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new UserControl EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new UserControl EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new UserControl EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new UserControl EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new UserControl EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new UserControl EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new UserControl EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new UserControl EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new UserControl EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new UserControl EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new UserControl EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new UserControl EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new UserControl EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new UserControl EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new UserControl EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new UserControl EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new UserControl EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new UserControl EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new UserControl EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new UserControl EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new UserControl EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new UserControl EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new UserControl EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new UserControl EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new UserControl EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new UserControl EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new UserControl EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new UserControl EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new UserControl EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new UserControl EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new UserControl EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new UserControl EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new UserControl EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new UserControl EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new UserControl EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new UserControl EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new UserControl EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new UserControl EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new UserControl EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new UserControl EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new UserControl EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new UserControl EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new UserControl EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new UserControl EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new UserControl EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new UserControl EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new UserControl EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new UserControl EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new UserControl EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new UserControl EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new UserControl EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new UserControl EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new UserControl EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new UserControl EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new UserControl EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new UserControl EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new UserControl EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new UserControl EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new UserControl EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new UserControl EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new UserControl EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new UserControl EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new UserControl EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new UserControl EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new UserControl EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new UserControl EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new UserControl EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new UserControl EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new UserControl EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new UserControl EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new UserControl EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new UserControl EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new UserControl EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new UserControl EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new UserControl EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new UserControl EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new UserControl EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new UserControl EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new UserControl EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public UserControl Content( Bind<System.Object> bind ) {
            if ( bind.V is FrameworkElement )
                C.Content = ((FrameworkElement) bind.V).C;
            else
                C.Content = bind.V;
            return this;
        }




        public UserControl ContentTemplate( Bind<System.Windows.DataTemplate> bind ) {
            C.ContentTemplate = bind.V;
            return this;
        }



        public UserControl ContentTemplateSelector( Bind<System.Windows.Controls.DataTemplateSelector> bind ) {
            C.ContentTemplateSelector = bind.V;
            return this;
        }



        public UserControl ContentStringFormat( Bind<System.String> bind ) {
            C.ContentStringFormat = bind.V;
            return this;
        }



        public UserControl BorderBrush( Bind<System.Windows.Media.Brush> bind ) {
            C.BorderBrush = bind.V;
            return this;
        }



        public UserControl BorderThickness( Bind<System.Windows.Thickness> bind ) {
            C.BorderThickness = bind.V;
            return this;
        }



        public UserControl Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }



        public UserControl Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public UserControl FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public UserControl FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public UserControl FontStretch( Bind<System.Windows.FontStretch> bind ) {
            C.FontStretch = bind.V;
            return this;
        }



        public UserControl FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public UserControl FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public UserControl HorizontalContentAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
            C.HorizontalContentAlignment = bind.V;
            return this;
        }



        public UserControl VerticalContentAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
            C.VerticalContentAlignment = bind.V;
            return this;
        }



        public UserControl TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public UserControl Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public UserControl Template( Bind<System.Windows.Controls.ControlTemplate> bind ) {
            C.Template = bind.V;
            return this;
        }



        public new UserControl Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as UserControl;
        }


        public new UserControl OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as UserControl;
        }


        public new UserControl UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as UserControl;
        }


        public new UserControl Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as UserControl;
        }


        public new UserControl DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as UserControl;
        }


        public new UserControl Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as UserControl;
        }


        public new UserControl Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as UserControl;
        }


        public new UserControl Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as UserControl;
        }


        public new UserControl LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as UserControl;
        }


        public new UserControl Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as UserControl;
        }


        public new UserControl MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as UserControl;
        }


        public new UserControl MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as UserControl;
        }


        public new UserControl Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as UserControl;
        }


        public new UserControl MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as UserControl;
        }


        public new UserControl MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as UserControl;
        }


        public new UserControl FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as UserControl;
        }


        public new UserControl Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as UserControl;
        }


        public new UserControl HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as UserControl;
        }


        public new UserControl VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as UserControl;
        }


        public new UserControl FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as UserControl;
        }


        public new UserControl Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as UserControl;
        }


        public new UserControl ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as UserControl;
        }


        public new UserControl ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as UserControl;
        }


        public new UserControl ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as UserControl;
        }


        public new UserControl AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as UserControl;
        }


        public new UserControl RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as UserControl;
        }


        public new UserControl RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as UserControl;
        }


        public new UserControl Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as UserControl;
        }


        public new UserControl OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as UserControl;
        }


        public new UserControl Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as UserControl;
        }


        public new UserControl Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as UserControl;
        }


        public new UserControl ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as UserControl;
        }


        public new UserControl SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as UserControl;
        }


        public new UserControl IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as UserControl;
        }


        public new UserControl Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as UserControl;
        }

   }

    public partial class Viewbox : FrameworkElement {
        public new System.Windows.Controls.Viewbox C { get { return base.C as System.Windows.Controls.Viewbox; } set { base.C = value; } }


        public static Viewbox Make() {
            return new Viewbox();
        }

        public Viewbox() {
            C = new System.Windows.Controls.Viewbox();
        }

        public new Viewbox GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new Viewbox EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Viewbox EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Viewbox EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Viewbox EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Viewbox EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Viewbox EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Viewbox EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Viewbox EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Viewbox EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Viewbox EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Viewbox EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Viewbox EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Viewbox EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Viewbox EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Viewbox EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Viewbox EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Viewbox EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Viewbox EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Viewbox EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Viewbox EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Viewbox EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Viewbox EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Viewbox EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Viewbox EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Viewbox EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Viewbox EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Viewbox EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Viewbox EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Viewbox EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Viewbox EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Viewbox EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Viewbox EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Viewbox EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Viewbox EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Viewbox EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Viewbox EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Viewbox EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Viewbox EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Viewbox EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Viewbox EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Viewbox EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Viewbox EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Viewbox EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Viewbox EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Viewbox EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Viewbox EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Viewbox EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Viewbox EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Viewbox EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Viewbox EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Viewbox EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Viewbox EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Viewbox EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Viewbox EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Viewbox EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Viewbox EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Viewbox EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Viewbox EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Viewbox EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Viewbox EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Viewbox EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Viewbox EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Viewbox EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Viewbox EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Viewbox EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Viewbox EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Viewbox EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Viewbox EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Viewbox EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Viewbox EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Viewbox EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Viewbox EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Viewbox EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Viewbox EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Viewbox EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Viewbox EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Viewbox EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Viewbox EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Viewbox EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Viewbox EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Viewbox EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Viewbox EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Viewbox EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Viewbox EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Viewbox EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Viewbox EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Viewbox EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Viewbox EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Viewbox EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Viewbox EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Viewbox EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Viewbox EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Viewbox EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Viewbox EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Viewbox EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Viewbox EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Viewbox EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Viewbox EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Viewbox EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Viewbox EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Viewbox EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Viewbox EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Viewbox EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Viewbox EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Viewbox EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Viewbox EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Viewbox EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Viewbox EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public Viewbox Child( Bind<System.Windows.UIElement> bind ) {
            C.Child = bind.V;
            return this;
        }



        public Viewbox Stretch( Bind<System.Windows.Media.Stretch> bind ) {
            C.Stretch = bind.V;
            return this;
        }



        public Viewbox StretchDirection( Bind<System.Windows.Controls.StretchDirection> bind ) {
            C.StretchDirection = bind.V;
            return this;
        }



        public new Viewbox Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Viewbox;
        }


        public new Viewbox OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Viewbox;
        }


        public new Viewbox UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Viewbox;
        }


        public new Viewbox Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Viewbox;
        }


        public new Viewbox DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Viewbox;
        }


        public new Viewbox Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Viewbox;
        }


        public new Viewbox Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Viewbox;
        }


        public new Viewbox Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Viewbox;
        }


        public new Viewbox LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Viewbox;
        }


        public new Viewbox Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Viewbox;
        }


        public new Viewbox MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Viewbox;
        }


        public new Viewbox MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Viewbox;
        }


        public new Viewbox Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Viewbox;
        }


        public new Viewbox MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Viewbox;
        }


        public new Viewbox MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Viewbox;
        }


        public new Viewbox FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Viewbox;
        }


        public new Viewbox Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Viewbox;
        }


        public new Viewbox HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Viewbox;
        }


        public new Viewbox VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Viewbox;
        }


        public new Viewbox FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Viewbox;
        }


        public new Viewbox Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Viewbox;
        }


        public new Viewbox ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Viewbox;
        }


        public new Viewbox ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Viewbox;
        }


        public new Viewbox ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Viewbox;
        }


        public new Viewbox AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Viewbox;
        }


        public new Viewbox RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Viewbox;
        }


        public new Viewbox RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Viewbox;
        }


        public new Viewbox Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Viewbox;
        }


        public new Viewbox OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Viewbox;
        }


        public new Viewbox Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Viewbox;
        }


        public new Viewbox Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Viewbox;
        }


        public new Viewbox ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Viewbox;
        }


        public new Viewbox SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Viewbox;
        }


        public new Viewbox IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Viewbox;
        }


        public new Viewbox Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Viewbox;
        }

   }

    public partial class Viewport3D : FrameworkElement {
        public new System.Windows.Controls.Viewport3D C { get { return base.C as System.Windows.Controls.Viewport3D; } set { base.C = value; } }


        public static Viewport3D Make() {
            return new Viewport3D();
        }

        public Viewport3D() {
            C = new System.Windows.Controls.Viewport3D();
        }

        public new Viewport3D GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new Viewport3D EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new Viewport3D EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new Viewport3D EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new Viewport3D EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new Viewport3D EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new Viewport3D EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new Viewport3D EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new Viewport3D EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new Viewport3D EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new Viewport3D EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new Viewport3D EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new Viewport3D EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new Viewport3D EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new Viewport3D EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new Viewport3D EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new Viewport3D EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new Viewport3D EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new Viewport3D EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new Viewport3D EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new Viewport3D EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new Viewport3D EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new Viewport3D EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new Viewport3D EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new Viewport3D EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new Viewport3D EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new Viewport3D EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new Viewport3D EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new Viewport3D EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new Viewport3D EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new Viewport3D EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new Viewport3D EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new Viewport3D EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new Viewport3D EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new Viewport3D EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new Viewport3D EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new Viewport3D EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new Viewport3D EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new Viewport3D EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new Viewport3D EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new Viewport3D EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new Viewport3D EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new Viewport3D EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new Viewport3D EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new Viewport3D EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new Viewport3D EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new Viewport3D EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new Viewport3D EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new Viewport3D EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new Viewport3D EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new Viewport3D EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new Viewport3D EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new Viewport3D EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new Viewport3D EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new Viewport3D EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new Viewport3D EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new Viewport3D EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new Viewport3D EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new Viewport3D EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new Viewport3D EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new Viewport3D EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new Viewport3D EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new Viewport3D EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new Viewport3D EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new Viewport3D EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new Viewport3D EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new Viewport3D EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new Viewport3D EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new Viewport3D EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new Viewport3D EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new Viewport3D EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new Viewport3D EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new Viewport3D EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new Viewport3D EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new Viewport3D EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new Viewport3D EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new Viewport3D EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new Viewport3D EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new Viewport3D EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new Viewport3D EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new Viewport3D EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new Viewport3D EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new Viewport3D EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new Viewport3D EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new Viewport3D EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new Viewport3D EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new Viewport3D EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new Viewport3D EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new Viewport3D EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new Viewport3D EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new Viewport3D EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new Viewport3D EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new Viewport3D EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new Viewport3D EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new Viewport3D EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new Viewport3D EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new Viewport3D EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new Viewport3D EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new Viewport3D EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new Viewport3D EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new Viewport3D EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new Viewport3D EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new Viewport3D EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new Viewport3D EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new Viewport3D EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new Viewport3D EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new Viewport3D EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new Viewport3D EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new Viewport3D EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public Viewport3D Camera( Bind<System.Windows.Media.Media3D.Camera> bind ) {
            C.Camera = bind.V;
            return this;
        }




        public new Viewport3D Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as Viewport3D;
        }


        public new Viewport3D OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as Viewport3D;
        }


        public new Viewport3D UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as Viewport3D;
        }


        public new Viewport3D Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as Viewport3D;
        }


        public new Viewport3D DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as Viewport3D;
        }


        public new Viewport3D Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as Viewport3D;
        }


        public new Viewport3D Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as Viewport3D;
        }


        public new Viewport3D Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as Viewport3D;
        }


        public new Viewport3D LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as Viewport3D;
        }


        public new Viewport3D Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as Viewport3D;
        }


        public new Viewport3D MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as Viewport3D;
        }


        public new Viewport3D MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as Viewport3D;
        }


        public new Viewport3D Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as Viewport3D;
        }


        public new Viewport3D MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as Viewport3D;
        }


        public new Viewport3D MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as Viewport3D;
        }


        public new Viewport3D FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as Viewport3D;
        }


        public new Viewport3D Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as Viewport3D;
        }


        public new Viewport3D HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as Viewport3D;
        }


        public new Viewport3D VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as Viewport3D;
        }


        public new Viewport3D FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as Viewport3D;
        }


        public new Viewport3D Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as Viewport3D;
        }


        public new Viewport3D ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as Viewport3D;
        }


        public new Viewport3D ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as Viewport3D;
        }


        public new Viewport3D ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as Viewport3D;
        }


        public new Viewport3D AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as Viewport3D;
        }


        public new Viewport3D RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as Viewport3D;
        }


        public new Viewport3D RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as Viewport3D;
        }


        public new Viewport3D Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as Viewport3D;
        }


        public new Viewport3D OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as Viewport3D;
        }


        public new Viewport3D Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as Viewport3D;
        }


        public new Viewport3D Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as Viewport3D;
        }


        public new Viewport3D ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as Viewport3D;
        }


        public new Viewport3D SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as Viewport3D;
        }


        public new Viewport3D IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as Viewport3D;
        }


        public new Viewport3D Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as Viewport3D;
        }

   }

    public partial class WebBrowser : FrameworkElement {
        public new System.Windows.Controls.WebBrowser C { get { return base.C as System.Windows.Controls.WebBrowser; } set { base.C = value; } }


        public static WebBrowser Make() {
            return new WebBrowser();
        }

        public WebBrowser() {
            C = new System.Windows.Controls.WebBrowser();
        }

        public new WebBrowser GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new WebBrowser EventNavigating( System.Windows.Navigation.NavigatingCancelEventHandler e ) {
            C.Navigating += e;
            return this;
        }

        public new WebBrowser EventNavigated( System.Windows.Navigation.NavigatedEventHandler e ) {
            C.Navigated += e;
            return this;
        }

        public new WebBrowser EventLoadCompleted( System.Windows.Navigation.LoadCompletedEventHandler e ) {
            C.LoadCompleted += e;
            return this;
        }

        public new WebBrowser EventMessageHook( System.Windows.Interop.HwndSourceHook e ) {
            C.MessageHook += e;
            return this;
        }

        public new WebBrowser EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new WebBrowser EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new WebBrowser EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new WebBrowser EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new WebBrowser EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new WebBrowser EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new WebBrowser EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new WebBrowser EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new WebBrowser EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new WebBrowser EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new WebBrowser EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new WebBrowser EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new WebBrowser EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new WebBrowser EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new WebBrowser EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new WebBrowser EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new WebBrowser EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new WebBrowser EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new WebBrowser EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new WebBrowser EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new WebBrowser EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new WebBrowser EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new WebBrowser EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new WebBrowser EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new WebBrowser EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new WebBrowser EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new WebBrowser EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new WebBrowser EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new WebBrowser EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new WebBrowser EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new WebBrowser EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new WebBrowser EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new WebBrowser EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new WebBrowser EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new WebBrowser EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new WebBrowser EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new WebBrowser EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new WebBrowser EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new WebBrowser EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new WebBrowser EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new WebBrowser EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new WebBrowser EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new WebBrowser EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new WebBrowser EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new WebBrowser EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new WebBrowser EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new WebBrowser EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new WebBrowser EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new WebBrowser EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new WebBrowser EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new WebBrowser EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new WebBrowser EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new WebBrowser EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new WebBrowser EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new WebBrowser EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new WebBrowser EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new WebBrowser EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new WebBrowser EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new WebBrowser EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new WebBrowser EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new WebBrowser EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new WebBrowser EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new WebBrowser EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new WebBrowser EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new WebBrowser EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new WebBrowser EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new WebBrowser EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new WebBrowser EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new WebBrowser EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new WebBrowser EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new WebBrowser EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new WebBrowser EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new WebBrowser EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new WebBrowser EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new WebBrowser EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new WebBrowser EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new WebBrowser EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new WebBrowser EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new WebBrowser EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new WebBrowser EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new WebBrowser EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new WebBrowser EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new WebBrowser EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new WebBrowser EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new WebBrowser EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new WebBrowser EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new WebBrowser EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new WebBrowser EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new WebBrowser EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new WebBrowser EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new WebBrowser EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new WebBrowser EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new WebBrowser EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new WebBrowser EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new WebBrowser EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new WebBrowser EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new WebBrowser EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new WebBrowser EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new WebBrowser EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new WebBrowser EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new WebBrowser EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new WebBrowser EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new WebBrowser EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new WebBrowser EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new WebBrowser EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new WebBrowser EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new WebBrowser EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new WebBrowser EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public WebBrowser Source( Bind<System.Uri> bind ) {
            C.Source = bind.V;
            return this;
        }





        public WebBrowser ObjectForScripting( Bind<System.Object> bind ) {
            C.ObjectForScripting = bind.V;
            return this;
        }





        public new WebBrowser Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as WebBrowser;
        }


        public new WebBrowser OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as WebBrowser;
        }


        public new WebBrowser UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as WebBrowser;
        }


        public new WebBrowser Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as WebBrowser;
        }


        public new WebBrowser DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as WebBrowser;
        }


        public new WebBrowser Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as WebBrowser;
        }


        public new WebBrowser Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as WebBrowser;
        }


        public new WebBrowser Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as WebBrowser;
        }


        public new WebBrowser LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as WebBrowser;
        }


        public new WebBrowser Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as WebBrowser;
        }


        public new WebBrowser MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as WebBrowser;
        }


        public new WebBrowser MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as WebBrowser;
        }


        public new WebBrowser Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as WebBrowser;
        }


        public new WebBrowser MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as WebBrowser;
        }


        public new WebBrowser MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as WebBrowser;
        }


        public new WebBrowser FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as WebBrowser;
        }


        public new WebBrowser Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as WebBrowser;
        }


        public new WebBrowser HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as WebBrowser;
        }


        public new WebBrowser VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as WebBrowser;
        }


        public new WebBrowser FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as WebBrowser;
        }


        public new WebBrowser Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as WebBrowser;
        }


        public new WebBrowser ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as WebBrowser;
        }


        public new WebBrowser ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as WebBrowser;
        }


        public new WebBrowser ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as WebBrowser;
        }


        public new WebBrowser AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as WebBrowser;
        }


        public new WebBrowser RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as WebBrowser;
        }


        public new WebBrowser RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as WebBrowser;
        }


        public new WebBrowser Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as WebBrowser;
        }


        public new WebBrowser OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as WebBrowser;
        }


        public new WebBrowser Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as WebBrowser;
        }


        public new WebBrowser Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as WebBrowser;
        }


        public new WebBrowser ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as WebBrowser;
        }


        public new WebBrowser SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as WebBrowser;
        }


        public new WebBrowser IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as WebBrowser;
        }


        public new WebBrowser Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as WebBrowser;
        }

   }

    public partial class WrapPanel : FrameworkElement {
        public new System.Windows.Controls.WrapPanel C { get { return base.C as System.Windows.Controls.WrapPanel; } set { base.C = value; } }


        public static WrapPanel Make() {
            return new WrapPanel();
        }

        public WrapPanel() {
            C = new System.Windows.Controls.WrapPanel();
        }

        public new WrapPanel GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public WrapPanel Children( params Bind<FrameworkElement>[] bind ) {
           foreach( var b in bind ) {
                C.Children.Add( ( (FrameworkElement) b.V ).C);
            }
            return this;
        }


        public new WrapPanel EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new WrapPanel EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new WrapPanel EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new WrapPanel EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new WrapPanel EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new WrapPanel EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new WrapPanel EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new WrapPanel EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new WrapPanel EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new WrapPanel EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new WrapPanel EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new WrapPanel EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new WrapPanel EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new WrapPanel EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new WrapPanel EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new WrapPanel EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new WrapPanel EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new WrapPanel EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new WrapPanel EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new WrapPanel EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new WrapPanel EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new WrapPanel EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new WrapPanel EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new WrapPanel EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new WrapPanel EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new WrapPanel EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new WrapPanel EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new WrapPanel EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new WrapPanel EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new WrapPanel EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new WrapPanel EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new WrapPanel EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new WrapPanel EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new WrapPanel EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new WrapPanel EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new WrapPanel EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new WrapPanel EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new WrapPanel EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new WrapPanel EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new WrapPanel EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new WrapPanel EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new WrapPanel EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new WrapPanel EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new WrapPanel EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new WrapPanel EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new WrapPanel EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new WrapPanel EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new WrapPanel EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new WrapPanel EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new WrapPanel EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new WrapPanel EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new WrapPanel EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new WrapPanel EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new WrapPanel EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new WrapPanel EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new WrapPanel EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new WrapPanel EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new WrapPanel EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new WrapPanel EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new WrapPanel EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new WrapPanel EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new WrapPanel EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new WrapPanel EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new WrapPanel EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new WrapPanel EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new WrapPanel EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new WrapPanel EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new WrapPanel EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new WrapPanel EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new WrapPanel EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new WrapPanel EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new WrapPanel EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new WrapPanel EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new WrapPanel EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new WrapPanel EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new WrapPanel EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new WrapPanel EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new WrapPanel EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new WrapPanel EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new WrapPanel EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new WrapPanel EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new WrapPanel EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new WrapPanel EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new WrapPanel EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new WrapPanel EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new WrapPanel EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new WrapPanel EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new WrapPanel EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new WrapPanel EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new WrapPanel EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new WrapPanel EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new WrapPanel EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new WrapPanel EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new WrapPanel EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new WrapPanel EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new WrapPanel EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new WrapPanel EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new WrapPanel EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new WrapPanel EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new WrapPanel EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new WrapPanel EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new WrapPanel EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new WrapPanel EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new WrapPanel EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new WrapPanel EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new WrapPanel EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new WrapPanel EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new WrapPanel EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public WrapPanel ItemWidth( Bind<System.Double> bind ) {
            C.ItemWidth = bind.V;
            return this;
        }



        public WrapPanel ItemHeight( Bind<System.Double> bind ) {
            C.ItemHeight = bind.V;
            return this;
        }



        public WrapPanel Orientation( Bind<System.Windows.Controls.Orientation> bind ) {
            C.Orientation = bind.V;
            return this;
        }



        public WrapPanel Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }




        public WrapPanel IsItemsHost( Bind<System.Boolean> bind ) {
            C.IsItemsHost = bind.V;
            return this;
        }



        public new WrapPanel Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as WrapPanel;
        }


        public new WrapPanel OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as WrapPanel;
        }


        public new WrapPanel UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as WrapPanel;
        }


        public new WrapPanel Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as WrapPanel;
        }


        public new WrapPanel DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as WrapPanel;
        }


        public new WrapPanel Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as WrapPanel;
        }


        public new WrapPanel Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as WrapPanel;
        }


        public new WrapPanel Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as WrapPanel;
        }


        public new WrapPanel LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as WrapPanel;
        }


        public new WrapPanel Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as WrapPanel;
        }


        public new WrapPanel MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as WrapPanel;
        }


        public new WrapPanel MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as WrapPanel;
        }


        public new WrapPanel Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as WrapPanel;
        }


        public new WrapPanel MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as WrapPanel;
        }


        public new WrapPanel MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as WrapPanel;
        }


        public new WrapPanel FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as WrapPanel;
        }


        public new WrapPanel Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as WrapPanel;
        }


        public new WrapPanel HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as WrapPanel;
        }


        public new WrapPanel VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as WrapPanel;
        }


        public new WrapPanel FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as WrapPanel;
        }


        public new WrapPanel Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as WrapPanel;
        }


        public new WrapPanel ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as WrapPanel;
        }


        public new WrapPanel ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as WrapPanel;
        }


        public new WrapPanel ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as WrapPanel;
        }


        public new WrapPanel AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as WrapPanel;
        }


        public new WrapPanel RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as WrapPanel;
        }


        public new WrapPanel RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as WrapPanel;
        }


        public new WrapPanel Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as WrapPanel;
        }


        public new WrapPanel OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as WrapPanel;
        }


        public new WrapPanel Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as WrapPanel;
        }


        public new WrapPanel Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as WrapPanel;
        }


        public new WrapPanel ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as WrapPanel;
        }


        public new WrapPanel SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as WrapPanel;
        }


        public new WrapPanel IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as WrapPanel;
        }


        public new WrapPanel Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as WrapPanel;
        }

   }

    public partial class WindowsFormsHost : FrameworkElement {
        public new System.Windows.Forms.Integration.WindowsFormsHost C { get { return base.C as System.Windows.Forms.Integration.WindowsFormsHost; } set { base.C = value; } }


        public static WindowsFormsHost Make() {
            return new WindowsFormsHost();
        }

        public WindowsFormsHost() {
            C = new System.Windows.Forms.Integration.WindowsFormsHost();
        }

        public new WindowsFormsHost GridSetRowColumn( int row, int column, int colspan=0, int rowspan=0 ) {
            System.Windows.Controls.Grid.SetColumn( C, column );
            System.Windows.Controls.Grid.SetRow( C, row );
            if ( colspan != 0 )
                System.Windows.Controls.Grid.SetColumnSpan( C, colspan );
            if ( rowspan != 0 )
                System.Windows.Controls.Grid.SetRowSpan( C, rowspan );
            return this;
        }





        public new WindowsFormsHost EventLayoutError( EventHandler<System.Windows.Forms.Integration.LayoutExceptionEventArgs> e ) {
            C.LayoutError += e;
            return this;
        }

        public new WindowsFormsHost EventChildChanged( EventHandler<System.Windows.Forms.Integration.ChildChangedEventArgs> e ) {
            C.ChildChanged += e;
            return this;
        }

        public new WindowsFormsHost EventMessageHook( System.Windows.Interop.HwndSourceHook e ) {
            C.MessageHook += e;
            return this;
        }

        public new WindowsFormsHost EventTargetUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.TargetUpdated += e;
            return this;
        }

        public new WindowsFormsHost EventSourceUpdated( EventHandler<System.Windows.Data.DataTransferEventArgs> e ) {
            C.SourceUpdated += e;
            return this;
        }

        public new WindowsFormsHost EventDataContextChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.DataContextChanged += e;
            return this;
        }

        public new WindowsFormsHost EventRequestBringIntoView( System.Windows.RequestBringIntoViewEventHandler e ) {
            C.RequestBringIntoView += e;
            return this;
        }

        public new WindowsFormsHost EventSizeChanged( System.Windows.SizeChangedEventHandler e ) {
            C.SizeChanged += e;
            return this;
        }

        public new WindowsFormsHost EventInitialized( System.EventHandler e ) {
            C.Initialized += e;
            return this;
        }

        public new WindowsFormsHost EventLoaded( System.Windows.RoutedEventHandler e ) {
            C.Loaded += e;
            return this;
        }

        public new WindowsFormsHost EventUnloaded( System.Windows.RoutedEventHandler e ) {
            C.Unloaded += e;
            return this;
        }

        public new WindowsFormsHost EventToolTipOpening( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipOpening += e;
            return this;
        }

        public new WindowsFormsHost EventToolTipClosing( System.Windows.Controls.ToolTipEventHandler e ) {
            C.ToolTipClosing += e;
            return this;
        }

        public new WindowsFormsHost EventContextMenuOpening( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuOpening += e;
            return this;
        }

        public new WindowsFormsHost EventContextMenuClosing( System.Windows.Controls.ContextMenuEventHandler e ) {
            C.ContextMenuClosing += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseDown += e;
            return this;
        }

        public new WindowsFormsHost EventMouseDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseDown += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseUp += e;
            return this;
        }

        public new WindowsFormsHost EventMouseUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseUp += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonDown += e;
            return this;
        }

        public new WindowsFormsHost EventMouseLeftButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonDown += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseLeftButtonUp += e;
            return this;
        }

        public new WindowsFormsHost EventMouseLeftButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseLeftButtonUp += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonDown += e;
            return this;
        }

        public new WindowsFormsHost EventMouseRightButtonDown( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonDown += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.PreviewMouseRightButtonUp += e;
            return this;
        }

        public new WindowsFormsHost EventMouseRightButtonUp( System.Windows.Input.MouseButtonEventHandler e ) {
            C.MouseRightButtonUp += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.PreviewMouseMove += e;
            return this;
        }

        public new WindowsFormsHost EventMouseMove( System.Windows.Input.MouseEventHandler e ) {
            C.MouseMove += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.PreviewMouseWheel += e;
            return this;
        }

        public new WindowsFormsHost EventMouseWheel( System.Windows.Input.MouseWheelEventHandler e ) {
            C.MouseWheel += e;
            return this;
        }

        public new WindowsFormsHost EventMouseEnter( System.Windows.Input.MouseEventHandler e ) {
            C.MouseEnter += e;
            return this;
        }

        public new WindowsFormsHost EventMouseLeave( System.Windows.Input.MouseEventHandler e ) {
            C.MouseLeave += e;
            return this;
        }

        public new WindowsFormsHost EventGotMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.GotMouseCapture += e;
            return this;
        }

        public new WindowsFormsHost EventLostMouseCapture( System.Windows.Input.MouseEventHandler e ) {
            C.LostMouseCapture += e;
            return this;
        }

        public new WindowsFormsHost EventQueryCursor( System.Windows.Input.QueryCursorEventHandler e ) {
            C.QueryCursor += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.PreviewStylusDown += e;
            return this;
        }

        public new WindowsFormsHost EventStylusDown( System.Windows.Input.StylusDownEventHandler e ) {
            C.StylusDown += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusUp += e;
            return this;
        }

        public new WindowsFormsHost EventStylusUp( System.Windows.Input.StylusEventHandler e ) {
            C.StylusUp += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusMove += e;
            return this;
        }

        public new WindowsFormsHost EventStylusMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusMove += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInAirMove += e;
            return this;
        }

        public new WindowsFormsHost EventStylusInAirMove( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInAirMove += e;
            return this;
        }

        public new WindowsFormsHost EventStylusEnter( System.Windows.Input.StylusEventHandler e ) {
            C.StylusEnter += e;
            return this;
        }

        public new WindowsFormsHost EventStylusLeave( System.Windows.Input.StylusEventHandler e ) {
            C.StylusLeave += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusInRange += e;
            return this;
        }

        public new WindowsFormsHost EventStylusInRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusInRange += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.PreviewStylusOutOfRange += e;
            return this;
        }

        public new WindowsFormsHost EventStylusOutOfRange( System.Windows.Input.StylusEventHandler e ) {
            C.StylusOutOfRange += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.PreviewStylusSystemGesture += e;
            return this;
        }

        public new WindowsFormsHost EventStylusSystemGesture( System.Windows.Input.StylusSystemGestureEventHandler e ) {
            C.StylusSystemGesture += e;
            return this;
        }

        public new WindowsFormsHost EventGotStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.GotStylusCapture += e;
            return this;
        }

        public new WindowsFormsHost EventLostStylusCapture( System.Windows.Input.StylusEventHandler e ) {
            C.LostStylusCapture += e;
            return this;
        }

        public new WindowsFormsHost EventStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonDown += e;
            return this;
        }

        public new WindowsFormsHost EventStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.StylusButtonUp += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewStylusButtonDown( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonDown += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewStylusButtonUp( System.Windows.Input.StylusButtonEventHandler e ) {
            C.PreviewStylusButtonUp += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyDown += e;
            return this;
        }

        public new WindowsFormsHost EventKeyDown( System.Windows.Input.KeyEventHandler e ) {
            C.KeyDown += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.PreviewKeyUp += e;
            return this;
        }

        public new WindowsFormsHost EventKeyUp( System.Windows.Input.KeyEventHandler e ) {
            C.KeyUp += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewGotKeyboardFocus += e;
            return this;
        }

        public new WindowsFormsHost EventGotKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.GotKeyboardFocus += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.PreviewLostKeyboardFocus += e;
            return this;
        }

        public new WindowsFormsHost EventLostKeyboardFocus( System.Windows.Input.KeyboardFocusChangedEventHandler e ) {
            C.LostKeyboardFocus += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.PreviewTextInput += e;
            return this;
        }

        public new WindowsFormsHost EventTextInput( System.Windows.Input.TextCompositionEventHandler e ) {
            C.TextInput += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.PreviewQueryContinueDrag += e;
            return this;
        }

        public new WindowsFormsHost EventQueryContinueDrag( System.Windows.QueryContinueDragEventHandler e ) {
            C.QueryContinueDrag += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.PreviewGiveFeedback += e;
            return this;
        }

        public new WindowsFormsHost EventGiveFeedback( System.Windows.GiveFeedbackEventHandler e ) {
            C.GiveFeedback += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewDragEnter( System.Windows.DragEventHandler e ) {
            C.PreviewDragEnter += e;
            return this;
        }

        public new WindowsFormsHost EventDragEnter( System.Windows.DragEventHandler e ) {
            C.DragEnter += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewDragOver( System.Windows.DragEventHandler e ) {
            C.PreviewDragOver += e;
            return this;
        }

        public new WindowsFormsHost EventDragOver( System.Windows.DragEventHandler e ) {
            C.DragOver += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewDragLeave( System.Windows.DragEventHandler e ) {
            C.PreviewDragLeave += e;
            return this;
        }

        public new WindowsFormsHost EventDragLeave( System.Windows.DragEventHandler e ) {
            C.DragLeave += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewDrop( System.Windows.DragEventHandler e ) {
            C.PreviewDrop += e;
            return this;
        }

        public new WindowsFormsHost EventDrop( System.Windows.DragEventHandler e ) {
            C.Drop += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchDown += e;
            return this;
        }

        public new WindowsFormsHost EventTouchDown( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchDown += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchMove += e;
            return this;
        }

        public new WindowsFormsHost EventTouchMove( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchMove += e;
            return this;
        }

        public new WindowsFormsHost EventPreviewTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.PreviewTouchUp += e;
            return this;
        }

        public new WindowsFormsHost EventTouchUp( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchUp += e;
            return this;
        }

        public new WindowsFormsHost EventGotTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.GotTouchCapture += e;
            return this;
        }

        public new WindowsFormsHost EventLostTouchCapture( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.LostTouchCapture += e;
            return this;
        }

        public new WindowsFormsHost EventTouchEnter( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchEnter += e;
            return this;
        }

        public new WindowsFormsHost EventTouchLeave( EventHandler<System.Windows.Input.TouchEventArgs> e ) {
            C.TouchLeave += e;
            return this;
        }

        public new WindowsFormsHost EventIsMouseDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseDirectlyOverChanged += e;
            return this;
        }

        public new WindowsFormsHost EventIsKeyboardFocusWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusWithinChanged += e;
            return this;
        }

        public new WindowsFormsHost EventIsMouseCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCapturedChanged += e;
            return this;
        }

        public new WindowsFormsHost EventIsMouseCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsMouseCaptureWithinChanged += e;
            return this;
        }

        public new WindowsFormsHost EventIsStylusDirectlyOverChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusDirectlyOverChanged += e;
            return this;
        }

        public new WindowsFormsHost EventIsStylusCapturedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCapturedChanged += e;
            return this;
        }

        public new WindowsFormsHost EventIsStylusCaptureWithinChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsStylusCaptureWithinChanged += e;
            return this;
        }

        public new WindowsFormsHost EventIsKeyboardFocusedChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsKeyboardFocusedChanged += e;
            return this;
        }

        public new WindowsFormsHost EventLayoutUpdated( System.EventHandler e ) {
            C.LayoutUpdated += e;
            return this;
        }

        public new WindowsFormsHost EventGotFocus( System.Windows.RoutedEventHandler e ) {
            C.GotFocus += e;
            return this;
        }

        public new WindowsFormsHost EventLostFocus( System.Windows.RoutedEventHandler e ) {
            C.LostFocus += e;
            return this;
        }

        public new WindowsFormsHost EventIsEnabledChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsEnabledChanged += e;
            return this;
        }

        public new WindowsFormsHost EventIsHitTestVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsHitTestVisibleChanged += e;
            return this;
        }

        public new WindowsFormsHost EventIsVisibleChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.IsVisibleChanged += e;
            return this;
        }

        public new WindowsFormsHost EventFocusableChanged( System.Windows.DependencyPropertyChangedEventHandler e ) {
            C.FocusableChanged += e;
            return this;
        }

        public new WindowsFormsHost EventManipulationStarting( EventHandler<System.Windows.Input.ManipulationStartingEventArgs> e ) {
            C.ManipulationStarting += e;
            return this;
        }

        public new WindowsFormsHost EventManipulationStarted( EventHandler<System.Windows.Input.ManipulationStartedEventArgs> e ) {
            C.ManipulationStarted += e;
            return this;
        }

        public new WindowsFormsHost EventManipulationDelta( EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> e ) {
            C.ManipulationDelta += e;
            return this;
        }

        public new WindowsFormsHost EventManipulationInertiaStarting( EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> e ) {
            C.ManipulationInertiaStarting += e;
            return this;
        }

        public new WindowsFormsHost EventManipulationBoundaryFeedback( EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> e ) {
            C.ManipulationBoundaryFeedback += e;
            return this;
        }

        public new WindowsFormsHost EventManipulationCompleted( EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> e ) {
            C.ManipulationCompleted += e;
            return this;
        }

        public WindowsFormsHost Child( Bind<System.Windows.Forms.Control> bind ) {
            C.Child = bind.V;
            return this;
        }



        public WindowsFormsHost Padding( Bind<System.Windows.Thickness> bind ) {
            C.Padding = bind.V;
            return this;
        }



        public WindowsFormsHost TabIndex( Bind<System.Int32> bind ) {
            C.TabIndex = bind.V;
            return this;
        }



        public WindowsFormsHost FontFamily( Bind<System.Windows.Media.FontFamily> bind ) {
            C.FontFamily = bind.V;
            return this;
        }



        public WindowsFormsHost FontSize( Bind<System.Double> bind ) {
            C.FontSize = bind.V;
            return this;
        }



        public WindowsFormsHost FontStyle( Bind<System.Windows.FontStyle> bind ) {
            C.FontStyle = bind.V;
            return this;
        }



        public WindowsFormsHost FontWeight( Bind<System.Windows.FontWeight> bind ) {
            C.FontWeight = bind.V;
            return this;
        }



        public WindowsFormsHost Foreground( Bind<System.Windows.Media.Brush> bind ) {
            C.Foreground = bind.V;
            return this;
        }



        public WindowsFormsHost Background( Bind<System.Windows.Media.Brush> bind ) {
            C.Background = bind.V;
            return this;
        }





        public new WindowsFormsHost Style( Bind<System.Windows.Style> bind ) {
           return  base.Style( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost OverridesDefaultStyle( Bind<System.Boolean> bind ) {
           return  base.OverridesDefaultStyle( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost UseLayoutRounding( Bind<System.Boolean> bind ) {
           return  base.UseLayoutRounding( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost Resources( Bind<System.Windows.ResourceDictionary> bind ) {
           return  base.Resources( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost DataContext( Bind<System.Object> bind ) {
           return  base.DataContext( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost Language( Bind<System.Windows.Markup.XmlLanguage> bind ) {
           return  base.Language( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost Name( Bind<System.String> bind ) {
           return  base.Name( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost Tag( Bind<System.Object> bind ) {
           return  base.Tag( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost LayoutTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.LayoutTransform( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost Width( Bind<System.Double> bind ) {
           return  base.Width( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost MinWidth( Bind<System.Double> bind ) {
           return  base.MinWidth( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost MaxWidth( Bind<System.Double> bind ) {
           return  base.MaxWidth( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost Height( Bind<System.Double> bind ) {
           return  base.Height( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost MinHeight( Bind<System.Double> bind ) {
           return  base.MinHeight( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost MaxHeight( Bind<System.Double> bind ) {
           return  base.MaxHeight( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost FlowDirection( Bind<System.Windows.FlowDirection> bind ) {
           return  base.FlowDirection( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost Margin( Bind<System.Windows.Thickness> bind ) {
           return  base.Margin( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost HorizontalAlignment( Bind<System.Windows.HorizontalAlignment> bind ) {
           return  base.HorizontalAlignment( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost VerticalAlignment( Bind<System.Windows.VerticalAlignment> bind ) {
           return  base.VerticalAlignment( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost FocusVisualStyle( Bind<System.Windows.Style> bind ) {
           return  base.FocusVisualStyle( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost Cursor( Bind<System.Windows.Input.Cursor> bind ) {
           return  base.Cursor( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost ForceCursor( Bind<System.Boolean> bind ) {
           return  base.ForceCursor( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost ToolTip( Bind<System.Object> bind ) {
           return  base.ToolTip( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost ContextMenu( Bind<System.Windows.Controls.ContextMenu> bind ) {
           return  base.ContextMenu( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost AllowDrop( Bind<System.Boolean> bind ) {
           return  base.AllowDrop( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost RenderTransform( Bind<System.Windows.Media.Transform> bind ) {
           return  base.RenderTransform( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost RenderTransformOrigin( Bind<System.Windows.Point> bind ) {
           return  base.RenderTransformOrigin( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost Opacity( Bind<System.Double> bind ) {
           return  base.Opacity( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost OpacityMask( Bind<System.Windows.Media.Brush> bind ) {
           return  base.OpacityMask( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost Uid( Bind<System.String> bind ) {
           return  base.Uid( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost Visibility( Bind<System.Windows.Visibility> bind ) {
           return  base.Visibility( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost ClipToBounds( Bind<System.Boolean> bind ) {
           return  base.ClipToBounds( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost SnapsToDevicePixels( Bind<System.Boolean> bind ) {
           return  base.SnapsToDevicePixels( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost IsEnabled( Bind<System.Boolean> bind ) {
           return  base.IsEnabled( bind ) as WindowsFormsHost;
        }


        public new WindowsFormsHost Focusable( Bind<System.Boolean> bind ) {
           return  base.Focusable( bind ) as WindowsFormsHost;
        }

   }
}
